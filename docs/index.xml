<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>RDKit blog</title>
<link>https://greglandrum.github.io/rdkit-blog/</link>
<atom:link href="https://greglandrum.github.io/rdkit-blog/index.xml" rel="self" type="application/rss+xml"/>
<description>RDKit experiments, tips, and tutorials</description>
<generator>quarto-1.6.43</generator>
<lastBuildDate>Wed, 23 Jul 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>Storing partial charges in SD files</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-24-writing-partial-charges-to-sd-files.html</link>
  <description><![CDATA[ 




<p>I was chatting with Pat Walters at the CADD GRC and he brought up point 7 from his famous <a href="https://www.linkedin.com/posts/wpwalters_i-thoroughly-enjoyed-the-first-day-of-the-activity-7316447084209991682-Yuki">14 points LinkedIn post</a>. The usual justification given for using mol2 files is that they are the only file format we have that allows including partial charges. This is a widely held opinion, but it’s not really true. It’s actually quite easy to store arbitrary atom (or bond) properties in SD files and the RDKit has a simple mechanism for doing this. This post is a short tutorial on how to use this functionality.</p>
<p>The handling of atomic and bond properties in SD files is described in more detail in <a href="https://www.rdkit.org/docs/RDKit_Book.html#atom-properties-and-sdf-files">the docs</a>.</p>
<p>Rather than doing the usual thing and generating Gasteiger-Marsilli charges, here I’m going to use the DASH-props tree that we developed in the Riniker lab to rapidly generate approximate AM1BCC charges. DASH uses a hierarchical tree of substructures to compute high-quality estimates of AM1BCC charges for a molecule. Because it’s based on substructures, the method is fast and conformation independent. If want to learn more about the algorithm, take a look at <a href="https://pubs.aip.org/aip/jcp/article/161/7/074103/3308079/DASH-properties-Estimating-atomic-and-molecular">the open-access paper</a>.</p>
<p>If you want to run the code in this notebook, you’ll need to install DASH props. This requires adding some packages to your conda environment. There’s an <a href="https://github.com/rinikerlab/DASH-tree/blob/main/tree_only_env.yml">environment file</a> in the DASH-tree repo that you can use, but if you already have a working RDKit environment, I think this is sufficient:</p>
<pre><code>% conda install -c conda-forge pytables tqdm</code></pre>
<p>and then pip installing the DASH tree package:</p>
<pre><code>% python -m pip install git+https://github.com/rinikerlab/DASH-tree</code></pre>
<blockquote class="blockquote">
<p>An aside: the way these properties are stored in the SD file is very easy to parse (The format is actually the result of some discussions I had with a couple of cheminformatics software vendors back in 2019; I think I ended up being the only one to implement what we had discussed), so adding support for this format to other software or toolkits that can already read SD files wouldn’t be much of a lift. If you’re a developer and have questions, please just ask.</p>
</blockquote>
<div id="51317896" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import the required stuff from DASH:</span></span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> serenityff.charge.tree.dash_tree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DASHTree, TreeType</span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> serenityff.charge.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dash_props_tree_path</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.4</code></pre>
</div>
</div>
<div id="9fe0e6db" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the property tree.</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note, that the files will be automatically downloaded the first time the tree is loaded from the ETHZ Research Collection.</span></span>
<span id="cb5-3">tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DASHTree(tree_folder_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dash_props_tree_path, tree_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TreeType.FULL)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading DASH tree data
Loaded 122 trees and data</code></pre>
</div>
</div>
<p>Construct a sample molecule and compute the charges:</p>
<div id="a98ba683" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">esomeprazole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC1=C(C(=C(C=C1)N)C(=O)N)C(=O)N'</span>)</span>
<span id="cb7-2">esomep_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.AddHs(esomeprazole)</span>
<span id="cb7-3"></span>
<span id="cb7-4">charges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree.get_molecules_partial_charges(esomep_h, chg_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AM1BCC"</span>, chg_std_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AM1BCC_std"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"charges"</span>]</span></code></pre></div>
</div>
<p>Set the charges as atomic properties:</p>
<div id="40ba7fcf" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> esomep_h.GetAtoms():</span>
<span id="cb8-2">    atom.SetDoubleProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AM1BCC_charge"</span>, charges[atom.GetIdx()])</span></code></pre></div>
</div>
<div id="77259b55" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is the one extra call you have to make in order to </span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert the atom properties to a molecule property which will </span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be written to the SD file:</span></span>
<span id="cb9-5">Chem.CreateAtomDoublePropertyList(esomep_h,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AM1BCC_charge'</span>)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write the SD data to a string so that we can look at it:</span></span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StringIO</span>
<span id="cb9-9">sio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StringIO()</span>
<span id="cb9-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Chem.SDWriter(sio) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> w:</span>
<span id="cb9-11">    w.write(esomep_h)</span>
<span id="cb9-12"></span>
<span id="cb9-13">sdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sio.getvalue()</span>
<span id="cb9-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sdf)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
     RDKit          2D

 25 25  0  0  0  0  0  0  0  0999 V2000
    3.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    1.5000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.7500   -1.2990    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -0.7500   -1.2990    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.5000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -0.7500    1.2990    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.7500    1.2990    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -3.0000    0.0000    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
   -1.5000   -2.5981    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.1155   -3.5040    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
   -3.0000   -2.5981    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
    1.5000   -2.5981    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    3.0000   -2.5981    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    0.7500   -3.8971    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
    4.5000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    3.0000   -1.5000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    3.0000    1.5000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -1.5000    2.5981    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    1.5000    2.5981    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.7500    1.2990    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.5923   -0.7860    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.7500   -3.8971    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.5923   -1.8121    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    1.5000   -5.1962    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -0.2268   -4.0171    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
  1  2  1  0
  2  3  2  0
  3  4  1  0
  4  5  2  0
  5  6  1  0
  6  7  2  0
  5  8  1  0
  4  9  1  0
  9 10  2  0
  9 11  1  0
  3 12  1  0
 12 13  2  0
 12 14  1  0
  7  2  1  0
  1 15  1  0
  1 16  1  0
  1 17  1  0
  6 18  1  0
  7 19  1  0
  8 20  1  0
  8 21  1  0
 11 22  1  0
 11 23  1  0
 14 24  1  0
 14 25  1  0
M  END
&gt;  &lt;atom.dprop.AM1BCC_charge&gt;  (1) 
-0.057020346264131966 -0.05498106388730991 -0.1417576117737365 -0.24649839652124084 0.19183992335343653 -0.14084077400735293 -0.13325346021838766 -0.85373148869180315 0.69066109221699112
-0.61948158338060078 -0.63810034626413192 0.6751982937456793 -0.58508759253159914 -0.67224362594143339 0.054944129070337355 0.054944129070337355 0.054944129070337355 0.1595973470895479
0.1595973470895479 0.41622965373586801 0.41622965373586801 0.31563710234748005 0.31563710234748005 0.31876819330440859 0.31876819330440859

$$$$
</code></pre>
</div>
</div>
<p>You can see that the property <code>atom.dprop.AM1BCC_charge</code> has been added to the SD string. Also that we’re writing way too many sig figs… it’s probably worth adding an option to control that.</p>
<p>When that SD string is parsed, the atom properties are extracted automatically and assigned to the atoms:</p>
<div id="89ae23e1" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">suppl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SDMolSupplier()</span>
<span id="cb11-2">suppl.SetData(sdf,removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(suppl)</span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> m.GetAtoms():</span>
<span id="cb11-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(atom.GetIdx(), atom.GetDoubleProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AM1BCC_charge"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 -0.057020346264131966
1 -0.05498106388730991
2 -0.1417576117737365
3 -0.24649839652124084
4 0.19183992335343653
5 -0.14084077400735293
6 -0.13325346021838766
7 -0.8537314886918032
8 0.6906610922169911
9 -0.6194815833806008
10 -0.6381003462641319
11 0.6751982937456793
12 -0.5850875925315991
13 -0.6722436259414334
14 0.054944129070337355
15 0.054944129070337355
16 0.054944129070337355
17 0.1595973470895479
18 0.1595973470895479
19 0.416229653735868
20 0.416229653735868
21 0.31563710234748005
22 0.31563710234748005
23 0.3187681933044086
24 0.3187681933044086</code></pre>
</div>
</div>
<p>That’s it… hopefully it is useful</p>



 ]]></description>
  <category>tutorial</category>
  <category>3d</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-24-writing-partial-charges-to-sd-files.html</guid>
  <pubDate>Wed, 23 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Please stop saying “The Tanimoto similarity is”</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-17-naming-similarity-metrics.html</link>
  <description><![CDATA[ 




<p>At both ICCS and the CADD GRC this year I noticed multiple people, either in talks or on posters, reporting the “Tanimoto similarity” between two (or more) molecules. This is an unfortunate shorthand because it leaves out a critical piece of information: what fingerprint did you use when doing the Tanimoto calculation? Without knowing that, it’s really not possible to make sense of what the reported similarity values actually mean.</p>
<p>This isn’t one of those examples of me being pedantic (or cranky); the Tanimoto similarities calculated using different fingerprints can be very, very different. I’ve written several blogs posts about this with more details, a couple of examples are <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">this post looking at the “noise threshold” of various fingerprints</a> and <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-21-similarity-search-thresholds.html">this one looking at what typical similarity values are between “closely related” compounds</a>.</p>
<p>As a quick illustration of this, I calculated the similarities between esomeprazole and lansoprazole, two molecules that look (to me at least) pretty similar:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-17-naming-similarity-metrics_files/figure-html/49e4f7ab-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<p>The Tanimoto similarity between these two molecules using the RDKit fingerprint is 0.79, using the Morgan2 fingerprint it’s 0.43. That’s a huge difference. If I had just said that the similarity was 0.43 and you guessed that I was using the RDKit fingerprint, which has a noise threshold of 0.51, you would conclude that the molecules are really not similar at all. With the Morgan2 fingerprint, on the other hand, 0.43 indicates two closely related molecules.</p>
<p>My concrete, and very easy to implement, suggestion: if you report a similarity value (in a talk, poster, paper, etc.) you should always mention the fingerprint used. So do something like “The Tanimoto similarity calculated using Morgan2 fingerprints was 0.43”. It’s not a lot of extra words, but it does allow your audience to understand what you actually did. And hopefully that’s a good thing.</p>
<p>The rest of this post is just the code to produce the image above, generate fingerprints, and calculate similarities.</p>
<div id="ef81c872" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.4</code></pre>
</div>
</div>
<div id="e06ac98c" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">esomeprazole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'COc1ccc2nc([nH]c2c1)[S@](=O)Cc1ncc(C)c(OC)c1C'</span>)</span>
<span id="cb3-2">lansoprazole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FC(F)(F)COc1ccnc(c1C)CS(=O)c2[nH]c3ccccc3n2'</span>)</span>
<span id="cb3-3">Draw.MolsToGridImage([esomeprazole, lansoprazole], </span>
<span id="cb3-4">    legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'esomeprazole'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lansoprazole'</span>], molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, subImgSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-17-naming-similarity-metrics_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="f115df66" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">rdk_fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetRDKitFPGenerator()</span>
<span id="cb4-2">mfp_fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-3">rdk_fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [rdk_fpg.GetFingerprint(mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [esomeprazole, lansoprazole]]</span>
<span id="cb4-4">mfp_fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mfp_fpg.GetFingerprint(mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [esomeprazole, lansoprazole]]</span>
<span id="cb4-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RDKit fingerprint similarity:'</span>, DataStructs.TanimotoSimilarity(rdk_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], rdk_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb4-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Morgan fingerprint similarity:'</span>, DataStructs.TanimotoSimilarity(mfp_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], mfp_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RDKit fingerprint similarity: 0.7943722943722944
Morgan fingerprint similarity: 0.4264705882352941</code></pre>
</div>
</div>
<p>Out of curiousity, what are the Dice similarities between those fingerprints?</p>
<div id="3ef5bdff" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RDKit fingerprint similarity:'</span>, DataStructs.DiceSimilarity(rdk_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], rdk_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Morgan fingerprint similarity:'</span>, DataStructs.DiceSimilarity(mfp_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], mfp_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RDKit fingerprint similarity: 0.8854041013268998
Morgan fingerprint similarity: 0.5979381443298969</code></pre>
</div>
</div>



 ]]></description>
  <category>similarity</category>
  <category>fingerprints</category>
  <category>rants</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-17-naming-similarity-metrics.html</guid>
  <pubDate>Wed, 16 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Picking a small set of diverse molecules from a large set</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods.html</link>
  <description><![CDATA[ 




<p>This is expanded and updated version of a <a href="https://rdkit.blogspot.com/2014/08/picking-diverse-compounds-from-large.html">much older post</a>.</p>
<p>This post explores two different approaches for picking diverse small subsets of compounds from large sets: random selection and the MaxMin algorithm (Ashton, M. et. al., Quant. Struct.-Act. Relat., 21 (2002), 598-604).</p>
<p>The TL;DR is that if you want to pick a small number of compounds from a large set, the fastest way (by far) to do so is to just randomly select compounds.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw,rdMolProcessing,rdFingerprintGenerator</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SimDivFilters,DataStructs</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(time.asctime())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3
Thu Jul 10 06:21:44 2025</code></pre>
</div>
</div>
<p>Start by getting a copy of the ChEMBL35 SDF using the <a href="https://github.com/cthoyt/chembl-downloader"><code>chembl_downloader</code></a>.</p>
<div id="cell-4" class="cell" data-scrolled="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chembl_downloader</span>
<span id="cb3-2">sdName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chembl_downloader.download_sdf(version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'35'</span>)</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sdName)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/glandrum/.data/chembl/35/chembl_35.sdf.gz</code></pre>
</div>
</div>
<p>Efficiently generate the fingerprints using the <a href="http://localhost:8888/notebooks/2024_New_Stuff.ipynb#rdMolProcessing"><code>rdMolProcessing</code></a> package:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb5-2"></span>
<span id="cb5-3">fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5">opts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdMolProcessing.SupplierOptions()</span>
<span id="cb5-6">opts.numThreads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rdBase.BlockLogs():</span>
<span id="cb5-9">    t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() </span>
<span id="cb5-10">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdMolProcessing.GetFingerprintsForMolsInFile(sdName,options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>opts,generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg)</span>
<span id="cb5-11">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time.time()</span>
<span id="cb5-12">fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb5-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fingerprints.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>60.71s, 2474577 fingerprints.</code></pre>
</div>
</div>
<p>Now do a standard diversity pick of 1000 compounds using the RDKit’s MaxMinPicker and Roger Sayle’s <a href="https://github.com/rdkit/UGM_2017/blob/master/Presentations/Sayle_RDKitDiversity_Berlin17.pdf">lazy bit vector picker</a>:</p>
<div id="cell-8" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb7-2">mmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SimDivFilters.MaxMinPicker()</span>
<span id="cb7-3">t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time.time()</span>
<span id="cb7-4">bv_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mmp.LazyBitVectorPick(fps,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fps),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb7-5">t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time.time()</span>
<span id="cb7-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"That took </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>That took 13.514 seconds</code></pre>
</div>
</div>
<p>Assess the diversity by looking at a histogram of similarities between the picked compounds:</p>
<div id="cell-10" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dist_hist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(bv_ids)):</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(bv_ids)):</span>
<span id="cb9-4">        dist_hist.append(DataStructs.TanimotoSimilarity(fps[bv_ids[i]],fps[bv_ids[j]]))</span>
<span id="cb9-5"></span>
<span id="cb9-6">plt.hist(dist_hist,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb9-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MaxMin Picks"</span>)</span>
<span id="cb9-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Similarity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That definitely yields compounds that have a low similarity to each other.</p>
<p>An alternative, and much faster, method for picking small diverse subsets from a large set is to simply randomly pick. Let’s see how that does here:</p>
<div id="cell-12" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb10-2">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xa100f</span>)</span>
<span id="cb10-3">rr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fps)))</span>
<span id="cb10-4">random.shuffle(rr)</span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is our random pick, it takes no time at all</span></span>
<span id="cb10-6">r_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rr[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb10-7"></span></code></pre></div>
</div>
<p>Now look at the similarities between the picked fingerprints:</p>
<div id="cell-14" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">rfps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fps[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> r_ids]</span>
<span id="cb11-2">dist_hist2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rfps)):</span>
<span id="cb11-4">    dist_hist2.extend(DataStructs.BulkTanimotoSimilarity(rfps[i],rfps[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]))</span>
<span id="cb11-5">plt.hist(dist_hist2,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb11-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Picks"</span>)</span>
<span id="cb11-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Similarity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>At first glance, it looks like the random picks are much less diverse than the picks with the MaxMin algorithm: the peak in the first histogram is significantly shifted to higher similarity.</p>
<p>However: there is an important detail to keep in mind: the “noise level” of the fingerprint. In an [earlier post] (https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html), I looked at similarities between random pairs of “drug-like” compounds from ChEMBL in order to identify thresholds for when a similarity value is at the noise level (defined by finding the value which 99% of random pairs have a lower similarity). For the fingerprint used here, Morgan2, this value is 0.226.</p>
<p>Using that cutoff, we can easily figure out what fraction of the pairs in the set above are “noise”:</p>
<div id="cell-16" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.226</span></span>
<span id="cb12-2">count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dist_hist2 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>noise])</span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Count: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, fraction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dist_hist2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Count: 492873, fraction: 0.9867327327327328</code></pre>
</div>
</div>
<p>So almost 99% of the pairs are below the noise level, exactly what we would expect for random pairs based on the <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">similarity thresholds blog post</a>.</p>
<p>If we really, really don’t want any picks to have a similarity above the threshold, we can modify the random picking approach slightly to make sure we don’t accidentally add a close neighbor:</p>
<div id="cell-19" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.226</span></span>
<span id="cb14-2">nPicks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb14-5">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xa100f</span>)</span>
<span id="cb14-6">rr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fps)))</span>
<span id="cb14-7">random.shuffle(rr)</span>
<span id="cb14-8"></span>
<span id="cb14-9">rfps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fps[rr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]]</span>
<span id="cb14-10">r_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [rr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb14-11">which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_ids) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> nPicks:</span>
<span id="cb14-13">    rj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rr[which]</span>
<span id="cb14-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(DataStructs.BulkTanimotoSimilarity(fps[rj],rfps))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>noise:</span>
<span id="cb14-15">        r_ids.append(rj)</span>
<span id="cb14-16">        rfps.append(fps[rj])</span>
<span id="cb14-17">    which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-18"></span></code></pre></div>
</div>
<p>This takes a bit longer but gets us the desired result:</p>
<div id="cell-21" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">rfps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fps[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> r_ids]</span>
<span id="cb15-2">dist_hist2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rfps)):</span>
<span id="cb15-4">    dist_hist2.extend(DataStructs.BulkTanimotoSimilarity(rfps[i],rfps[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]))</span>
<span id="cb15-5">plt.hist(dist_hist2,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb15-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filtered Random Picks"</span>)</span>
<span id="cb15-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Similarity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-22" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.226</span></span>
<span id="cb16-2">count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dist_hist2 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>noise])</span>
<span id="cb16-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Count: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, fraction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dist_hist2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-4"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Count: 499500, fraction: 1.0</code></pre>
</div>
</div>
<p><strong>Fazit:</strong> randomly picking small numbers of compounds from the large set gives subsets that are quite diverse. It’s also a lot quicker than using the diversity picker: not only can we skip the diversity picking algorithm, but the molecules and fingerprints don’t even need to be constructed.</p>
<p>Clearly this is not going to work as well when picking from compounds that are reasonably closely related to each other, but for small subsets of large diverse sets, random picking is a solid approach.</p>



 ]]></description>
  <category>similarity</category>
  <category>fingerprints</category>
  <category>tutorial</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods.html</guid>
  <pubDate>Wed, 09 Jul 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/diversity-picking-methods1.png" medium="image" type="image/png" height="114" width="144"/>
</item>
<item>
  <title>The impact of molecular size on similarity between very closely related molecules.</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-04-size-and-similarity-molecular-changes.html</link>
  <description><![CDATA[ 




<p>This post adapts the analysis I did previously of the <a href="https://greglandrum.github.io/rdkit-blog/posts/2024-05-14-similarity-and-centrality.html">impact of single-atom changes on calculated similarity</a> to take into account molecule size. It’s kind of kind of a “part 2” of the <a href="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1.html">post looking at the impact of molecular size on similarity</a></p>
<p>For the analysis I use the same sets (tranches) of molecules collected from PubChem in <a href="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1.html">part 1</a>. I randomly selected 10K molecules from each tranche. The code for determining the impact of single-atom changes in each molecule is the same as the <a href="https://greglandrum.github.io/rdkit-blog/posts/2024-05-14-similarity-and-centrality.html">earlier post</a>.</p>
<p>The results look like this:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>fp</th>
<th>type</th>
<th>tranche</th>
<th>shift</th>
<th>90%</th>
<th>95%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>10</td>
<td>0.46(0.11)</td>
<td>0.32</td>
<td>0.29</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>bits</td>
<td>20</td>
<td>0.64(0.09)</td>
<td>0.52</td>
<td>0.48</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>30</td>
<td>0.71(0.08)</td>
<td>0.60</td>
<td>0.57</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>bits</td>
<td>40</td>
<td>0.77(0.07)</td>
<td>0.68</td>
<td>0.66</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>50</td>
<td>0.80(0.06)</td>
<td>0.72</td>
<td>0.69</td>
</tr>
</tbody>
</table>
<p>As before, we can think about these values as thresholds for retrieving extremely similar molecules; here we define that to mean molecules that have the same connectivity and differ in the identity of a single atom.</p>
<p>When working with molecules with between 10 and 20 atoms and using the MFP2 fingerprint (Morgan fingerprint with radius 2) we need to use a Tanimoto similarity threshold of 0.48 to be 95% certain of retrieving extremely similar molecules. The threshold goes up to 0.66 when working with molecules with between 30 and 40 atoms. The average similarity between extremely similar molecules with between 10 and 20 atoms is 0.64 with a standard deviation of 0.09.</p>
<p>Unsurprisingly, the values increase with the size of the molecules in the tranche. This holds for all of the fingerprints.</p>
<p>Here’s the giant table of numbers:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>fp</th>
<th>type</th>
<th>tranche</th>
<th>shift</th>
<th>90%</th>
<th>95%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MFP0</td>
<td>counts</td>
<td>10</td>
<td>0.77(0.07)</td>
<td>0.75</td>
<td>0.67</td>
</tr>
<tr class="even">
<td>MFP0</td>
<td>counts</td>
<td>20</td>
<td>0.89(0.02)</td>
<td>0.87</td>
<td>0.86</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>counts</td>
<td>30</td>
<td>0.92(0.01)</td>
<td>0.90</td>
<td>0.90</td>
</tr>
<tr class="even">
<td>MFP0</td>
<td>counts</td>
<td>40</td>
<td>0.94(0.00)</td>
<td>0.94</td>
<td>0.94</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>counts</td>
<td>50</td>
<td>0.96(0.00)</td>
<td>0.95</td>
<td>0.95</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>counts</td>
<td>10</td>
<td>0.61(0.09)</td>
<td>0.50</td>
<td>0.45</td>
</tr>
<tr class="odd">
<td>MFP1</td>
<td>counts</td>
<td>20</td>
<td>0.78(0.04)</td>
<td>0.73</td>
<td>0.70</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>counts</td>
<td>30</td>
<td>0.84(0.03)</td>
<td>0.80</td>
<td>0.78</td>
</tr>
<tr class="odd">
<td>MFP1</td>
<td>counts</td>
<td>40</td>
<td>0.88(0.02)</td>
<td>0.86</td>
<td>0.85</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>counts</td>
<td>50</td>
<td>0.91(0.02)</td>
<td>0.89</td>
<td>0.88</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>counts</td>
<td>10</td>
<td>0.49(0.10)</td>
<td>0.36</td>
<td>0.33</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>counts</td>
<td>20</td>
<td>0.68(0.08)</td>
<td>0.58</td>
<td>0.55</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>counts</td>
<td>30</td>
<td>0.75(0.06)</td>
<td>0.68</td>
<td>0.66</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>counts</td>
<td>40</td>
<td>0.82(0.04)</td>
<td>0.76</td>
<td>0.75</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>counts</td>
<td>50</td>
<td>0.85(0.04)</td>
<td>0.81</td>
<td>0.80</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>counts</td>
<td>10</td>
<td>0.44(0.10)</td>
<td>0.32</td>
<td>0.29</td>
</tr>
<tr class="odd">
<td>MFP3</td>
<td>counts</td>
<td>20</td>
<td>0.60(0.10)</td>
<td>0.47</td>
<td>0.44</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>counts</td>
<td>30</td>
<td>0.68(0.08)</td>
<td>0.58</td>
<td>0.55</td>
</tr>
<tr class="odd">
<td>MFP3</td>
<td>counts</td>
<td>40</td>
<td>0.75(0.07)</td>
<td>0.67</td>
<td>0.65</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>counts</td>
<td>50</td>
<td>0.80(0.06)</td>
<td>0.73</td>
<td>0.71</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>bits</td>
<td>10</td>
<td>0.77(0.10)</td>
<td>0.67</td>
<td>0.60</td>
</tr>
<tr class="even">
<td>MFP0</td>
<td>bits</td>
<td>20</td>
<td>0.87(0.05)</td>
<td>0.80</td>
<td>0.78</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>bits</td>
<td>30</td>
<td>0.89(0.04)</td>
<td>0.82</td>
<td>0.80</td>
</tr>
<tr class="even">
<td>MFP0</td>
<td>bits</td>
<td>40</td>
<td>0.91(0.03)</td>
<td>0.86</td>
<td>0.83</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>bits</td>
<td>50</td>
<td>0.91(0.04)</td>
<td>0.86</td>
<td>0.83</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>bits</td>
<td>10</td>
<td>0.59(0.11)</td>
<td>0.47</td>
<td>0.41</td>
</tr>
<tr class="odd">
<td>MFP1</td>
<td>bits</td>
<td>20</td>
<td>0.75(0.07)</td>
<td>0.67</td>
<td>0.63</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>bits</td>
<td>30</td>
<td>0.80(0.06)</td>
<td>0.73</td>
<td>0.71</td>
</tr>
<tr class="odd">
<td>MFP1</td>
<td>bits</td>
<td>40</td>
<td>0.84(0.05)</td>
<td>0.78</td>
<td>0.76</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>bits</td>
<td>50</td>
<td>0.86(0.05)</td>
<td>0.80</td>
<td>0.78</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>10</td>
<td>0.46(0.11)</td>
<td>0.32</td>
<td>0.29</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>bits</td>
<td>20</td>
<td>0.64(0.09)</td>
<td>0.52</td>
<td>0.48</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>30</td>
<td>0.71(0.08)</td>
<td>0.60</td>
<td>0.57</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>bits</td>
<td>40</td>
<td>0.77(0.07)</td>
<td>0.68</td>
<td>0.66</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>50</td>
<td>0.80(0.06)</td>
<td>0.72</td>
<td>0.69</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>bits</td>
<td>10</td>
<td>0.41(0.11)</td>
<td>0.29</td>
<td>0.26</td>
</tr>
<tr class="odd">
<td>MFP3</td>
<td>bits</td>
<td>20</td>
<td>0.55(0.11)</td>
<td>0.41</td>
<td>0.37</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>bits</td>
<td>30</td>
<td>0.63(0.10)</td>
<td>0.50</td>
<td>0.46</td>
</tr>
<tr class="odd">
<td>MFP3</td>
<td>bits</td>
<td>40</td>
<td>0.70(0.09)</td>
<td>0.59</td>
<td>0.56</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>bits</td>
<td>50</td>
<td>0.74(0.08)</td>
<td>0.64</td>
<td>0.60</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>counts</td>
<td>10</td>
<td>0.91(0.13)</td>
<td>0.75</td>
<td>0.71</td>
</tr>
<tr class="even">
<td>FFP0</td>
<td>counts</td>
<td>20</td>
<td>0.96(0.06)</td>
<td>0.88</td>
<td>0.86</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>counts</td>
<td>30</td>
<td>0.98(0.04)</td>
<td>0.91</td>
<td>0.90</td>
</tr>
<tr class="even">
<td>FFP0</td>
<td>counts</td>
<td>40</td>
<td>0.98(0.03)</td>
<td>0.94</td>
<td>0.94</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>counts</td>
<td>50</td>
<td>0.99(0.02)</td>
<td>0.95</td>
<td>0.95</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>counts</td>
<td>10</td>
<td>0.85(0.20)</td>
<td>0.57</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td>FFP1</td>
<td>counts</td>
<td>20</td>
<td>0.93(0.11)</td>
<td>0.77</td>
<td>0.73</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>counts</td>
<td>30</td>
<td>0.96(0.07)</td>
<td>0.84</td>
<td>0.82</td>
</tr>
<tr class="odd">
<td>FFP1</td>
<td>counts</td>
<td>40</td>
<td>0.97(0.05)</td>
<td>0.88</td>
<td>0.86</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>counts</td>
<td>50</td>
<td>0.98(0.04)</td>
<td>0.91</td>
<td>0.89</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>counts</td>
<td>10</td>
<td>0.81(0.25)</td>
<td>0.43</td>
<td>0.38</td>
</tr>
<tr class="even">
<td>FFP2</td>
<td>counts</td>
<td>20</td>
<td>0.90(0.15)</td>
<td>0.65</td>
<td>0.61</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>counts</td>
<td>30</td>
<td>0.94(0.11)</td>
<td>0.75</td>
<td>0.71</td>
</tr>
<tr class="even">
<td>FFP2</td>
<td>counts</td>
<td>40</td>
<td>0.96(0.08)</td>
<td>0.81</td>
<td>0.79</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>counts</td>
<td>50</td>
<td>0.97(0.06)</td>
<td>0.85</td>
<td>0.83</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>counts</td>
<td>10</td>
<td>0.79(0.27)</td>
<td>0.37</td>
<td>0.33</td>
</tr>
<tr class="odd">
<td>FFP3</td>
<td>counts</td>
<td>20</td>
<td>0.88(0.19)</td>
<td>0.56</td>
<td>0.51</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>counts</td>
<td>30</td>
<td>0.92(0.14)</td>
<td>0.67</td>
<td>0.62</td>
</tr>
<tr class="odd">
<td>FFP3</td>
<td>counts</td>
<td>40</td>
<td>0.94(0.11)</td>
<td>0.74</td>
<td>0.71</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>counts</td>
<td>50</td>
<td>0.95(0.09)</td>
<td>0.79</td>
<td>0.76</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>bits</td>
<td>10</td>
<td>0.92(0.16)</td>
<td>0.67</td>
<td>0.50</td>
</tr>
<tr class="even">
<td>FFP0</td>
<td>bits</td>
<td>20</td>
<td>0.96(0.11)</td>
<td>0.80</td>
<td>0.71</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>bits</td>
<td>30</td>
<td>0.97(0.08)</td>
<td>0.86</td>
<td>0.80</td>
</tr>
<tr class="even">
<td>FFP0</td>
<td>bits</td>
<td>40</td>
<td>0.98(0.06)</td>
<td>1.00</td>
<td>0.83</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>bits</td>
<td>50</td>
<td>0.99(0.05)</td>
<td>1.00</td>
<td>0.86</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>bits</td>
<td>10</td>
<td>0.84(0.22)</td>
<td>0.50</td>
<td>0.43</td>
</tr>
<tr class="odd">
<td>FFP1</td>
<td>bits</td>
<td>20</td>
<td>0.92(0.14)</td>
<td>0.69</td>
<td>0.62</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>bits</td>
<td>30</td>
<td>0.95(0.11)</td>
<td>0.77</td>
<td>0.71</td>
</tr>
<tr class="odd">
<td>FFP1</td>
<td>bits</td>
<td>40</td>
<td>0.96(0.08)</td>
<td>0.83</td>
<td>0.78</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>bits</td>
<td>50</td>
<td>0.97(0.06)</td>
<td>0.88</td>
<td>0.82</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>bits</td>
<td>10</td>
<td>0.78(0.28)</td>
<td>0.35</td>
<td>0.29</td>
</tr>
<tr class="even">
<td>FFP2</td>
<td>bits</td>
<td>20</td>
<td>0.88(0.19)</td>
<td>0.56</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>bits</td>
<td>30</td>
<td>0.92(0.14)</td>
<td>0.66</td>
<td>0.60</td>
</tr>
<tr class="even">
<td>FFP2</td>
<td>bits</td>
<td>40</td>
<td>0.94(0.11)</td>
<td>0.74</td>
<td>0.69</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>bits</td>
<td>50</td>
<td>0.95(0.09)</td>
<td>0.79</td>
<td>0.74</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>bits</td>
<td>10</td>
<td>0.76(0.30)</td>
<td>0.30</td>
<td>0.25</td>
</tr>
<tr class="odd">
<td>FFP3</td>
<td>bits</td>
<td>20</td>
<td>0.85(0.23)</td>
<td>0.45</td>
<td>0.39</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>bits</td>
<td>30</td>
<td>0.90(0.18)</td>
<td>0.57</td>
<td>0.51</td>
</tr>
<tr class="odd">
<td>FFP3</td>
<td>bits</td>
<td>40</td>
<td>0.92(0.14)</td>
<td>0.66</td>
<td>0.60</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>bits</td>
<td>50</td>
<td>0.94(0.12)</td>
<td>0.72</td>
<td>0.66</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>counts</td>
<td>10</td>
<td>0.36(0.19)</td>
<td>0.13</td>
<td>0.09</td>
</tr>
<tr class="even">
<td>RDK5</td>
<td>counts</td>
<td>20</td>
<td>0.59(0.18)</td>
<td>0.35</td>
<td>0.29</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>counts</td>
<td>30</td>
<td>0.69(0.14)</td>
<td>0.49</td>
<td>0.43</td>
</tr>
<tr class="even">
<td>RDK5</td>
<td>counts</td>
<td>40</td>
<td>0.77(0.12)</td>
<td>0.60</td>
<td>0.55</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>counts</td>
<td>50</td>
<td>0.81(0.10)</td>
<td>0.66</td>
<td>0.62</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>counts</td>
<td>10</td>
<td>0.30(0.16)</td>
<td>0.11</td>
<td>0.08</td>
</tr>
<tr class="odd">
<td>RDK7</td>
<td>counts</td>
<td>20</td>
<td>0.53(0.20)</td>
<td>0.27</td>
<td>0.22</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>counts</td>
<td>30</td>
<td>0.64(0.17)</td>
<td>0.40</td>
<td>0.35</td>
</tr>
<tr class="odd">
<td>RDK7</td>
<td>counts</td>
<td>40</td>
<td>0.73(0.14)</td>
<td>0.53</td>
<td>0.47</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>counts</td>
<td>50</td>
<td>0.79(0.13)</td>
<td>0.60</td>
<td>0.55</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>bits</td>
<td>10</td>
<td>0.36(0.18)</td>
<td>0.14</td>
<td>0.11</td>
</tr>
<tr class="even">
<td>RDK5</td>
<td>bits</td>
<td>20</td>
<td>0.59(0.17)</td>
<td>0.36</td>
<td>0.30</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>bits</td>
<td>30</td>
<td>0.68(0.15)</td>
<td>0.47</td>
<td>0.42</td>
</tr>
<tr class="even">
<td>RDK5</td>
<td>bits</td>
<td>40</td>
<td>0.76(0.13)</td>
<td>0.58</td>
<td>0.52</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>bits</td>
<td>50</td>
<td>0.79(0.12)</td>
<td>0.62</td>
<td>0.57</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>bits</td>
<td>10</td>
<td>0.30(0.16)</td>
<td>0.12</td>
<td>0.09</td>
</tr>
<tr class="odd">
<td>RDK7</td>
<td>bits</td>
<td>20</td>
<td>0.55(0.19)</td>
<td>0.31</td>
<td>0.26</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>bits</td>
<td>30</td>
<td>0.68(0.16)</td>
<td>0.46</td>
<td>0.41</td>
</tr>
<tr class="odd">
<td>RDK7</td>
<td>bits</td>
<td>40</td>
<td>0.79(0.13)</td>
<td>0.61</td>
<td>0.55</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>bits</td>
<td>50</td>
<td>0.84(0.11)</td>
<td>0.68</td>
<td>0.63</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>counts</td>
<td>10</td>
<td>0.38(0.24)</td>
<td>0.00</td>
<td>0.00</td>
</tr>
<tr class="even">
<td>TT</td>
<td>counts</td>
<td>20</td>
<td>0.63(0.17)</td>
<td>0.41</td>
<td>0.35</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>counts</td>
<td>30</td>
<td>0.72(0.13)</td>
<td>0.55</td>
<td>0.50</td>
</tr>
<tr class="even">
<td>TT</td>
<td>counts</td>
<td>40</td>
<td>0.79(0.10)</td>
<td>0.66</td>
<td>0.62</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>counts</td>
<td>50</td>
<td>0.84(0.08)</td>
<td>0.72</td>
<td>0.69</td>
</tr>
<tr class="even">
<td>TT</td>
<td>bits</td>
<td>10</td>
<td>0.41(0.25)</td>
<td>0.08</td>
<td>0.00</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>bits</td>
<td>20</td>
<td>0.64(0.17)</td>
<td>0.41</td>
<td>0.35</td>
</tr>
<tr class="even">
<td>TT</td>
<td>bits</td>
<td>30</td>
<td>0.73(0.13)</td>
<td>0.55</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>bits</td>
<td>40</td>
<td>0.79(0.10)</td>
<td>0.66</td>
<td>0.62</td>
</tr>
<tr class="even">
<td>TT</td>
<td>bits</td>
<td>50</td>
<td>0.83(0.09)</td>
<td>0.71</td>
<td>0.68</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>counts</td>
<td>10</td>
<td>0.61(0.09)</td>
<td>0.56</td>
<td>0.50</td>
</tr>
<tr class="even">
<td>AP</td>
<td>counts</td>
<td>20</td>
<td>0.79(0.03)</td>
<td>0.75</td>
<td>0.73</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>counts</td>
<td>30</td>
<td>0.85(0.02)</td>
<td>0.82</td>
<td>0.82</td>
</tr>
<tr class="even">
<td>AP</td>
<td>counts</td>
<td>40</td>
<td>0.89(0.01)</td>
<td>0.88</td>
<td>0.88</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>counts</td>
<td>50</td>
<td>0.91(0.01)</td>
<td>0.90</td>
<td>0.90</td>
</tr>
<tr class="even">
<td>AP</td>
<td>bits</td>
<td>10</td>
<td>0.62(0.09)</td>
<td>0.56</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>bits</td>
<td>20</td>
<td>0.79(0.04)</td>
<td>0.75</td>
<td>0.72</td>
</tr>
<tr class="even">
<td>AP</td>
<td>bits</td>
<td>30</td>
<td>0.85(0.03)</td>
<td>0.82</td>
<td>0.81</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>bits</td>
<td>40</td>
<td>0.89(0.02)</td>
<td>0.87</td>
<td>0.86</td>
</tr>
<tr class="even">
<td>AP</td>
<td>bits</td>
<td>50</td>
<td>0.91(0.02)</td>
<td>0.89</td>
<td>0.88</td>
</tr>
</tbody>
</table>
<div id="ebffc543" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:51:34.701035Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:51:34.588109Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-13">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tableau-colorblind10'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3</code></pre>
</div>
</div>
<div id="cf46a8c7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/pubchem_tranches.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb3-2">    mol_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(inf)</span></code></pre></div>
</div>
<p>We need to remove Hs from the input molecules, and we’ll only keep the first 10K from each tranche</p>
<div id="27c5b82a" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-2">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xa100f</span>)</span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rdBase.BlockLogs() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bl:</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb4-5">        nv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-6">        v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol_accum[k]</span>
<span id="cb4-7">        random.shuffle(v)</span>
<span id="cb4-8">        v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>]</span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> v:</span>
<span id="cb4-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-11">                nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(m)</span>
<span id="cb4-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> Chem.MolSanitizeException:</span>
<span id="cb4-13">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-14">            nv.append(nm)</span>
<span id="cb4-15">        mol_accum[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nv</span></code></pre></div>
</div>
<div id="cf064a54" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:54:16.590442Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:54:16.588185Z&quot;}" data-scrolled="true" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum.values()])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10000, 10000, 10000, 10000, 10000]</code></pre>
</div>
</div>
<div id="96ded2cc" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb7-2">Draw.MolsToGridImage(mol_accum[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-04-size-and-similarity-molecular-changes_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Collect similarity values for bit-based and count-based fingerprints using</p>
<div id="20edfd98" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_modified_sims2(mol,maxRadius,fpgFunc,method):</span>
<span id="cb8-3">    fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpgFunc()</span>
<span id="cb8-4">    fpFunc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(fpg,method)</span>
<span id="cb8-5">    basefp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpFunc(mol)</span>
<span id="cb8-6">    dm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.GetDistanceMatrix(mol)</span>
<span id="cb8-7">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> aidx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mol.GetNumAtoms()):</span>
<span id="cb8-9">        nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mol)</span>
<span id="cb8-10">        nm.GetAtomWithIdx(aidx).SetAtomicNum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-11">        count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dm[aidx]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>maxRadius)</span>
<span id="cb8-12">        res.append((count,DataStructs.TanimotoSimilarity(basefp,fpFunc(nm))))</span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="4cca1eaf" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb9-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ipyparallel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ipp</span>
<span id="cb9-3">    rc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipp.Client()</span>
<span id="cb9-4">    dview <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rc[:]</span>
<span id="cb9-5">    dview.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from rdkit import Chem'</span>)</span>
<span id="cb9-6">    dview.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from rdkit.Chem import rdFingerprintGenerator'</span>)</span>
<span id="cb9-7">    dview.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from rdkit import DataStructs'</span>)</span>
<span id="cb9-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb9-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"could not use ipyparallel"</span>)</span>
<span id="cb9-10">    dview <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<div id="72f93f4e" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb10-2">mfp_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb10-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-7">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r,fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>)</span>
<span id="cb10-8">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb10-9">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb10-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb10-11">            mfp_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb10-12">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb10-13">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb10-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb10-15">            mfp_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 0
tranche: 10, radius 1
tranche: 10, radius 2
tranche: 10, radius 3
tranche: 20, radius 0
tranche: 20, radius 1
tranche: 20, radius 2
tranche: 20, radius 3
tranche: 30, radius 0
tranche: 30, radius 1
tranche: 30, radius 2
tranche: 30, radius 3
tranche: 40, radius 0
tranche: 40, radius 1
tranche: 40, radius 2
tranche: 40, radius 3
tranche: 50, radius 0
tranche: 50, radius 1
tranche: 50, radius 2
tranche: 50, radius 3</code></pre>
</div>
</div>
<div id="5c52211d" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">ffp_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb12-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb12-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-6">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r,fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>,</span>
<span id="cb12-7">                                                                        atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen())</span>
<span id="cb12-8">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb12-9">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb12-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb12-11">            ffp_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb12-12">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb12-13">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb12-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb12-15">            ffp_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 0
tranche: 10, radius 1
tranche: 10, radius 2
tranche: 10, radius 3
tranche: 20, radius 0
tranche: 20, radius 1
tranche: 20, radius 2
tranche: 20, radius 3
tranche: 30, radius 0
tranche: 30, radius 1
tranche: 30, radius 2
tranche: 30, radius 3
tranche: 40, radius 0
tranche: 40, radius 1
tranche: 40, radius 2
tranche: 40, radius 3
tranche: 50, radius 0
tranche: 50, radius 1
tranche: 50, radius 2
tranche: 50, radius 3</code></pre>
</div>
</div>
<div id="11d67f68" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">rdk_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>):</span>
<span id="cb14-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-6">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r,fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>)</span>
<span id="cb14-7">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb14-8">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb14-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb14-10">            rdk_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb14-11">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb14-12">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb14-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb14-14">            rdk_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 5
tranche: 10, radius 7
tranche: 20, radius 5
tranche: 20, radius 7
tranche: 30, radius 5
tranche: 30, radius 7
tranche: 40, radius 5
tranche: 40, radius 7
tranche: 50, radius 5
tranche: 50, radius 7</code></pre>
</div>
</div>
<div id="9ea16496" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">tt_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb16-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,):</span>
<span id="cb16-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-6">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetTopologicalTorsionGenerator(fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>)</span>
<span id="cb16-7">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb16-8">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb16-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb16-10">            tt_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb16-11">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb16-12">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb16-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb16-14">            tt_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 3
tranche: 20, radius 3
tranche: 30, radius 3
tranche: 40, radius 3
tranche: 50, radius 3</code></pre>
</div>
</div>
<div id="8cffe41d" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">ap_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,):</span>
<span id="cb18-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb18-6">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetAtomPairGenerator(fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>)</span>
<span id="cb18-7">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb18-8">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb18-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb18-10">            ap_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb18-11">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb18-12">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb18-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb18-14">            ap_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 3
tranche: 20, radius 3
tranche: 30, radius 3
tranche: 40, radius 3
tranche: 50, radius 3</code></pre>
</div>
</div>
<div id="356b3cc8" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_dict(dd):</span>
<span id="cb20-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(dd,defaultdict):</span>
<span id="cb20-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> copy.deepcopy(dd)</span>
<span id="cb20-5">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb20-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dd.items():</span>
<span id="cb20-7">        res[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_dict(v)</span>
<span id="cb20-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="f5322005" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb21-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/fp_perturbation.tranches.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb21-4">    pickle.dump((to_dict(mfp_accum),to_dict(ffp_accum),to_dict(rdk_accum),to_dict(ap_accum),to_dict(tt_accum)),outf)</span></code></pre></div>
</div>
<div id="eed4a3c0" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lh .<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fp_perturbation.tranches.pkl.gz</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-rw-rw-r-- 1 glandrum glandrum 85M Jul  3 16:16 ./results/fp_perturbation.tranches.pkl.gz</code></pre>
</div>
</div>
<div id="cf0110dd" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''| fp | type | tranche| shift | 90% | 95% |</span></span>
<span id="cb24-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">| -- | -- | -- | -- | -- | -- |'''</span>)</span>
<span id="cb24-3"></span>
<span id="cb24-4">rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb24-5">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MFP'</span></span>
<span id="cb24-6">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mfp_accum</span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-11">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-12">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-13">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>rad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-15">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FFP'</span></span>
<span id="cb24-16">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ffp_accum</span>
<span id="cb24-17"></span>
<span id="cb24-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-21">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-22">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-23">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-24">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>rad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-25"></span>
<span id="cb24-26">rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb24-27">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RDK'</span></span>
<span id="cb24-28">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdk_accum</span>
<span id="cb24-29"></span>
<span id="cb24-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-33">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-34">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-35">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-36">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>rad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-37"></span>
<span id="cb24-38"></span>
<span id="cb24-39">rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, )</span>
<span id="cb24-40">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TT'</span></span>
<span id="cb24-41">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tt_accum</span>
<span id="cb24-42"></span>
<span id="cb24-43"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-46">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-47">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-48">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-49">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-50">            </span>
<span id="cb24-51">rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, )</span>
<span id="cb24-52">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AP'</span></span>
<span id="cb24-53">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ap_accum</span>
<span id="cb24-54"></span>
<span id="cb24-55"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-58">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-59">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-60">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-61">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-62">         </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>| fp | type | tranche| shift | 90% | 95% |
| -- | -- | -- | -- | -- | -- |
| MFP0 | counts | 10 | 0.77(0.07) | 0.75 | 0.67 |
| MFP0 | counts | 20 | 0.89(0.02) | 0.87 | 0.86 |
| MFP0 | counts | 30 | 0.92(0.01) | 0.90 | 0.90 |
| MFP0 | counts | 40 | 0.94(0.00) | 0.94 | 0.94 |
| MFP0 | counts | 50 | 0.96(0.00) | 0.95 | 0.95 |
| MFP1 | counts | 10 | 0.61(0.09) | 0.50 | 0.45 |
| MFP1 | counts | 20 | 0.78(0.04) | 0.73 | 0.70 |
| MFP1 | counts | 30 | 0.84(0.03) | 0.80 | 0.78 |
| MFP1 | counts | 40 | 0.88(0.02) | 0.86 | 0.85 |
| MFP1 | counts | 50 | 0.91(0.02) | 0.89 | 0.88 |
| MFP2 | counts | 10 | 0.49(0.10) | 0.36 | 0.33 |
| MFP2 | counts | 20 | 0.68(0.08) | 0.58 | 0.55 |
| MFP2 | counts | 30 | 0.75(0.06) | 0.68 | 0.66 |
| MFP2 | counts | 40 | 0.82(0.04) | 0.76 | 0.75 |
| MFP2 | counts | 50 | 0.85(0.04) | 0.81 | 0.80 |
| MFP3 | counts | 10 | 0.44(0.10) | 0.32 | 0.29 |
| MFP3 | counts | 20 | 0.60(0.10) | 0.47 | 0.44 |
| MFP3 | counts | 30 | 0.68(0.08) | 0.58 | 0.55 |
| MFP3 | counts | 40 | 0.75(0.07) | 0.67 | 0.65 |
| MFP3 | counts | 50 | 0.80(0.06) | 0.73 | 0.71 |
| MFP0 | bits | 10 | 0.77(0.10) | 0.67 | 0.60 |
| MFP0 | bits | 20 | 0.87(0.05) | 0.80 | 0.78 |
| MFP0 | bits | 30 | 0.89(0.04) | 0.82 | 0.80 |
| MFP0 | bits | 40 | 0.91(0.03) | 0.86 | 0.83 |
| MFP0 | bits | 50 | 0.91(0.04) | 0.86 | 0.83 |
| MFP1 | bits | 10 | 0.59(0.11) | 0.47 | 0.41 |
| MFP1 | bits | 20 | 0.75(0.07) | 0.67 | 0.63 |
| MFP1 | bits | 30 | 0.80(0.06) | 0.73 | 0.71 |
| MFP1 | bits | 40 | 0.84(0.05) | 0.78 | 0.76 |
| MFP1 | bits | 50 | 0.86(0.05) | 0.80 | 0.78 |
| MFP2 | bits | 10 | 0.46(0.11) | 0.32 | 0.29 |
| MFP2 | bits | 20 | 0.64(0.09) | 0.52 | 0.48 |
| MFP2 | bits | 30 | 0.71(0.08) | 0.60 | 0.57 |
| MFP2 | bits | 40 | 0.77(0.07) | 0.68 | 0.66 |
| MFP2 | bits | 50 | 0.80(0.06) | 0.72 | 0.69 |
| MFP3 | bits | 10 | 0.41(0.11) | 0.29 | 0.26 |
| MFP3 | bits | 20 | 0.55(0.11) | 0.41 | 0.37 |
| MFP3 | bits | 30 | 0.63(0.10) | 0.50 | 0.46 |
| MFP3 | bits | 40 | 0.70(0.09) | 0.59 | 0.56 |
| MFP3 | bits | 50 | 0.74(0.08) | 0.64 | 0.60 |
| FFP0 | counts | 10 | 0.91(0.13) | 0.75 | 0.71 |
| FFP0 | counts | 20 | 0.96(0.06) | 0.88 | 0.86 |
| FFP0 | counts | 30 | 0.98(0.04) | 0.91 | 0.90 |
| FFP0 | counts | 40 | 0.98(0.03) | 0.94 | 0.94 |
| FFP0 | counts | 50 | 0.99(0.02) | 0.95 | 0.95 |
| FFP1 | counts | 10 | 0.85(0.20) | 0.57 | 0.50 |
| FFP1 | counts | 20 | 0.93(0.11) | 0.77 | 0.73 |
| FFP1 | counts | 30 | 0.96(0.07) | 0.84 | 0.82 |
| FFP1 | counts | 40 | 0.97(0.05) | 0.88 | 0.86 |
| FFP1 | counts | 50 | 0.98(0.04) | 0.91 | 0.89 |
| FFP2 | counts | 10 | 0.81(0.25) | 0.43 | 0.38 |
| FFP2 | counts | 20 | 0.90(0.15) | 0.65 | 0.61 |
| FFP2 | counts | 30 | 0.94(0.11) | 0.75 | 0.71 |
| FFP2 | counts | 40 | 0.96(0.08) | 0.81 | 0.79 |
| FFP2 | counts | 50 | 0.97(0.06) | 0.85 | 0.83 |
| FFP3 | counts | 10 | 0.79(0.27) | 0.37 | 0.33 |
| FFP3 | counts | 20 | 0.88(0.19) | 0.56 | 0.51 |
| FFP3 | counts | 30 | 0.92(0.14) | 0.67 | 0.62 |
| FFP3 | counts | 40 | 0.94(0.11) | 0.74 | 0.71 |
| FFP3 | counts | 50 | 0.95(0.09) | 0.79 | 0.76 |
| FFP0 | bits | 10 | 0.92(0.16) | 0.67 | 0.50 |
| FFP0 | bits | 20 | 0.96(0.11) | 0.80 | 0.71 |
| FFP0 | bits | 30 | 0.97(0.08) | 0.86 | 0.80 |
| FFP0 | bits | 40 | 0.98(0.06) | 1.00 | 0.83 |
| FFP0 | bits | 50 | 0.99(0.05) | 1.00 | 0.86 |
| FFP1 | bits | 10 | 0.84(0.22) | 0.50 | 0.43 |
| FFP1 | bits | 20 | 0.92(0.14) | 0.69 | 0.62 |
| FFP1 | bits | 30 | 0.95(0.11) | 0.77 | 0.71 |
| FFP1 | bits | 40 | 0.96(0.08) | 0.83 | 0.78 |
| FFP1 | bits | 50 | 0.97(0.06) | 0.88 | 0.82 |
| FFP2 | bits | 10 | 0.78(0.28) | 0.35 | 0.29 |
| FFP2 | bits | 20 | 0.88(0.19) | 0.56 | 0.50 |
| FFP2 | bits | 30 | 0.92(0.14) | 0.66 | 0.60 |
| FFP2 | bits | 40 | 0.94(0.11) | 0.74 | 0.69 |
| FFP2 | bits | 50 | 0.95(0.09) | 0.79 | 0.74 |
| FFP3 | bits | 10 | 0.76(0.30) | 0.30 | 0.25 |
| FFP3 | bits | 20 | 0.85(0.23) | 0.45 | 0.39 |
| FFP3 | bits | 30 | 0.90(0.18) | 0.57 | 0.51 |
| FFP3 | bits | 40 | 0.92(0.14) | 0.66 | 0.60 |
| FFP3 | bits | 50 | 0.94(0.12) | 0.72 | 0.66 |
| RDK5 | counts | 10 | 0.36(0.19) | 0.13 | 0.09 |
| RDK5 | counts | 20 | 0.59(0.18) | 0.35 | 0.29 |
| RDK5 | counts | 30 | 0.69(0.14) | 0.49 | 0.43 |
| RDK5 | counts | 40 | 0.77(0.12) | 0.60 | 0.55 |
| RDK5 | counts | 50 | 0.81(0.10) | 0.66 | 0.62 |
| RDK7 | counts | 10 | 0.30(0.16) | 0.11 | 0.08 |
| RDK7 | counts | 20 | 0.53(0.20) | 0.27 | 0.22 |
| RDK7 | counts | 30 | 0.64(0.17) | 0.40 | 0.35 |
| RDK7 | counts | 40 | 0.73(0.14) | 0.53 | 0.47 |
| RDK7 | counts | 50 | 0.79(0.13) | 0.60 | 0.55 |
| RDK5 | bits | 10 | 0.36(0.18) | 0.14 | 0.11 |
| RDK5 | bits | 20 | 0.59(0.17) | 0.36 | 0.30 |
| RDK5 | bits | 30 | 0.68(0.15) | 0.47 | 0.42 |
| RDK5 | bits | 40 | 0.76(0.13) | 0.58 | 0.52 |
| RDK5 | bits | 50 | 0.79(0.12) | 0.62 | 0.57 |
| RDK7 | bits | 10 | 0.30(0.16) | 0.12 | 0.09 |
| RDK7 | bits | 20 | 0.55(0.19) | 0.31 | 0.26 |
| RDK7 | bits | 30 | 0.68(0.16) | 0.46 | 0.41 |
| RDK7 | bits | 40 | 0.79(0.13) | 0.61 | 0.55 |
| RDK7 | bits | 50 | 0.84(0.11) | 0.68 | 0.63 |
| TT | counts | 10 | 0.38(0.24) | 0.00 | 0.00 |
| TT | counts | 20 | 0.63(0.17) | 0.41 | 0.35 |
| TT | counts | 30 | 0.72(0.13) | 0.55 | 0.50 |
| TT | counts | 40 | 0.79(0.10) | 0.66 | 0.62 |
| TT | counts | 50 | 0.84(0.08) | 0.72 | 0.69 |
| TT | bits | 10 | 0.41(0.25) | 0.08 | 0.00 |
| TT | bits | 20 | 0.64(0.17) | 0.41 | 0.35 |
| TT | bits | 30 | 0.73(0.13) | 0.55 | 0.50 |
| TT | bits | 40 | 0.79(0.10) | 0.66 | 0.62 |
| TT | bits | 50 | 0.83(0.09) | 0.71 | 0.68 |
| AP | counts | 10 | 0.61(0.09) | 0.56 | 0.50 |
| AP | counts | 20 | 0.79(0.03) | 0.75 | 0.73 |
| AP | counts | 30 | 0.85(0.02) | 0.82 | 0.82 |
| AP | counts | 40 | 0.89(0.01) | 0.88 | 0.88 |
| AP | counts | 50 | 0.91(0.01) | 0.90 | 0.90 |
| AP | bits | 10 | 0.62(0.09) | 0.56 | 0.50 |
| AP | bits | 20 | 0.79(0.04) | 0.75 | 0.72 |
| AP | bits | 30 | 0.85(0.03) | 0.82 | 0.81 |
| AP | bits | 40 | 0.89(0.02) | 0.87 | 0.86 |
| AP | bits | 50 | 0.91(0.02) | 0.89 | 0.88 |</code></pre>
</div>
</div>



 ]]></description>
  <category>reference</category>
  <category>similarity</category>
  <category>fingerprints</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-04-size-and-similarity-molecular-changes.html</guid>
  <pubDate>Thu, 03 Jul 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/size-and-similarity-molecular-changes.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>Sanitization options and molecule parsing.</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-06-27-sanitization-and-file-parsing.html</link>
  <description><![CDATA[ 




<p>This post looks at the options available for controlling how much chemistry perception and checking (sanitization) is done when parsing molecules and how those options interact. This gets pretty deep into the weeds, but I think it’s useful to capture this information somewhere. I definitely need to find the appropriate place in the documentation to put this.</p>
<div id="10451f0a" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3</code></pre>
</div>
</div>
<section id="working-with-smiles" class="level1">
<h1>Working with SMILES</h1>
<p>Let’s start by disabling both sanitization and H removal.</p>
<p>This results in a molecule where Hs haven’t been removed and no chemistry perception has been done:</p>
<div id="7130af68" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">smiles_with_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1=CC=CC=C1[H]'</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb3-4">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-5">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_h, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb3-8">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    1 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    2 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    3 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    4 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    5 6 C chg: 0  deg: 3 exp: N/A imp: N/A hyb: 
    6 1 H chg: 0  deg: 1 exp: N/A imp: 0 hyb: 
Bonds:
    0 0-&gt;1 order: 2
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 2
    3 3-&gt;4 order: 1
    4 4-&gt;5 order: 2
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: 1</code></pre>
</div>
</div>
<p>We can do sanitization without removing Hs:</p>
<div id="73a76a49" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb5-2">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb5-3">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_h, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb5-6">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    1 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    2 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    3 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    4 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    5 6 C chg: 0  deg: 3 exp: 4 imp: 0 hyb: SP2 arom?: 1
    6 1 H chg: 0  deg: 1 exp: 1 imp: 0 hyb: S
Bonds:
    0 0-&gt;1 order: a conj?: 1 aromatic?: 1
    1 1-&gt;2 order: a conj?: 1 aromatic?: 1
    2 2-&gt;3 order: a conj?: 1 aromatic?: 1
    3 3-&gt;4 order: a conj?: 1 aromatic?: 1
    4 4-&gt;5 order: a conj?: 1 aromatic?: 1
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: a conj?: 1 aromatic?: 1</code></pre>
</div>
</div>
<p>And we can remove Hs without doing sanitization:</p>
<div id="dadfa282" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb7-2">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-3">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_h, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb7-6">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    1 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    2 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    3 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    4 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    5 6 C chg: 0  deg: 2 exp: 4 imp: 0 hyb: 
Bonds:
    0 0-&gt;1 order: 2
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 2
    3 3-&gt;4 order: 1
    4 4-&gt;5 order: 2
    5 5-&gt;0 order: 1</code></pre>
</div>
</div>
<p>As we will see later, the SDF/Mol file parser does <em>not</em> remove Hs when sanitization is not enabled. This inconsistency is the type of thing that is difficult to fix; doing so would break a lot of other peoples’ code.</p>
<p>One of the other steps that’s carried out when parsing molecules is cleaning up bad stereochemistry specifications. There’s no option enabling direct control over this step, but let’s see how the sanitization options affect that.</p>
<p>If we provide a molecule that has chirality indicated on an atom that’s not a chiral center, the standard parsing optios remove the chirality spec:</p>
<div id="2c6e65b8" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">smiles_with_bad_stereo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C[C@H](F)C"</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb9-4">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_bad_stereo, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb9-6">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: SP3
    1 6 C chg: 0  deg: 3 exp: 3 imp: 1 hyb: SP3
    2 9 F chg: 0  deg: 1 exp: 1 imp: 0 hyb: SP3
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: SP3
Bonds:
    0 0-&gt;1 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
<p>The stereo cleanup is done even when sanitization is disabled:</p>
<div id="3699662f" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb11-2">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-3">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_bad_stereo, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb11-4">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
    1 6 C chg: 0  deg: 3 exp: 3 imp: 1 hyb: 
    2 9 F chg: 0  deg: 1 exp: 1 imp: 0 hyb: 
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
Bonds:
    0 0-&gt;1 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
<p>Notice that, in this case, explicit and implicit valences have been assigned even though sanitization is disabled. This happens because the <code>AssignStereochemistry()</code> function needs valence information. In this case the values are calculated, but there’s no check to make sure that they make chemical sense (as would happen during normal sanitization):</p>
<div id="d1b79947" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">valence_too_high <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C[C@H](FC)C"</span></span>
<span id="cb13-2">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb13-3">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-4">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(valence_too_high, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb13-5">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
    1 6 C chg: 0  deg: 3 exp: 3 imp: 1 hyb: 
    2 9 F chg: 0  deg: 2 exp: 2 imp: 0 hyb: 
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
    4 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
Bonds:
    0 0-&gt;1 order: 1
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 1
    3 1-&gt;4 order: 1</code></pre>
</div>
</div>
<p>Here the two-valent F atom (atom 2) was accepted without complaint.</p>
<p>Skipping both sanitization and H removal also skips the call to <code>AssignStereochemistry()</code>, so the bad chirality specification is not removed (and no valences are calculated):</p>
<div id="ecf25e57" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb15-2">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-3">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-4">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_bad_stereo, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb15-5">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: N/A imp: N/A hyb: 
    1 6 C chg: 0  deg: 3 exp: N/A imp: 0 hyb:  chi: CCW nbrs:[0 2 3]
    2 9 F chg: 0  deg: 1 exp: N/A imp: N/A hyb: 
    3 6 C chg: 0  deg: 1 exp: N/A imp: N/A hyb: 
Bonds:
    0 0-&gt;1 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
</section>
<section id="working-with-sdf-and-mol-blocks" class="level1">
<h1>Working with SDF and Mol blocks</h1>
<div id="0703cb26" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">molb_with_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb17-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     RDKit          2D</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  0  0  0  0  0  0  0  0  0  0999 V3000</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN CTAB</span></span>
<span id="cb17-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 COUNTS 7 7 0 0 0</span></span>
<span id="cb17-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN ATOM</span></span>
<span id="cb17-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 1 C 1.500000 0.000000 0.000000 0</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 2 C 0.750000 -1.299038 0.000000 0</span></span>
<span id="cb17-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 3 C -0.750000 -1.299038 0.000000 0</span></span>
<span id="cb17-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 4 C -1.500000 0.000000 0.000000 0</span></span>
<span id="cb17-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 5 C -0.750000 1.299038 0.000000 0</span></span>
<span id="cb17-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 6 C 0.750000 1.299038 0.000000 0</span></span>
<span id="cb17-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 7 H 1.500000 2.598076 0.000000 0</span></span>
<span id="cb17-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END ATOM</span></span>
<span id="cb17-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN BOND</span></span>
<span id="cb17-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 1 2 1 2</span></span>
<span id="cb17-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 2 1 2 3</span></span>
<span id="cb17-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 3 2 3 4</span></span>
<span id="cb17-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 4 1 4 5</span></span>
<span id="cb17-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 5 2 5 6</span></span>
<span id="cb17-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 6 1 6 7</span></span>
<span id="cb17-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 7 1 6 1</span></span>
<span id="cb17-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END BOND</span></span>
<span id="cb17-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END CTAB</span></span>
<span id="cb17-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  END'''</span></span>
<span id="cb17-27">molb_with_bad_stereo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb17-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     RDKit          2D</span></span>
<span id="cb17-29"></span>
<span id="cb17-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  0  0  0  0  0  0  0  0  0  0999 V3000</span></span>
<span id="cb17-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN CTAB</span></span>
<span id="cb17-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 COUNTS 4 3 0 0 0</span></span>
<span id="cb17-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN ATOM</span></span>
<span id="cb17-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 1 C 0.000000 0.000000 0.000000 0</span></span>
<span id="cb17-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 2 C 1.299038 0.750000 0.000000 0</span></span>
<span id="cb17-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 3 F 1.299038 2.250000 0.000000 0</span></span>
<span id="cb17-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 4 C 2.598076 -0.000000 0.000000 0</span></span>
<span id="cb17-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END ATOM</span></span>
<span id="cb17-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN BOND</span></span>
<span id="cb17-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 1 1 2 1 CFG=3</span></span>
<span id="cb17-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 2 1 2 3</span></span>
<span id="cb17-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 3 1 2 4</span></span>
<span id="cb17-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END BOND</span></span>
<span id="cb17-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END CTAB</span></span>
<span id="cb17-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  END'''</span></span></code></pre></div>
</div>
<p>As with SMILES, we can disable sanitization and H removal and then very little chemistry perception or cleanup is done:</p>
<div id="c0937b85" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_h, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb18-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    1 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    2 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    3 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    4 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    5 6 C chg: 0  deg: 3 exp: 4 imp: N/A hyb: 
    6 1 H chg: 0  deg: 1 exp: 1 imp: N/A hyb: 
Bonds:
    0 0-&gt;1 order: 2
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 2
    3 3-&gt;4 order: 1
    4 4-&gt;5 order: 2
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: 1</code></pre>
</div>
</div>
<p>Unlike with the SMILES parser, setting removeHs to true with sanitize set to false has no effect:</p>
<div id="7060653d" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_h, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    1 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    2 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    3 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    4 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    5 6 C chg: 0  deg: 3 exp: 4 imp: N/A hyb: 
    6 1 H chg: 0  deg: 1 exp: 1 imp: N/A hyb: 
Bonds:
    0 0-&gt;1 order: 2
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 2
    3 3-&gt;4 order: 1
    4 4-&gt;5 order: 2
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: 1</code></pre>
</div>
</div>
<p>We can, of course sanitize without removing Hs:</p>
<div id="d600190c" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_h, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    1 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    2 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    3 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    4 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    5 6 C chg: 0  deg: 3 exp: 4 imp: 0 hyb: SP2 arom?: 1
    6 1 H chg: 0  deg: 1 exp: 1 imp: 0 hyb: S
Bonds:
    0 0-&gt;1 order: a conj?: 1 aromatic?: 1
    1 1-&gt;2 order: a conj?: 1 aromatic?: 1
    2 2-&gt;3 order: a conj?: 1 aromatic?: 1
    3 3-&gt;4 order: a conj?: 1 aromatic?: 1
    4 4-&gt;5 order: a conj?: 1 aromatic?: 1
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: a conj?: 1 aromatic?: 1</code></pre>
</div>
</div>
<p>Now let’s look at the mol block with the bad stereo specification.</p>
<p>As before, without sanitization, the invalid chirality is assigned:</p>
<div id="ec92ac3e" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_bad_stereo, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb24-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: N/A hyb: 
    1 6 C chg: 0  deg: 3 exp: 4 imp: 0 hyb:  chi: CCW nbrs:[0 2 3]
    2 9 F chg: 0  deg: 1 exp: 1 imp: 0 hyb: 
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
Bonds:
    0 1-&gt;0 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
<p>But doing sanitization results in <code>AssignStereochemistry()</code> being called and the invalid stereo label is removed:</p>
<div id="c0a93df6" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_bad_stereo, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb26-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: SP3
    1 6 C chg: 0  deg: 3 exp: 3 imp: 1 hyb: SP3
    2 9 F chg: 0  deg: 1 exp: 1 imp: 0 hyb: SP3
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: SP3
Bonds:
    0 1-&gt;0 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
</section>
<section id="calling-the-sanitization-code-yourself" class="level1">
<h1>Calling the sanitization code yourself</h1>
<p>If you want to read molecules from either SMILES or a Mol block without either sanitization or H removal, do some checks and standardizations of your own, and then end up with a molecule with the same information as if you had parsed it normally, the steps are: 1. Parse without sanitization or H removal. 2. Remove Hs if you want to 3. Sanitize if you haven’t removed Hs (by default <code>RemoveHs()</code> will sanitize) 4. Call <code>AssignStereochemistry()</code></p>
<p>Here’s an example of that:</p>
<div id="f53898bd" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb28-2">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-3">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-4"></span>
<span id="cb28-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_h, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do whatever cleanup and preprocessing you want to do</span></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb28-9">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mol)</span>
<span id="cb28-10">Chem.AssignStereochemistry(mol,force<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, cleanIt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, flagPossibleStereoCenters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb28-11"></span>
<span id="cb28-12">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    1 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    2 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    3 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    4 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    5 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
Bonds:
    0 0-&gt;1 order: a conj?: 1 aromatic?: 1
    1 1-&gt;2 order: a conj?: 1 aromatic?: 1
    2 2-&gt;3 order: a conj?: 1 aromatic?: 1
    3 3-&gt;4 order: a conj?: 1 aromatic?: 1
    4 4-&gt;5 order: a conj?: 1 aromatic?: 1
    5 5-&gt;0 order: a conj?: 1 aromatic?: 1</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>documentation</category>
  <category>technical</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-06-27-sanitization-and-file-parsing.html</guid>
  <pubDate>Thu, 26 Jun 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>The impact of molecular size on similarity.</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1.html</link>
  <description><![CDATA[ 




<p>[Post revised on 24.06.2025 to fix a mistake in the calculation of the FeatureMorgan fingerprints. Thanks to Kjell Jorner for pointing it out.]</p>
<p>This post is an exploration of the impact of molecule size on similarity thresholds for some of the fingerprints the RDKit supports. This is inspired by a question Kjell Jorner asked me earlier this week: “Are you aware of any studies (or blog posts) looking at the effect of molecular size on fingerprint similarity?”. I’m sure there are sources out there looking at this, but the question fits so well into my ongoing series of <a href="https://greglandrum.github.io/rdkit-blog/#category=similarity">posts about similarity</a> that I decided to just go ahead and do the analysis.</p>
<p>This post looks at the similarities between random molecules as a function of molecule size. I use a few of the fingerprints available in the RDKit. Along the way there’s also some info about the increase in the numbers of bits set in fingerprints as a function of molecule size.</p>
<p>It’s not as easy to summarize things here as it was when I looked at <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">similarity thresholds in general</a>, so there’s no big table here. The TLDR is that similarities (and thus thresholds) tend to increase with molecular size across all of the fingerprints. There may also be a small increase in the standard deviations of the similarity distributions as the molecules get larger, but since the distributions aren’t always gaussian (particularly for tranche 10), this is a weak signal.</p>
<p>It would also be interesting to try and look at the size dependence of the <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-21-similarity-search-thresholds.html">thresholds for related compounds</a>, but there it’s going to be a bit trickier to divide the results into reasonable tranches.</p>
<div id="ebffc543" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:51:34.701035Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:51:34.588109Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-13">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tableau-colorblind10'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3</code></pre>
</div>
</div>
<p>I use the number of heavy atoms as a surrogate for molecule size and collect five different tranches: - 10: 1-9 heavy atoms - 20: 10-19 heavy atoms - 30: 20-29 heavy atoms - 40: 30-39 heavy atoms - 50: 40-49 heavy atoms</p>
<p>This is the code used to collect tranches which each contain at least 10K molecules from PubChem Compound.</p>
<pre><code>import random
fns = list(glob.glob('/fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_*.sdf.gz'))

random.seed(0xa100f)
random.shuffle(fns)

accum = {10:[],20:[],30:[],40:[],50:[]}

def done(accum,tgt=2000):
    for k,v in accum.items():
        if len(v)&lt;tgt:
            return False
    return True

bl = rdBase.BlockLogs()
for fn in fns[:10]:
    print(fn)
    with gzip.open(fn,'rb') as inf:
        suppl = Chem.ForwardSDMolSupplier(inf,sanitize=False,removeHs=True)
        taccum = {10:[],20:[],30:[],40:[],50:[]}
        for i,mol in enumerate(suppl):
            if not mol:
                continue
            if len(Chem.GetMolFrags(mol))&gt;1:
                continue
            nAts = mol.GetNumHeavyAtoms()
            for k in accum:
                if nAts&lt;k:
                    taccum[k].append(mol)
                    break
            if not (i+1)%1000 and done(taccum):
                break
        for k in taccum:
            # take at most 5K/tranche/file
            accum[k].extend(taccum[k][:5000])
        print([len(v) for v in accum.values()])

bl = None       
with gzip.open('./results/pubchem_tranches.pkl.gz','wb+') as outf:
    pickle.dump(accum,outf)</code></pre>
<div id="cf46a8c7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/pubchem_tranches.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb4-2">    accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(inf)</span></code></pre></div>
</div>
<div id="cf064a54" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:54:16.590442Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:54:16.588185Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum.values()])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10502, 50000, 50000, 31458, 28082]</code></pre>
</div>
</div>
<div id="96ded2cc" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb7-2">Draw.MolsToGridImage(accum[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Those have Hs on them, so we’ll need to be sure to call <code>RemoveHs()</code> below.</p>
<p>Collect similarity values for bit-based and count-based fingerprints using</p>
<div id="1e717b49" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:59:34.723342Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:59:34.603716Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb8-5"></span>
<span id="cb8-6">fpgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp0'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb8-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp1'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb8-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb8-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb8-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp0'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-11">                                                         atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen()),</span>
<span id="cb8-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp1'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb8-13">                                                         atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen()),</span>
<span id="cb8-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp2'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-15">                                                         atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen()),</span>
<span id="cb8-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp3'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb8-17">                                                         atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen()),</span>
<span id="cb8-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk5'</span>:rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb8-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk7'</span>:rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb8-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ap'</span>:rdFingerprintGenerator.GetAtomPairGenerator(),</span>
<span id="cb8-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tt'</span>:rdFingerprintGenerator.GetTopologicalTorsionGenerator(),</span>
<span id="cb8-22">       }</span>
<span id="cb8-23"></span>
<span id="cb8-24">bl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdBase.BlockLogs()</span>
<span id="cb8-25"></span>
<span id="cb8-26">sims_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb8-27">csims_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb8-28">bitcounts_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb8-29">cbitcounts_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb8-30"></span>
<span id="cb8-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb8-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Doing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-33">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="cb8-34">    cfps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="cb8-35">    nMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> generating fps'</span>)</span>
<span id="cb8-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum[k][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>]:</span>
<span id="cb8-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb8-39">            m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(m)</span>
<span id="cb8-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb8-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb8-42">        nMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm,fpg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fpgs.items():</span>
<span id="cb8-44">            fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetFingerprint(m)</span>
<span id="cb8-45">            fps[nm].append(fp)</span>
<span id="cb8-46">            cfp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetSparseCountFingerprint(m)</span>
<span id="cb8-47">            cfps[nm].append(cfp)</span>
<span id="cb8-48">    random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xf00d</span>)</span>
<span id="cb8-49">    indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nMols))</span>
<span id="cb8-50">    indices2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> indices[:]</span>
<span id="cb8-51">    pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pairs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>:</span>
<span id="cb8-53">        random.shuffle(indices)</span>
<span id="cb8-54">        random.shuffle(indices2)</span>
<span id="cb8-55">        pairs.extend(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indices,indices2))</span>
<span id="cb8-56">    pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>]</span>
<span id="cb8-57"></span>
<span id="cb8-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> calculating similarities'</span>)</span>
<span id="cb8-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps:</span>
<span id="cb8-60">        bitcounts_accum[fpn][k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x.GetNumOnBits() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps[fpn]]</span>
<span id="cb8-61">        cbitcounts_accum[fpn][k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x.GetNonzeroElements()) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cfps[fpn]]</span>
<span id="cb8-62">        </span>
<span id="cb8-63">        sims_accum[fpn][k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [DataStructs.TanimotoSimilarity(fps[fpn][x],fps[fpn][y]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pairs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>y]</span>
<span id="cb8-64">        csims_accum[fpn][k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [DataStructs.TanimotoSimilarity(cfps[fpn][x],cfps[fpn][y]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pairs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>y]</span>
<span id="cb8-65">                </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Doing 10
     generating fps
     calculating similarities
Doing 20
     generating fps
     calculating similarities
Doing 30
     generating fps
     calculating similarities
Doing 40
     generating fps
     calculating similarities
Doing 50
     generating fps
     calculating similarities</code></pre>
</div>
</div>
<div id="fee40ff5" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/pubchem_tranches_accum.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb10-2">    pickle.dump((sims_accum,csims_accum,bitcounts_accum,cbitcounts_accum),outf)</span></code></pre></div>
</div>
<section id="similarity-stats" class="level1">
<h1>Similarity stats</h1>
<p>Let’s start by looking at the quantile values for the various molecule sizes.</p>
<div id="841548e6" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum:</span>
<span id="cb11-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'----- </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum[fpn]:</span>
<span id="cb11-4">        qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(sims_accum[fpn][k],(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>))</span>
<span id="cb11-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k,qs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----- mfp0
10 [0.2        0.25       0.33333333 0.4        0.55555556]
20 [0.36363636 0.41666667 0.5        0.54545455 0.66666667]
30 [0.41666667 0.46153846 0.53846154 0.6        0.72727273]
40 [0.5        0.53333333 0.6        0.66666667 0.76923077]
50 [0.52631579 0.5625     0.625      0.6875     0.78571429]
----- mfp1
10 [0.08333333 0.11111111 0.15       0.1875     0.26666667]
20 [0.16216216 0.18604651 0.22222222 0.25806452 0.35294118]
30 [0.1875     0.21212121 0.25       0.29411765 0.40912587]
40 [0.21212121 0.23333333 0.26666667 0.3        0.4       ]
50 [0.21126761 0.23188406 0.265625   0.3        0.45767458]
----- mfp2
10 [0.06060606 0.08       0.10810811 0.13333333 0.19230769]
20 [0.10769231 0.12307692 0.14705882 0.16949153 0.24137931]
30 [0.12       0.13513514 0.16049383 0.18666667 0.26229508]
40 [0.13274336 0.14583333 0.16666667 0.18811881 0.26436782]
50 [0.1328125  0.14634146 0.16806723 0.192      0.32352941]
----- mfp3
10 [0.05555556 0.07142857 0.09756098 0.12121212 0.17391304]
20 [0.08695652 0.09859155 0.11666667 0.13414634 0.1884058 ]
30 [0.09433962 0.10526316 0.12380952 0.14285714 0.19753086]
40 [0.1038961  0.11333333 0.12804878 0.14383562 0.19627336]
50 [0.10497238 0.11458333 0.13068182 0.1474359  0.25      ]
----- ffp0
10 [0.5        0.6        0.66666667 0.8        1.        ]
20 [0.5        0.6        0.66666667 0.8        1.        ]
30 [0.6        0.66666667 0.75       0.83333333 1.        ]
40 [0.66666667 0.71428571 0.8        0.83333333 1.        ]
50 [0.66666667 0.66666667 0.8        0.83333333 1.        ]
----- ffp1
10 [0.21052632 0.25       0.33333333 0.38461538 0.54545455]
20 [0.25       0.29166667 0.34615385 0.4        0.52173913]
30 [0.28571429 0.32142857 0.375      0.43478261 0.57894737]
40 [0.31428571 0.34375    0.39393939 0.44       0.56      ]
50 [0.31707317 0.35       0.39534884 0.44444444 0.6       ]
----- ffp2
10 [0.13333333 0.16       0.2        0.23809524 0.33333333]
20 [0.1509434  0.17307692 0.20754717 0.24137931 0.32432432]
30 [0.16981132 0.19117647 0.22641509 0.26086957 0.36171313]
40 [0.17741935 0.19642857 0.22535211 0.25396825 0.34782609]
50 [0.17647059 0.19444444 0.22352941 0.25301205 0.40230165]
----- ffp3
10 [0.11764706 0.13888889 0.17647059 0.21052632 0.3       ]
20 [0.11267606 0.12820513 0.15151515 0.17460317 0.23728814]
30 [0.12087912 0.13541667 0.15957447 0.18333333 0.25287772]
40 [0.125      0.13709677 0.15602837 0.17592593 0.24175824]
50 [0.12318841 0.13496933 0.15483871 0.17432259 0.2920354 ]
----- rdk5
10 [0.07027027 0.09210526 0.13194444 0.1744186  0.29371452]
20 [0.138981   0.16265382 0.2034783  0.2464887  0.36241717]
30 [0.17901151 0.20031056 0.23529412 0.27119341 0.37744418]
40 [0.22476447 0.24408015 0.27403333 0.30361222 0.39875415]
50 [0.25178929 0.27223912 0.30226963 0.33179724 0.56276264]
----- rdk7
10 [0.06182973 0.07692308 0.10318025 0.13125631 0.20755116]
20 [0.16833891 0.18709195 0.21530125 0.24113382 0.3134873 ]
30 [0.26654377 0.29183192 0.33148058 0.36885969 0.44672696]
40 [0.40810447 0.441927   0.48827846 0.52855104 0.60776592]
50 [0.50135796 0.54613734 0.6083984  0.66037441 0.7468516 ]
----- ap
10 [0.05769231 0.078125   0.1147541  0.15       0.23809524]
20 [0.17808219 0.20089286 0.234375   0.26415094 0.33495146]
30 [0.25822785 0.28092784 0.31441048 0.34351535 0.40506573]
40 [0.34891018 0.3678844  0.39450643 0.41703057 0.46559644]
50 [0.40221239 0.42302158 0.44985673 0.47313237 0.53501519]
----- tt
10 [0.         0.         0.04166667 0.0625     0.15789474]
20 [0.06       0.08064516 0.11764706 0.15384615 0.23404255]
30 [0.11111111 0.13432836 0.17073171 0.2037037  0.28888889]
40 [0.14285714 0.1640625  0.1965812  0.22826087 0.32397031]
50 [0.15625    0.17763158 0.21186441 0.24603175 0.43928085]</code></pre>
</div>
</div>
<div id="2093ad18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb13-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'----- </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum[fpn]:</span>
<span id="cb13-4">        qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(csims_accum[fpn][k],(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>))</span>
<span id="cb13-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k,qs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----- mfp0
10 [0.14285714 0.2        0.28571429 0.33333333 0.45454545]
20 [0.31818182 0.36       0.42307692 0.47826087 0.59090909]
30 [0.4        0.44117647 0.5        0.54545455 0.65625   ]
40 [0.46666667 0.50980392 0.55813953 0.6        0.69047619]
50 [0.47368421 0.51724138 0.57142857 0.61818182 0.72340426]
----- mfp1
10 [0.06666667 0.09677419 0.13333333 0.17700535 0.27272727]
20 [0.17647059 0.20634921 0.24528302 0.28301887 0.37254902]
30 [0.23595506 0.26760563 0.31147541 0.35064935 0.44615385]
40 [0.28       0.30769231 0.34736842 0.38461538 0.47368421]
50 [0.29230769 0.32258065 0.36363636 0.40322581 0.51851852]
----- mfp2
10 [0.05263158 0.07317073 0.1025641  0.13157895 0.19444444]
20 [0.12195122 0.14117647 0.17045455 0.19753086 0.27058824]
30 [0.16129032 0.18181818 0.21282506 0.24137931 0.31461298]
40 [0.18987342 0.20886076 0.2384106  0.26712329 0.34210526]
50 [0.2        0.22105263 0.25252525 0.28249816 0.3908046 ]
----- mfp3
10 [0.04878049 0.06666667 0.09375    0.11904762 0.17647059]
20 [0.09803922 0.11304348 0.13541667 0.15740741 0.21649485]
30 [0.12658228 0.14184397 0.16546763 0.18791946 0.24648177]
40 [0.14680203 0.16129032 0.18378378 0.20621793 0.26530612]
50 [0.15471698 0.17063492 0.19465649 0.21825397 0.31429032]
----- ffp0
10 [0.54545455 0.6        0.7        0.77777778 0.88888889]
20 [0.54545455 0.60869565 0.68421053 0.75       0.85      ]
30 [0.5862069  0.63333333 0.7        0.75       0.85185185]
40 [0.65853659 0.7027027  0.75609756 0.79487179 0.86486486]
50 [0.67307692 0.72       0.7755102  0.8125     0.88372093]
----- ffp1
10 [0.28       0.33333333 0.39130435 0.44444444 0.56521739]
20 [0.33333333 0.37037037 0.42857143 0.47826087 0.57894737]
30 [0.38235294 0.42028986 0.47368421 0.51724138 0.62068966]
40 [0.44       0.47252747 0.51724138 0.55555556 0.64444444]
50 [0.45454545 0.49122807 0.53846154 0.57798165 0.66666667]
----- ffp2
10 [0.2        0.23076923 0.27777778 0.32       0.41176471]
20 [0.22857143 0.25641026 0.29850746 0.33766234 0.41666667]
30 [0.26666667 0.29411765 0.33333333 0.37234043 0.45796708]
40 [0.3028169  0.32692308 0.36464824 0.3968254  0.48150041]
50 [0.3172043  0.34444444 0.38323353 0.41758242 0.51875   ]
----- ffp3
10 [0.18181818 0.20930233 0.25       0.28571429 0.36842105]
20 [0.18095238 0.20212766 0.23469388 0.26436782 0.33333333]
30 [0.20588235 0.22683213 0.25735294 0.28703704 0.35652174]
40 [0.23036649 0.24870466 0.27717391 0.3025641  0.37291299]
50 [0.24180328 0.26199907 0.29147982 0.31836735 0.41262136]
----- rdk5
10 [0.05263158 0.078125   0.12244898 0.16853933 0.28378378]
20 [0.10666667 0.14024707 0.18987342 0.23607923 0.34835067]
30 [0.1451939  0.17281374 0.21733278 0.2604754  0.37288632]
40 [0.15921514 0.18334971 0.22246696 0.26200001 0.37742537]
50 [0.16637721 0.19188259 0.23143559 0.27172211 0.48031332]
----- rdk7
10 [0.04       0.05882353 0.09090909 0.12538641 0.20652354]
20 [0.04666459 0.06532277 0.09769524 0.13118911 0.22522836]
30 [0.06412657 0.08135525 0.11198197 0.14370902 0.23953108]
40 [0.06824623 0.08322877 0.1102338  0.13858556 0.24425887]
50 [0.07035962 0.08588146 0.11248808 0.14160011 0.38672073]
----- ap
10 [0.03225806 0.05       0.08888889 0.12280702 0.2       ]
20 [0.11934156 0.14218009 0.17624521 0.20866142 0.28304308]
30 [0.16820988 0.19254658 0.23012552 0.26355844 0.33653916]
40 [0.21548117 0.23770492 0.26982097 0.29846583 0.36480247]
50 [0.23087622 0.25611413 0.2919198  0.32415421 0.41593843]
----- tt
10 [0.         0.         0.         0.         0.08333333]
20 [0.03571429 0.05660377 0.09803922 0.13477131 0.2195122 ]
30 [0.0862069  0.11111111 0.14772727 0.18333333 0.26666667]
40 [0.11290323 0.13533835 0.17037037 0.2038835  0.2970297 ]
50 [0.12169312 0.14457831 0.18014589 0.21568627 0.40002817]</code></pre>
</div>
</div>
<p>Calculate means and std devs. Note that some of these distributions, particularly those for tranche 10, are not even remotely gaussian, so these values shouldn’t be taken overly seriously</p>
<div id="df6de8f5" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bit-based'</span>)</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   10          20          30          40          50'</span>)</span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum:</span>
<span id="cb15-4">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum[fpn].values()]</span>
<span id="cb15-5">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum[fpn].values()]</span>
<span id="cb15-6">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb15-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-8">    </span>
<span id="cb15-9">    </span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     for k in sims_accum[fpn]:</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         vs = sims_accum[fpn][k]</span></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         print(f'{k}:\t{np.mean(vs):.2f}({np.std(vs):.2f})')</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>bit-based
 fp        10          20          30          40          50
mfp0    0.14(0.13)  0.30(0.14)  0.36(0.13)  0.43(0.13)  0.44(0.15)
mfp1    0.06(0.06)  0.13(0.07)  0.16(0.07)  0.19(0.07)  0.19(0.08)
mfp2    0.05(0.05)  0.09(0.05)  0.11(0.05)  0.12(0.05)  0.12(0.05)
mfp3    0.04(0.04)  0.07(0.04)  0.08(0.04)  0.09(0.03)  0.09(0.04)
ffp0    0.41(0.22)  0.45(0.18)  0.52(0.17)  0.57(0.17)  0.56(0.17)
ffp1    0.17(0.11)  0.21(0.10)  0.25(0.11)  0.27(0.10)  0.28(0.10)
ffp2    0.11(0.07)  0.13(0.06)  0.15(0.07)  0.16(0.06)  0.16(0.07)
ffp3    0.10(0.07)  0.10(0.05)  0.10(0.05)  0.11(0.04)  0.11(0.05)
rdk5    0.06(0.07)  0.12(0.07)  0.16(0.07)  0.20(0.07)  0.22(0.09)
rdk7    0.05(0.05)  0.14(0.06)  0.23(0.08)  0.36(0.10)  0.43(0.13)
ap      0.05(0.06)  0.15(0.07)  0.22(0.07)  0.31(0.07)  0.36(0.08)
tt      0.01(0.08)  0.05(0.05)  0.09(0.06)  0.12(0.07)  0.13(0.08)</code></pre>
</div>
</div>
<div id="12ef2e68" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count-based'</span>)</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   10          20          30          40          50'</span>)</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb17-4">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum[fpn].values()]</span>
<span id="cb17-5">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum[fpn].values()]</span>
<span id="cb17-6">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb17-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>count-based
 fp        10          20          30          40          50
mfp0    0.11(0.12)  0.25(0.13)  0.33(0.14)  0.39(0.13)  0.39(0.15)
mfp1    0.06(0.06)  0.14(0.08)  0.19(0.09)  0.24(0.09)  0.24(0.10)
mfp2    0.04(0.05)  0.10(0.06)  0.13(0.06)  0.16(0.06)  0.17(0.08)
mfp3    0.04(0.04)  0.08(0.05)  0.11(0.05)  0.13(0.05)  0.13(0.06)
ffp0    0.39(0.22)  0.45(0.18)  0.48(0.18)  0.55(0.17)  0.55(0.18)
ffp1    0.21(0.13)  0.27(0.12)  0.32(0.13)  0.37(0.12)  0.38(0.13)
ffp2    0.15(0.10)  0.19(0.08)  0.22(0.09)  0.26(0.09)  0.27(0.10)
ffp3    0.14(0.09)  0.15(0.07)  0.17(0.07)  0.20(0.07)  0.20(0.08)
rdk5    0.04(0.06)  0.08(0.08)  0.11(0.08)  0.13(0.08)  0.14(0.09)
rdk7    0.03(0.05)  0.04(0.05)  0.05(0.05)  0.06(0.05)  0.06(0.07)
ap      0.03(0.05)  0.09(0.06)  0.14(0.07)  0.18(0.07)  0.19(0.09)
tt      0.00(0.02)  0.03(0.05)  0.06(0.06)  0.09(0.07)  0.10(0.08)</code></pre>
</div>
</div>
<div id="cd9b8c5b" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dfilter(accum,fthresh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>,nbins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    function to remove extremely small values from the upper values of a data set before doing a histogram </span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb19-5">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum.values():</span>
<span id="cb19-7">        counts,edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.histogram(v,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbins)</span>
<span id="cb19-8">        tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(counts)</span>
<span id="cb19-9">        thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fthresh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tot</span>
<span id="cb19-10">        edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edges[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb19-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,cnt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(counts)):</span>
<span id="cb19-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cnt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>thresh:</span>
<span id="cb19-13">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb19-14">            edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edges[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb19-15">        res.append([x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> v <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>edge])</span>
<span id="cb19-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="1d83421b" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">fpn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2'</span></span>
<span id="cb20-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb20-3">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-4">plt.hist(dfilter(sims_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sims_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-5">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity (bits)'</span>)</span>
<span id="cb20-7">plt.title(fpn)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-8">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-9">plt.hist(dfilter(csims_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csims_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity (counts)'</span>)</span>
<span id="cb20-11">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-12">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="4ede2d31" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">fpn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk5'</span></span>
<span id="cb21-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb21-3">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-4">plt.hist(dfilter(sims_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sims_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-5">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity (bits)'</span>)</span>
<span id="cb21-7">plt.title(fpn)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-8">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb21-9">plt.hist(dfilter(csims_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csims_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity (counts)'</span>)</span>
<span id="cb21-11">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-12">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="bit-counts" class="level1">
<h1>Bit counts</h1>
<p>As you’d expect, smaller molecules set way fewer bits:</p>
<div id="7da97675" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bit-based'</span>)</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">     10              20              30              40              50'</span>)</span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb22-4">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bitcounts_accum[fpn].values()]</span>
<span id="cb22-5">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bitcounts_accum[fpn].values()]</span>
<span id="cb22-6">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb22-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>bit-based
 fp          10              20              30              40              50
mfp0       5.3(   1.6)     8.7(   1.9)    10.0(   2.0)    11.4(   2.1)    11.8(   2.6)
mfp1      11.9(   3.5)    22.1(   4.2)    27.5(   5.0)    34.5(   5.9)    38.1(   8.1)
mfp2      16.4(   5.2)    33.6(   6.4)    44.2(   7.5)    57.9(   8.7)    66.3(  12.2)
mfp3      18.4(   6.5)    43.1(   8.6)    59.3(  10.2)    79.8(  11.2)    93.4(  15.6)
ffp0       2.9(   1.1)     4.5(   1.3)     4.8(   1.2)     5.2(   1.2)     5.3(   1.3)
ffp1       8.8(   2.9)    15.8(   3.8)    18.7(   4.2)    22.8(   4.7)    24.3(   5.8)
ffp2      13.1(   4.4)    26.7(   6.0)    34.1(   7.0)    44.2(   8.1)    49.2(  10.4)
ffp3      15.1(   5.6)    36.2(   8.2)    49.0(   9.7)    65.8(  10.6)    75.8(  14.0)
rdk5      64.7(  37.2)   193.7(  74.1)   289.3( 104.2)   411.9( 129.0)   478.9( 161.4)
rdk7      95.0(  70.0)   444.3( 206.6)   725.5( 281.7)  1039.6( 314.8)  1220.0( 349.5)
ap        26.4(  10.5)   113.6(  30.7)   212.7(  51.9)   372.9(  64.9)   524.2(  92.9)
tt         8.3(   4.6)    25.9(   7.3)    40.7(   9.9)    59.2(  11.4)    74.0(  14.9)</code></pre>
</div>
</div>
<div id="0620c16f" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count-based'</span>)</span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">     10              20              30              40              50'</span>)</span>
<span id="cb24-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb24-4">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cbitcounts_accum[fpn].values()]</span>
<span id="cb24-5">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cbitcounts_accum[fpn].values()]</span>
<span id="cb24-6">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb24-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>count-based
 fp          10              20              30              40              50
mfp0       5.3(   1.6)     8.8(   1.9)    10.1(   2.0)    11.6(   2.1)    12.1(   2.7)
mfp1      12.1(   3.6)    22.3(   4.3)    27.7(   5.0)    34.9(   6.0)    38.7(   8.3)
mfp2      16.5(   5.3)    33.9(   6.4)    44.7(   7.7)    58.7(   8.9)    67.5(  12.6)
mfp3      18.5(   6.5)    43.6(   8.7)    60.1(  10.5)    81.5(  11.6)    95.7(  16.2)
ffp0       2.9(   1.1)     4.5(   1.3)     4.8(   1.2)     5.2(   1.2)     5.3(   1.3)
ffp1       8.8(   2.9)    15.8(   3.8)    18.7(   4.2)    22.9(   4.8)    24.4(   5.8)
ffp2      13.2(   4.4)    26.9(   6.0)    34.5(   7.1)    44.8(   8.2)    50.1(  10.7)
ffp3      15.1(   5.6)    36.5(   8.3)    49.6(   9.9)    67.2(  10.9)    77.6(  14.4)
rdk5      66.1(  38.8)   205.3(  82.8)   316.0( 124.2)   468.2( 163.8)   560.4( 216.5)
rdk7      98.6(  76.1)   520.7( 284.5)   953.3( 500.9)  1568.9( 709.7)  2064.2( 952.7)
ap        20.9(   9.2)    80.2(  25.2)   140.9(  40.7)   239.3(  61.0)   323.3(  91.1)
tt         6.7(   4.0)    19.5(   6.6)    28.9(   9.1)    40.5(  11.4)    47.6(  14.8)</code></pre>
</div>
</div>
<p>The difference in numbers of bits set between the sparse count-based and bit-based fingerprint is a measure of the number of collisions arising from folding the fingerprint. I’ve done a <a href="https://greglandrum.github.io/rdkit-blog/posts/2023-01-23-colliding-bits-iii-expanded.html">blog post about this</a> that showed that collisions tend to increase similarity values.</p>
<p>The results above, unsurprisingly, show that collisions are much more prevalent in larger molecules, where more bits are set. This is particularly true for the RDKit fingerprint, which sets a very large number of bits.</p>
<blockquote class="blockquote">
<p>Note: by default the bit-based versions of the atom pair and topological torsion fingerprints use <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-07-06-simulating-counts.html">count simulation</a>, so features that are present multiple times in a molecule can lead to multiple bits being set in the bit-based fingerprint. This leads to the unusual behavior observed above that there are more bits set in the bit-based fingerprints than the count-based ones, particularly for larger molecules.</p>
</blockquote>
<div id="40a04058" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">fpn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk7'</span></span>
<span id="cb26-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb26-3"></span>
<span id="cb26-4"></span>
<span id="cb26-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-6">plt.hist(dfilter(cbitcounts_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cbitcounts_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-7">lim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.xlim()</span>
<span id="cb26-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num bits set (counts)'</span>)</span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.xlim(0,0.5);</span></span>
<span id="cb26-10">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-11"></span>
<span id="cb26-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-13">plt.hist(dfilter(bitcounts_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bitcounts_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-14">plt.xlim(lim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],lim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num bits set'</span>)</span>
<span id="cb26-16">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-17">plt.title(fpn)</span>
<span id="cb26-18"></span>
<span id="cb26-19">plt.tight_layout()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="bdb782bd" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">fpn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2'</span></span>
<span id="cb27-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb27-3"></span>
<span id="cb27-4"></span>
<span id="cb27-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb27-6">plt.hist(dfilter(cbitcounts_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cbitcounts_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-7">lim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.xlim()</span>
<span id="cb27-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num bits set (counts)'</span>)</span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.xlim(0,0.5);</span></span>
<span id="cb27-10">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-11"></span>
<span id="cb27-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-13">plt.hist(dfilter(bitcounts_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bitcounts_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-14">plt.xlim(lim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],lim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num bits set'</span>)</span>
<span id="cb27-16">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-17">plt.title(fpn)</span>
<span id="cb27-18"></span>
<span id="cb27-19">plt.tight_layout()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="collisions" class="level1">
<h1>Collisions</h1>
<p>We can directly get stats on the number of collisions:</p>
<div id="fbb9a1fd" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count-based'</span>)</span>
<span id="cb28-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">     10              20              30              40              50'</span>)</span>
<span id="cb28-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb28-4">    diffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.array(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.array(y) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(cbitcounts_accum[fpn].values(),bitcounts_accum[fpn].values())]</span>
<span id="cb28-5">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> diffs]</span>
<span id="cb28-6">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> diffs]</span>
<span id="cb28-7">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb28-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>count-based
 fp          10              20              30              40              50
mfp0       0.1(   0.3)     0.2(   0.4)     0.1(   0.3)     0.2(   0.4)     0.3(   0.5)
mfp1       0.1(   0.3)     0.2(   0.4)     0.2(   0.5)     0.4(   0.6)     0.6(   0.7)
mfp2       0.1(   0.4)     0.3(   0.6)     0.5(   0.7)     0.9(   0.9)     1.3(   1.1)
mfp3       0.2(   0.4)     0.5(   0.7)     0.9(   1.0)     1.6(   1.3)     2.3(   1.6)
ffp0       0.0(   0.0)     0.0(   0.0)     0.0(   0.0)     0.0(   0.0)     0.0(   0.0)
ffp1       0.0(   0.2)     0.0(   0.2)     0.0(   0.2)     0.1(   0.2)     0.1(   0.3)
ffp2       0.1(   0.2)     0.2(   0.4)     0.3(   0.6)     0.7(   0.7)     0.9(   0.9)
ffp3       0.1(   0.3)     0.3(   0.6)     0.7(   0.8)     1.3(   1.1)     1.8(   1.3)
rdk5       1.4(   2.0)    11.6(   9.6)    26.7(  21.1)    56.2(  36.5)    81.5(  57.0)
rdk7       3.6(   7.8)    76.4(  83.1)   227.8( 230.7)   529.3( 410.5)   844.2( 621.1)
ap        -5.5(   4.6)   -33.4(  13.1)   -71.8(  23.5)  -133.6(  27.9)  -201.0(  38.6)
tt        -1.6(   2.1)    -6.4(   3.6)   -11.8(   5.1)   -18.6(   5.8)   -26.4(   7.7)</code></pre>
</div>
</div>
<p>The negative values here for the atom pair and topological torsion fingerprints are due to <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-07-06-simulating-counts.html">count simulation</a>: multiple bits can be set for each feature in the molecule.</p>


</section>

 ]]></description>
  <category>reference</category>
  <category>similarity</category>
  <category>fingerprints</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1.html</guid>
  <pubDate>Thu, 19 Jun 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/size-and-similarity-1.png" medium="image" type="image/png" height="91" width="144"/>
</item>
<item>
  <title>Connecting reaction products to the reacting molecules.</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info.html</link>
  <description><![CDATA[ 




<p>We often get questions about how to relate atoms in the products of a chemical reaction to the corresponding atoms in the reactants which were provided to the reaction. The RDKit provides a couple of pieces of information that can help here; this post shows how to access that information and what it means.</p>
<div id="45e6c132" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdChemReactions</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDepictor</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3</code></pre>
</div>
</div>
<p>This is the reaction definition <code>Niementowski_quinazoline</code> from the SI of the paper “A Collection of Robust Organic Synthesis Reactions for In Silico Molecule Design” by <a href="http://pubs.acs.org/doi/abs/10.1021/ci200379p">Hartenfeller et al.&nbsp;</a>.</p>
<div id="29266063" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[c:1](-[C;$(C-c1ccccc1):2](=[OD1:3])-[OH1]):[c:4](-[NH2:5]).[N;!H0;!$(N-N);!$(N-C=N);!$(N(-C=O)-C=O):6]-[C;H1,$(C-[#6]):7]=[OD1]&gt;&gt;[c:4]2:[c:1]-[C:2](=[O:3])-[N:6]-[C:7]=[N:5]-2'</span>)</span>
<span id="cb3-2">rxn</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="992273bd" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">reactants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1c(C(=O)O)c(N)cc(CC)c1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C(=O)Nc1ccccc1'</span>)]</span>
<span id="cb4-2">Draw.MolsToGridImage(reactants)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="f1168c6c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">prods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants(reactants)</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(prods)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>1</code></pre>
</div>
</div>
<div id="e6323cce" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="f8b1d6ba" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].GetAtomWithIdx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).GetPropsAsDict(includeComputed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>{'old_mapno': 4, 'react_atom_idx': 5, 'react_idx': 0}</code></pre>
</div>
</div>
<p><code>old_mapno</code> is the atom map number of the atom in the product template, <code>react_idx</code> is the index of the reactant that the atom came from (this was added in release 2024.09.6, so it won’t be there in older releases), and <code>react_atom_idx</code> is the index of the atom in that reactant.</p>
<p>Here’s an atom that wasn’t in the product template, so it doesn’t have an atom map number:</p>
<div id="534cd648" class="cell" data-scrolled="true" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].GetAtomWithIdx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>).GetPropsAsDict(includeComputed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>{'react_atom_idx': 7, 'react_idx': 0}</code></pre>
</div>
</div>
<p>Here’s a sample function that draws a product molecule and highlights atoms and bonds based upon which reactant they came from. It can also optionally include the original atom indices.</p>
<div id="8d852f4c" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVG</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_mol_highlighted_by_atom_origin(mol,</span>
<span id="cb12-4">                                        includeOriginalAtomIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb12-5">                                        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>),</span>
<span id="cb12-6">                                        colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span>),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>),(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.71</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.76</span>),(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>)],</span>
<span id="cb12-7">                                       ):</span>
<span id="cb12-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy the molecule since we will modify it:</span></span>
<span id="cb12-9">    mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mol)</span>
<span id="cb12-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> mol.GetNumConformers():</span>
<span id="cb12-11">        rdDepictor.Compute2DCoords(mol)</span>
<span id="cb12-12">        rdDepictor.StraightenDepiction(mol)</span>
<span id="cb12-13">    atom_highlights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-14">    bond_highlights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-15">    rads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-16">    mults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-17"></span>
<span id="cb12-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> at <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol.GetAtoms():</span>
<span id="cb12-19">        pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> at.GetPropsAsDict()</span>
<span id="cb12-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_idx'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pd:</span>
<span id="cb12-21">            atom_highlights[at.GetIdx()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [colors[pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_idx'</span>]]]</span>
<span id="cb12-22">            rads[at.GetIdx()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span></span>
<span id="cb12-23">            mults[at.GetIdx()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> includeOriginalAtomIndices <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_atom_idx'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pd:</span>
<span id="cb12-25">            at.SetProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atomNote'</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_atom_idx'</span>]))</span>
<span id="cb12-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bnd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol.GetBonds():</span>
<span id="cb12-27">        bidx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnd.GetBeginAtomIdx()</span>
<span id="cb12-28">        eidx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnd.GetEndAtomIdx()</span>
<span id="cb12-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> bidx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> atom_highlights <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> eidx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> atom_highlights <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> atom_highlights[bidx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> atom_highlights[eidx]:</span>
<span id="cb12-30">            bond_highlights[bnd.GetIdx()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> atom_highlights[bidx]</span>
<span id="cb12-31">    d2d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw.MolDraw2DSVG(size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb12-32">    d2d.DrawMoleculeWithHighlights(mol,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,atom_highlights,bond_highlights,rads,mults)</span>
<span id="cb12-33">    d2d.FinishDrawing()</span>
<span id="cb12-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> d2d.GetDrawingText()</span></code></pre></div>
</div>
<div id="3aa95dbc" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-2">SVG(draw_mol_highlighted_by_atom_origin(mol))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-10-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="e05ad196" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">SVG(draw_mol_highlighted_by_atom_origin(mol,includeOriginalAtomIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-11-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>tutorial</category>
  <category>reactions</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info.html</guid>
  <pubDate>Wed, 11 Jun 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/using-reaction-info-1.png" medium="image" type="image/png" height="74" width="144"/>
</item>
<item>
  <title>Murcko Scaffolds Tutorial</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-06-06-murcko-scaffolds.html</link>
  <description><![CDATA[ 




<p>This guest post by Jeremy Monat (GitHub: <a href="https://github.com/bertiewooster/"><span class="citation" data-cites="bertiewooster">@bertiewooster</span></a>) provides a simple way to visualize a list of molecules by their Murcko scaffolds. Murcko scaffolds are a useful way to cluster molecules to select a chemically diverse set of molecules. Murcko scaffolds are also a good way to split a set of molecules for machine learning so the model does not train and test on molecules that have the same scaffold, which contaminates the training set.</p>
<p>RDKit’s implementation of Murcko scaffolds is based on <a href="https://pubmed.ncbi.nlm.nih.gov/8709122/">Bemis-Murcko Scaffolds</a>, with <a href="https://github.com/rdkit/rdkit/issues/4093">some differences</a>.</p>
<div id="961769e5" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AllChem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Scaffolds.MurckoScaffold <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MurckoScaffoldSmiles</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MolsMatrixToGridImage</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Descriptors</span></code></pre></div>
</div>
<section id="murcko-scaffolds-for-a-list-of-smiles" class="level1">
<h1>Murcko scaffolds for a list of SMILES</h1>
<p>Given a list of SMILES corresponding to molecules:</p>
<div id="befbda3b" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">smls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cc1cc(Oc2nccc(CCCC)c2)ccc1"</span>,</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1c2ccccc2ccc1"</span>,</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cc1cc(Oc2nccc(CCC)c2)ccc1"</span>,</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cc1ccccc1"</span>,</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1c2cc(CC)ccc2ccc1"</span>,</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cc1c2ccccc2ccc1"</span>,</span>
<span id="cb2-8">]</span></code></pre></div>
</div>
<p>we determine the Murcko scaffold for each. We put the results in a dictionary of <code>molecule:scaffold</code> format (each as a SMILES) so we can later group by scaffold. (While the scaffolds are themselves valid molecules, we use the term “molecule” here to mean an input molecule.)</p>
<div id="ec78c4ea" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">molecule_scaffold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {sml: MurckoScaffoldSmiles(sml) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smls}</span>
<span id="cb3-2">molecule_scaffold</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>{'Cc1cc(Oc2nccc(CCCC)c2)ccc1': 'c1ccc(Oc2ccccn2)cc1',
 'c1c2ccccc2ccc1': 'c1ccc2ccccc2c1',
 'Cc1cc(Oc2nccc(CCC)c2)ccc1': 'c1ccc(Oc2ccccn2)cc1',
 'Cc1ccccc1': 'c1ccccc1',
 'c1c2cc(CC)ccc2ccc1': 'c1ccc2ccccc2c1',
 'Cc1c2ccccc2ccc1': 'c1ccc2ccccc2c1'}</code></pre>
</div>
</div>
<p>Now we can determine the number of unique scaffolds by creating a <code>set</code> of the scaffolds as SMILES. (If we tried to do this with scaffold <code>mol</code>s, we wouldn’t get accurate results because each <code>mol</code> is a unique object, specified by its memory address, even if it corresponds to the same structure as another <code>mol</code>.)</p>
<div id="aba2c1c6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">scaffolds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(scaffold <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> scaffold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecule_scaffold.values())</span>
<span id="cb5-2">scaffolds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{'c1ccc(Oc2ccccn2)cc1', 'c1ccc2ccccc2c1', 'c1ccccc1'}</code></pre>
</div>
</div>
<div id="14db4f7c" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(scaffolds)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>3</code></pre>
</div>
</div>
</section>
<section id="grouping-molecules-by-scaffold" class="level1">
<h1>Grouping molecules by scaffold</h1>
<p>Now we reverse the dictionary to <code>scaffold:list[molecule]</code> format to group the molecules by scaffold.</p>
<div id="6c6ef79d" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">scaffold_molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> molecule, scaffold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecule_scaffold.items():</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> scaffold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> scaffold_molecules.keys():</span>
<span id="cb9-4">        scaffold_molecules[scaffold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [molecule]</span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb9-6">        scaffold_molecules[scaffold].append(molecule)</span>
<span id="cb9-7">scaffold_molecules</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>{'c1ccc(Oc2ccccn2)cc1': ['Cc1cc(Oc2nccc(CCCC)c2)ccc1',
  'Cc1cc(Oc2nccc(CCC)c2)ccc1'],
 'c1ccc2ccccc2c1': ['c1c2ccccc2ccc1', 'c1c2cc(CC)ccc2ccc1', 'Cc1c2ccccc2ccc1'],
 'c1ccccc1': ['Cc1ccccc1']}</code></pre>
</div>
</div>
</section>
<section id="visualizing-molecules-by-scaffold" class="level1">
<h1>Visualizing molecules by scaffold</h1>
<p>To get a better sense of the scaffolds and molecules, let’s plot them in rows and columns:</p>
<ul>
<li>Each row will correspond to a scaffold</li>
<li>The first column in each row will be the scaffold</li>
<li>Each subsequent column will be a molecule with that scaffold</li>
</ul>
<p>Because each scaffold (row) can have a variable number of molecules (columns), <a href="https://greglandrum.github.io/rdkit-blog/posts/2023-10-25-molsmatrixtogridimage.html">MolsMatrixToGridImage</a> is convenient for visualization.</p>
<p>We start by creating a matrix (nested list) of mols where the first column is the scaffold and subsequent columns are molecules with that scaffold.</p>
<div id="7becd124" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">molsMatrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> scaffold, molecules_list <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> scaffold_molecules.items():</span>
<span id="cb11-3">    molsMatrix.append(</span>
<span id="cb11-4">        [Chem.MolFromSmiles(scaffold)]</span>
<span id="cb11-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [Chem.MolFromSmiles(sml) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecules_list]</span>
<span id="cb11-6">    )</span></code></pre></div>
</div>
<p>To put the scaffolds in a logical order, we sort them by molecular weight.</p>
<div id="39a16379" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">molsMatrix.sort(key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> row: Descriptors.MolWt(row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span></code></pre></div>
</div>
<p>We loop through the rows (scaffolds) and do three things to make it easier to compare the molecules for each scaffold:</p>
<ul>
<li>Sort the molecules by molecular weight</li>
<li>Prepare to highlight the scaffold in each molecule by getting the substructure match for each molecule</li>
<li>Align the molecules so they’re in the same orientation as the scaffold</li>
</ul>
<p>Again, we use the term “molecules” to exclude the scaffold, hence the definition <code>molecules = row[1:]</code> because the scaffold is the first column in each row.</p>
<div id="7ce6d1f6" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">highlightAtomListsMatrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molsMatrix:</span>
<span id="cb13-3">    scaffold_mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-4">    molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb13-5"></span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the molecules in the row by molecular weight (excluding the scaffold)</span></span>
<span id="cb13-7">    molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(molecules, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Descriptors.MolWt)</span>
<span id="cb13-8">    row[:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [scaffold_mol] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> molecules</span>
<span id="cb13-9"></span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Highlight the scaffold in each molecule; don't highlight the scaffold (first column)</span></span>
<span id="cb13-11">    matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [</span>
<span id="cb13-12">        molecule.GetSubstructMatch(scaffold_mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> molecule <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecules</span>
<span id="cb13-13">    ]</span>
<span id="cb13-14">    highlightAtomListsMatrix.append(matches)</span>
<span id="cb13-15"></span>
<span id="cb13-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Align the molecules so they're in the same orientation as the scaffold</span></span>
<span id="cb13-17">    Chem.Compute2DCoords(scaffold_mol)</span>
<span id="cb13-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> molecule <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecules:</span>
<span id="cb13-19">        Chem.GenerateDepictionMatching2DStructure(molecule, scaffold_mol)</span></code></pre></div>
</div>
<p>For the last setup step, we create the legends by row (scaffold):</p>
<ul>
<li>In the first column, we number each scaffold</li>
<li>In the second column, we tell how many molecules correspond to that scaffold</li>
</ul>
<div id="42ec0e30" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">legendsMatrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row_num, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(molsMatrix, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb14-3">    n_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(row) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb14-5">        descr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 molecule"</span></span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb14-7">        descr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_examples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> molecules"</span></span>
<span id="cb14-8">    labelsRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scaffold #</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, descr]</span>
<span id="cb14-9">    labelsRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-10">    legendsMatrix.append(labelsRow)</span></code></pre></div>
</div>
<p>Now we can plot the results:</p>
<div id="8546e4af" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">MolsMatrixToGridImage(</span>
<span id="cb15-2">    molsMatrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>molsMatrix,</span>
<span id="cb15-3">    legendsMatrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>legendsMatrix,</span>
<span id="cb15-4">    highlightAtomListsMatrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>highlightAtomListsMatrix,</span>
<span id="cb15-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-06-murcko-scaffolds_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>tutorial</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-06-06-murcko-scaffolds.html</guid>
  <pubDate>Thu, 05 Jun 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/murcko-scaffolds-1.png" medium="image" type="image/png" height="48" width="144"/>
</item>
<item>
  <title>Doing extended Hueckel calculations with the RDKit</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit.html</link>
  <description><![CDATA[ 




<p>This is an updated and revised version of an <a href="https://rdkit.blogspot.com/2019/06/doing-extended-hueckel-calculations.html">older post</a>.</p>
<p>The RDKit has included an optional integration with a semi-empirical quantum mechanics package called YAeHMOP since the 2019.03 release. If you build the RDKit yourself, this is disabled by default, but it is part of the RDKit conda-forge and pypi builds, so it’s available to most RDKit users.</p>
<p>There’s no documentation for this integration yet… thus this blog post.</p>
<section id="some-background" class="level1">
<h1>Some background</h1>
<p>One of my major projects in grad school was to write a software package for performing extended Hueckel calculations and analyzing and visualizing the results. I released the source for YAeHMOP (“Yet Another extended Hueckel Molecular Orbital Package”) way back when using some weird license (the open-source landscape in chemistry was “a bit” different back in the mid-90s). After changing fields, I more or less forgot about YAeHMOP until a couple of years ago when Patrick Avery contacted me about integrating it <a href="https://pubs.acs.org/doi/abs/10.1021/acs.jchemed.7b00698">into Avogadro</a>. To make things easier, I put the source <a href="https://github.com/greglandrum/yaehmop">up on Github</a> and switched to a BSD license. Since that point we’ve done a bit of additional cleanup work on the eHT code (the visualization pieces are still there, but really only have historic interest) and made it useable as a library.</p>
<p>There are a couple of applications where I think it might be interesting to have access to quick, interpretable QM results from the RDKit. These include getting partial charges and starting to think about quick and dirty descriptors for things like bond strengths and reactivity. So I decided to do an integration of YAeHMOP into the RDKit.</p>
<p>There are a <em>bunch</em> of books and papers describing extended Hueckel theory and the various types of analysis that one can do with it; I’m not going to cite all of those here. There’s also no formal publication describing YAeHMOP (what a shock!), but there is a <a href="https://drive.google.com/file/d/0BzBynnwxNS0SanJzUkJYYWNFY0h1bzNFR0d0aVBCR0x5NmZV/view?usp=sharing&amp;resourcekey=0-o4HYaJEodQtVCZ54zZSi4g">chapter</a> in my PhD thesis that provides an fairly comprehensive tutorial overview of the theory.</p>
<div id="cell-2" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDepictor</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDistGeom</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdForceFieldHelpers</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdMolAlign</span>
<span id="cb1-7">rdDepictor.SetPreferCoordGen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-9">IPythonConsole.ipython_3d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is the package including the connection to YAeHMOP</span></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdEHTTools</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(time.asctime())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.2
Tue May 27 06:32:31 2025</code></pre>
</div>
</div>
<div id="cell-3" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font.size'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'16'</span></span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</div>
</section>
<section id="running-an-eht-calculation" class="level1">
<h1>Running an eHT calculation</h1>
<p>Start by showing how to run an eHT calculation:</p>
<div id="cell-6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># imatinib</span></span>
<span id="cb4-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cc1ccc(NC(=O)c2ccc(CN3CCN(C)CC3)cc2)cc1Nc1nccc(-c2cccnc2)n1'</span>)</span>
<span id="cb4-3">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We need to add Hs and generate a conformation:</p>
<div id="cell-8" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">mh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.AddHs(m)</span>
<span id="cb5-2"></span>
<span id="cb5-3">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.ETKDGv3()</span>
<span id="cb5-4">params.randomSeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xf00d</span></span>
<span id="cb5-5">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMultipleConfs(mh,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,params)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>And now we can run the calculation, it’s quick:</p>
<div id="cell-10" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">passed,res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdEHTTools.RunMol(mh)</span></code></pre></div>
</div>
<p>The first return value lets us know if the calculation succeeded:</p>
<div id="cell-12" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">passed</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>True</code></pre>
</div>
</div>
<p>The second contains the results of the calculation:</p>
<div id="cell-14" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">res</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>&lt;rdkit.Chem.rdEHTTools.EHTResults at 0x7134eb4fb990&gt;</code></pre>
</div>
</div>
<p>We have access to the atomic charges:</p>
<div id="cell-16" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">res.GetAtomicCharges()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([-5.73319770e-02, -1.56119578e-02, -4.62356988e-02, -1.18071986e-01,
        2.86923770e-01, -3.70969432e-01,  1.00722260e+00, -1.21427336e+00,
        1.03464336e-02,  3.95206419e-03, -5.19248775e-02,  1.13588339e-01,
        2.38359626e-01, -5.99954120e-01,  2.17722688e-01,  2.27807128e-01,
       -6.56662561e-01,  1.84484934e-01,  2.16303717e-01,  2.04326750e-01,
       -6.48170370e-02,  3.50318427e-03, -1.46944980e-01,  2.80281190e-01,
       -3.39480974e-01,  9.28885393e-01, -9.10924655e-01,  4.27524493e-01,
       -1.53696399e-01,  4.99938553e-01,  1.25460394e-02,  1.04297689e-01,
       -5.89901215e-02,  3.62195210e-01, -8.17714649e-01,  3.65798320e-01,
       -9.06432708e-01,  2.36395863e-02,  2.09410831e-02,  1.39448705e-02,
        1.96396053e-02,  3.16035160e-02,  2.28935259e-01,  2.99088433e-02,
        2.12441191e-02, -9.34616751e-03, -1.93856802e-02,  1.28332398e-03,
       -3.10220683e-03, -4.19893941e-03, -2.37810660e-03,  1.00680225e-02,
        1.90934569e-03,  1.07324773e-02,  4.87832629e-03,  7.08061277e-04,
        9.06261240e-03, -9.03297593e-03,  2.21231427e-02,  2.43698118e-02,
        4.00966866e-02,  2.16945408e-01,  1.45921314e-02,  3.89137638e-02,
        2.12291420e-02,  2.76350076e-02,  2.16390227e-02,  2.54300922e-02])</code></pre>
</div>
</div>
<p>The reduced overlap population matrix provides the Mulliken overlap population between atoms in the molecule. This tells us something about the strength of the interaction between the atoms. It’s returned as a vector representing a symmetric matrix:</p>
<div id="cell-18" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">res.GetReducedOverlapPopulationMatrix()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>array([ 2.58800014,  0.7866103 ,  2.78382058, -0.08743666,  1.12740458,
        2.72952681])</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convenience function to set a "MulilkenOverlapPopulation" property on bonds.</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_overlap_populations(m,ehtRes):</span>
<span id="cb15-3">    rop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ehtRes.GetReducedOverlapPopulationMatrix()</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bnd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> m.GetBonds():</span>
<span id="cb15-5">        a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnd.GetBeginAtom()</span>
<span id="cb15-6">        a2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnd.GetEndAtom()</span>
<span id="cb15-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> a1.GetAtomicNum()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> a2.GetAtomicNum()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb15-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb15-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># symmetric matrix:</span></span>
<span id="cb15-10">        i1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(a1.GetIdx(),a2.GetIdx())</span>
<span id="cb15-11">        i2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(a1.GetIdx(),a2.GetIdx())</span>
<span id="cb15-12">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i2</span>
<span id="cb15-13">        bnd.SetDoubleProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MullikenOverlapPopulation"</span>,rop[idx])</span></code></pre></div>
</div>
<div id="cell-20" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">set_overlap_populations(mh,res)</span></code></pre></div>
</div>
<p>Look at a few of the overlap populations:</p>
<div id="cell-22" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bnd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(mh.GetBonds())[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb17-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> bnd.HasProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MullikenOverlapPopulation"</span>):</span>
<span id="cb17-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb17-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetIdx()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetBeginAtom()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetSymbol()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetBeginAtomIdx()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetEndAtom()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetSymbol()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetEndAtomIdx()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetBondType()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetDoubleProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MullikenOverlapPopulation"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 C(0)-C(1) SINGLE 0.787
1 C(1)-C(2) AROMATIC 1.127
2 C(2)-C(3) AROMATIC 1.084
3 C(3)-C(4) AROMATIC 1.113
4 C(4)-N(5) SINGLE 0.720</code></pre>
</div>
</div>
<p>The wrapper also currently provides the reduced charge matrix (described in that thesis chapter linked above). I’m not going to discuss that here.</p>
</section>
<section id="application-look-at-variability-of-charges-between-conformers" class="level1">
<h1>Application: Look at variability of charges between conformers</h1>
<p>The rest of this blog post is going to show a straightforward analysis one can do with the eHT results: looking at the variability of the QM charges across the different conformers.</p>
<div id="cell-25" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> runEHT(mh):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" convenience function to run an eHT calculation on all of a molecule's conformers</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        returns a list of the results structures as well as a list of lists containing the</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        charges on each atom in each conformer: chgs[atomId][confId] to use this</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb19-7">    eres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-8">    charges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mh.GetNumHeavyAtoms())]</span>
<span id="cb19-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mh.GetNumConformers()):</span>
<span id="cb19-10">        passed,res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdEHTTools.RunMol(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cid)</span>
<span id="cb19-11">        eres.append(res)</span>
<span id="cb19-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> passed:</span>
<span id="cb19-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eHT failed"</span>)</span>
<span id="cb19-14">        hvyIdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-15">        echgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res.GetAtomicCharges()</span>
<span id="cb19-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mh.GetAtoms():</span>
<span id="cb19-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> atom.GetAtomicNum()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb19-18">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb19-19">            charges[hvyIdx].append(echgs[atom.GetIdx()])</span>
<span id="cb19-20">            hvyIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (eres,charges)</span>
<span id="cb19-22">    </span></code></pre></div>
</div>
<div id="cell-26" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">eres,charges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runEHT(mh)</span></code></pre></div>
</div>
<div id="cell-27" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb21-2">plt.violinplot(charges)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ETKDG"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom ID'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"partial charge"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>To make sense of that, draw the molecule with the atoms numbered:</p>
<div id="cell-29" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">IPythonConsole.drawOptions.addAtomIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb22-2">IPythonConsole.molSize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb22-3">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Look at the results for a couple of the atoms that show the most variability</p>
<div id="cell-31" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">chgRange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> charges]</span>
<span id="cb23-2">sortedRanges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chgRange)], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-3">sortedRanges[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>[(0.20875282639970938, 24), (0.11463855830843706, 5)]</code></pre>
</div>
</div>
<div id="cell-32" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">tchgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>((y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(charges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]))</span>
<span id="cb25-2">tchgs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],tchgs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>([(-0.5344846663677152, 7), (-0.5300694785153464, 9)],
 [(-0.3297127630789536, 46), (-0.3257318399680058, 22)])</code></pre>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">tchgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>((y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(charges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]))</span>
<span id="cb27-2">tchgs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],tchgs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>([(-0.37553939142960324, 12), (-0.3740573280350843, 4)],
 [(-0.2660340113875628, 14), (-0.2609008331211662, 30)])</code></pre>
</div>
</div>
<p>Look at the two conformers where the charges on atom 24 differ the most:</p>
<div id="cell-35" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">m.__sssAtoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]</span>
<span id="cb29-2">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-36" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">tm7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(Chem.MolToMolBlock(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb30-2">tm7</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="3dmolviewer_17483188092931037" style="position: relative; width: 400px; height: 400px;">
        <p id="3dmolwarning_17483188092931037" style="background-color:#ffcccc;color:black">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>
        </div>
<script>

var loadScriptAsync = function(uri){
  return new Promise((resolve, reject) => {
    //this is to ignore the existence of requirejs amd
    var savedexports, savedmodule;
    if (typeof exports !== 'undefined') savedexports = exports;
    else exports = {}
    if (typeof module !== 'undefined') savedmodule = module;
    else module = {}

    var tag = document.createElement('script');
    tag.src = uri;
    tag.async = true;
    tag.onload = () => {
        exports = savedexports;
        module = savedmodule;
        resolve();
    };
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
});
};

if(typeof $3Dmolpromise === 'undefined') {
$3Dmolpromise = null;
  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.0/3Dmol-min.js');
}

var viewer_17483188092931037 = null;
var warn = document.getElementById("3dmolwarning_17483188092931037");
if(warn) {
    warn.parentNode.removeChild(warn);
}
$3Dmolpromise.then(function() {
viewer_17483188092931037 = $3Dmol.createViewer(document.getElementById("3dmolviewer_17483188092931037"),{backgroundColor:"white"});
viewer_17483188092931037.zoomTo();
    viewer_17483188092931037.removeAllModels();
    viewer_17483188092931037.addModel("\n     RDKit          3D\n\n 37 41  0  0  0  0  0  0  0  0999 V2000\n   -4.0652   -5.3614    2.5183 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.1772   -4.4307    1.7734 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.8350   -4.7025    1.6874 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.9790   -3.8638    1.0044 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.4905   -2.7421    0.4057 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5619   -1.8974   -0.2967 N   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0926   -0.8899    0.4674 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.2263   -0.8560    1.7044 O   0  0  0  0  0  0  0  0  0  0  0  0\n    1.0577    0.0416   -0.1000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.3393    0.0494   -1.4410 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2683    0.9409   -1.9879 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.8824    1.8074   -1.1041 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.8821    2.7989   -1.5701 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.2340    2.3400   -1.5765 N   0  0  0  0  0  0  0  0  0  0  0  0\n    5.4009    1.2251   -2.4922 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.7618    0.6040   -2.3843 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.6567    1.4701   -1.6720 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.0310    1.0094   -1.7270 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.2491    1.8210   -0.3476 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.7403    1.9433   -0.2981 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6037    1.8063    0.2526 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.6748    0.9157    0.8042 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8529   -2.4091    0.4571 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.6434   -3.2980    1.1592 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.0449   -2.9662    1.2322 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.5887   -1.8260    0.5829 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.1625   -2.0308   -0.6296 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.7113   -1.0312   -1.3602 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.6560    0.2477   -0.7925 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.0769    0.4715    0.4378 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.9879    1.7816    1.0651 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.3781    1.8701    2.2917 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.2655    3.1020    2.9383 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.7849    4.2365    2.3122 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.3796    4.1191    1.1049 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.4805    2.9324    0.4964 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.5418   -0.5822    1.1228 N   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  2  0\n  3  4  1  0\n  4  5  2  0\n  5  6  1  0\n  6  7  1  0\n  7  8  2  0\n  7  9  1  0\n  9 10  2  0\n 10 11  1  0\n 11 12  2  0\n 12 13  1  0\n 13 14  1  0\n 14 15  1  0\n 15 16  1  0\n 16 17  1  0\n 17 18  1  0\n 17 19  1  0\n 19 20  1  0\n 12 21  1  0\n 21 22  2  0\n  5 23  1  0\n 23 24  2  0\n 24 25  1  0\n 25 26  1  0\n 26 27  2  0\n 27 28  1  0\n 28 29  2  0\n 29 30  1  0\n 30 31  1  0\n 31 32  2  0\n 32 33  1  0\n 33 34  2  0\n 34 35  1  0\n 35 36  2  0\n 30 37  2  0\n 24  2  1  0\n 37 26  1  0\n 22  9  1  0\n 36 31  1  0\n 20 14  1  0\nM  END\n","sdf");
    viewer_17483188092931037.setStyle({"stick": {}});
    viewer_17483188092931037.setBackgroundColor("0xeeeeee");
    viewer_17483188092931037.zoomTo();
viewer_17483188092931037.render();
});
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="32">

</div>
</div>
<div id="cell-37" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">tm22 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(Chem.MolToMolBlock(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>))</span>
<span id="cb31-2">tm22</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="3dmolviewer_17483188364847312" style="position: relative; width: 400px; height: 400px;">
        <p id="3dmolwarning_17483188364847312" style="background-color:#ffcccc;color:black">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>
        </div>
<script>

var loadScriptAsync = function(uri){
  return new Promise((resolve, reject) => {
    //this is to ignore the existence of requirejs amd
    var savedexports, savedmodule;
    if (typeof exports !== 'undefined') savedexports = exports;
    else exports = {}
    if (typeof module !== 'undefined') savedmodule = module;
    else module = {}

    var tag = document.createElement('script');
    tag.src = uri;
    tag.async = true;
    tag.onload = () => {
        exports = savedexports;
        module = savedmodule;
        resolve();
    };
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
});
};

if(typeof $3Dmolpromise === 'undefined') {
$3Dmolpromise = null;
  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.0/3Dmol-min.js');
}

var viewer_17483188364847312 = null;
var warn = document.getElementById("3dmolwarning_17483188364847312");
if(warn) {
    warn.parentNode.removeChild(warn);
}
$3Dmolpromise.then(function() {
viewer_17483188364847312 = $3Dmol.createViewer(document.getElementById("3dmolviewer_17483188364847312"),{backgroundColor:"white"});
viewer_17483188364847312.zoomTo();
    viewer_17483188364847312.removeAllModels();
    viewer_17483188364847312.addModel("\n     RDKit          3D\n\n 37 41  0  0  0  0  0  0  0  0999 V2000\n    4.2792   -2.7557   -5.4828 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.4159   -2.0166   -4.5216 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.1234   -1.7346   -4.9046 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.2567   -1.0558   -4.0789 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.7235   -0.6617   -2.8449 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.8115    0.0420   -1.9863 N   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0448   -0.7715   -1.1024 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.2199   -2.0169   -1.1370 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.9252   -0.2127   -0.1693 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.5824   -1.1171    0.6645 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.5237   -0.7216    1.5891 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8216    0.6215    1.6877 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.8369    1.0221    2.6930 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.1686    1.0289    2.2343 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.1943    1.4050    3.1334 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.4283    0.5903    2.8122 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.7465    0.5949    1.4145 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -8.7005    1.5764    1.0045 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.6607    0.3715    0.5219 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.4103    1.1789    0.8494 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.1726    1.5154    0.8641 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.2191    1.1100   -0.0716 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.0199   -0.9503   -2.4729 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.9169   -1.6254   -3.2663 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.2345   -1.9458   -2.9309 N   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9279   -1.6461   -1.7472 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.2199   -2.0763   -1.6186 N   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9795   -1.8566   -0.5508 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4233   -1.1381    0.5139 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.1309   -0.6879    0.4270 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.5319    0.0571    1.5121 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.2287    0.5335    1.4704 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.6712    1.2476    2.5244 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.4140    1.5036    3.6564 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.6714    1.0438    3.6959 N   0  0  0  0  0  0  0  0  0  0  0  0\n    6.2284    0.3475    2.6791 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.4495   -0.9643   -0.6978 N   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  2  0\n  3  4  1  0\n  4  5  2  0\n  5  6  1  0\n  6  7  1  0\n  7  8  2  0\n  7  9  1  0\n  9 10  2  0\n 10 11  1  0\n 11 12  2  0\n 12 13  1  0\n 13 14  1  0\n 14 15  1  0\n 15 16  1  0\n 16 17  1  0\n 17 18  1  0\n 17 19  1  0\n 19 20  1  0\n 12 21  1  0\n 21 22  2  0\n  5 23  1  0\n 23 24  2  0\n 24 25  1  0\n 25 26  1  0\n 26 27  2  0\n 27 28  1  0\n 28 29  2  0\n 29 30  1  0\n 30 31  1  0\n 31 32  2  0\n 32 33  1  0\n 33 34  2  0\n 34 35  1  0\n 35 36  2  0\n 30 37  2  0\n 24  2  1  0\n 37 26  1  0\n 22  9  1  0\n 36 31  1  0\n 20 14  1  0\nM  END\n","sdf");
    viewer_17483188364847312.setStyle({"stick": {}});
    viewer_17483188364847312.setBackgroundColor("0xeeeeee");
    viewer_17483188364847312.zoomTo();
viewer_17483188364847312.render();
});
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="33">

</div>
</div>
<p>The difference here is the relative orientations of the two aromatic rings that N24 is bonded to. In the first case (more negative N), the rings are perpendicular to each other. In the second (less negative N), they are parallel.</p>
<p>What if we do an MMFF minimization of each conformer?</p>
<div id="cell-40" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">mh_mmff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mh)</span>
<span id="cb32-2">optRes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdForceFieldHelpers.MMFFOptimizeMoleculeConfs(mh_mmff,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb32-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,needsMore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(optRes):</span>
<span id="cb32-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> needsMore:</span>
<span id="cb32-5">        needsMore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdForceFieldHelpers.MMFFOptimizeMolecule(mh_mmff,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)</span></code></pre></div>
</div>
<div id="cell-41" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">eres,mmff_charges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runEHT(mh_mmff)</span></code></pre></div>
</div>
<div id="cell-42" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb34-2">plt.violinplot(mmff_charges)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MMFF"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom ID'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"partial charge"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-43" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">chgRange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mmff_charges]</span>
<span id="cb35-2">sortedRanges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chgRange)], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb35-3">sortedRanges[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>[(0.03803692881100473, 13), (0.025728042579126975, 19)]</code></pre>
</div>
</div>
<p>Those are much smaller changes (as we saw in the distributions).</p>
<p>What about the N24, the atom we looked at above?</p>
<div id="cell-45" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">tchgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>((y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(charges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]))</span>
<span id="cb37-2">tchgs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],tchgs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>([(-0.5344846663677152, 7), (-0.5300694785153464, 9)],
 [(-0.3297127630789536, 46), (-0.3257318399680058, 22)])</code></pre>
</div>
</div>
<p>Almost no difference at all there. Are the neighboring rings now consistently orented?</p>
<div id="cell-47" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">tm7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(Chem.MolToMolBlock(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb39-2">tm7</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="3dmolviewer_1748319664848715" style="position: relative; width: 400px; height: 400px;">
        <p id="3dmolwarning_1748319664848715" style="background-color:#ffcccc;color:black">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>
        </div>
<script>

var loadScriptAsync = function(uri){
  return new Promise((resolve, reject) => {
    //this is to ignore the existence of requirejs amd
    var savedexports, savedmodule;
    if (typeof exports !== 'undefined') savedexports = exports;
    else exports = {}
    if (typeof module !== 'undefined') savedmodule = module;
    else module = {}

    var tag = document.createElement('script');
    tag.src = uri;
    tag.async = true;
    tag.onload = () => {
        exports = savedexports;
        module = savedmodule;
        resolve();
    };
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
});
};

if(typeof $3Dmolpromise === 'undefined') {
$3Dmolpromise = null;
  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.0/3Dmol-min.js');
}

var viewer_1748319664848715 = null;
var warn = document.getElementById("3dmolwarning_1748319664848715");
if(warn) {
    warn.parentNode.removeChild(warn);
}
$3Dmolpromise.then(function() {
viewer_1748319664848715 = $3Dmol.createViewer(document.getElementById("3dmolviewer_1748319664848715"),{backgroundColor:"white"});
viewer_1748319664848715.zoomTo();
    viewer_1748319664848715.removeAllModels();
    viewer_1748319664848715.addModel("\n     RDKit          3D\n\n 37 41  0  0  0  0  0  0  0  0999 V2000\n   -4.0652   -5.3614    2.5183 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.1772   -4.4307    1.7734 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.8350   -4.7025    1.6874 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.9790   -3.8638    1.0044 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.4905   -2.7421    0.4057 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5619   -1.8974   -0.2967 N   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0926   -0.8899    0.4674 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.2263   -0.8560    1.7044 O   0  0  0  0  0  0  0  0  0  0  0  0\n    1.0577    0.0416   -0.1000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.3393    0.0494   -1.4410 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2683    0.9409   -1.9879 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.8824    1.8074   -1.1041 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.8821    2.7989   -1.5701 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.2340    2.3400   -1.5765 N   0  0  0  0  0  0  0  0  0  0  0  0\n    5.4009    1.2251   -2.4922 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.7618    0.6040   -2.3843 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.6567    1.4701   -1.6720 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.0310    1.0094   -1.7270 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.2491    1.8210   -0.3476 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.7403    1.9433   -0.2981 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6037    1.8063    0.2526 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.6748    0.9157    0.8042 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8529   -2.4091    0.4571 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.6434   -3.2980    1.1592 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.0449   -2.9662    1.2322 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.5887   -1.8260    0.5829 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.1625   -2.0308   -0.6296 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.7113   -1.0312   -1.3602 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.6560    0.2477   -0.7925 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.0769    0.4715    0.4378 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.9879    1.7816    1.0651 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.3781    1.8701    2.2917 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.2655    3.1020    2.9383 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.7849    4.2365    2.3122 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.3796    4.1191    1.1049 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.4805    2.9324    0.4964 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.5418   -0.5822    1.1228 N   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  2  0\n  3  4  1  0\n  4  5  2  0\n  5  6  1  0\n  6  7  1  0\n  7  8  2  0\n  7  9  1  0\n  9 10  2  0\n 10 11  1  0\n 11 12  2  0\n 12 13  1  0\n 13 14  1  0\n 14 15  1  0\n 15 16  1  0\n 16 17  1  0\n 17 18  1  0\n 17 19  1  0\n 19 20  1  0\n 12 21  1  0\n 21 22  2  0\n  5 23  1  0\n 23 24  2  0\n 24 25  1  0\n 25 26  1  0\n 26 27  2  0\n 27 28  1  0\n 28 29  2  0\n 29 30  1  0\n 30 31  1  0\n 31 32  2  0\n 32 33  1  0\n 33 34  2  0\n 34 35  1  0\n 35 36  2  0\n 30 37  2  0\n 24  2  1  0\n 37 26  1  0\n 22  9  1  0\n 36 31  1  0\n 20 14  1  0\nM  END\n","sdf");
    viewer_1748319664848715.setStyle({"stick": {}});
    viewer_1748319664848715.setBackgroundColor("0xeeeeee");
    viewer_1748319664848715.zoomTo();
viewer_1748319664848715.render();
});
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="43">

</div>
</div>
<div id="cell-48" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">tm9 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(Chem.MolToMolBlock(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span>
<span id="cb40-2">tm9</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="3dmolviewer_17483196896326954" style="position: relative; width: 400px; height: 400px;">
        <p id="3dmolwarning_17483196896326954" style="background-color:#ffcccc;color:black">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>
        </div>
<script>

var loadScriptAsync = function(uri){
  return new Promise((resolve, reject) => {
    //this is to ignore the existence of requirejs amd
    var savedexports, savedmodule;
    if (typeof exports !== 'undefined') savedexports = exports;
    else exports = {}
    if (typeof module !== 'undefined') savedmodule = module;
    else module = {}

    var tag = document.createElement('script');
    tag.src = uri;
    tag.async = true;
    tag.onload = () => {
        exports = savedexports;
        module = savedmodule;
        resolve();
    };
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
});
};

if(typeof $3Dmolpromise === 'undefined') {
$3Dmolpromise = null;
  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.0/3Dmol-min.js');
}

var viewer_17483196896326954 = null;
var warn = document.getElementById("3dmolwarning_17483196896326954");
if(warn) {
    warn.parentNode.removeChild(warn);
}
$3Dmolpromise.then(function() {
viewer_17483196896326954 = $3Dmol.createViewer(document.getElementById("3dmolviewer_17483196896326954"),{backgroundColor:"white"});
viewer_17483196896326954.zoomTo();
    viewer_17483196896326954.removeAllModels();
    viewer_17483196896326954.addModel("\n     RDKit          3D\n\n 37 41  0  0  0  0  0  0  0  0999 V2000\n   -5.1228   -4.6227   -2.5779 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.9076   -3.8364   -2.2482 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.7092   -4.0084   -2.9039 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6089   -3.2593   -2.5663 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6230   -2.2955   -1.5615 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.4419   -1.5803   -1.2843 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.2390   -0.6092   -0.2993 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.1555   -0.2781    0.4625 O   0  0  0  0  0  0  0  0  0  0  0  0\n    1.0533    0.0816   -0.0925 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.1590    1.0008    0.9289 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.3398    1.6864    1.1880 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.4692    1.4482    0.3958 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.7519    2.1574    0.6383 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.6241    1.4900    1.5611 N   0  0  0  0  0  0  0  0  0  0  0  0\n    6.8622    2.1865    1.8022 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.6968    2.1806    0.5466 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.8985    0.9032   -0.0178 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.2635    0.4838   -0.1487 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9373   -0.1025    0.1972 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9188    0.1275    1.2564 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3240    0.5181   -0.6207 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.1548   -0.1540   -0.8697 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8236   -2.1270   -0.9086 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.9371   -2.8870   -1.2526 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.1577   -2.6824   -0.5368 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.2772   -1.6893    0.4901 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.9250   -1.8980    1.7596 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.0946   -0.8847    2.6278 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.6170    0.3460    2.2390 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.9692    0.5268    0.9248 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.5314    1.7607    0.3950 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.8515    1.8109   -0.9513 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.3916    2.9637   -1.4903 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.6092    4.0693   -0.6680 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.2952    4.0135    0.6422 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.7722    2.8825    1.1407 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.7879   -0.5002    0.0863 N   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  2  0\n  3  4  1  0\n  4  5  2  0\n  5  6  1  0\n  6  7  1  0\n  7  8  2  0\n  7  9  1  0\n  9 10  2  0\n 10 11  1  0\n 11 12  2  0\n 12 13  1  0\n 13 14  1  0\n 14 15  1  0\n 15 16  1  0\n 16 17  1  0\n 17 18  1  0\n 17 19  1  0\n 19 20  1  0\n 12 21  1  0\n 21 22  2  0\n  5 23  1  0\n 23 24  2  0\n 24 25  1  0\n 25 26  1  0\n 26 27  2  0\n 27 28  1  0\n 28 29  2  0\n 29 30  1  0\n 30 31  1  0\n 31 32  2  0\n 32 33  1  0\n 33 34  2  0\n 34 35  1  0\n 35 36  2  0\n 30 37  2  0\n 24  2  1  0\n 37 26  1  0\n 22  9  1  0\n 36 31  1  0\n 20 14  1  0\nM  END\n","sdf");
    viewer_17483196896326954.setStyle({"stick": {}});
    viewer_17483196896326954.setBackgroundColor("0xeeeeee");
    viewer_17483196896326954.zoomTo();
viewer_17483196896326954.render();
});
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="44">

</div>
</div>
<p>They are: the rings are more or less perpendicular in both conformers.</p>
<p>The charge variability has dropped considerably, are the MMFF conformers actually different from each other?</p>
<div id="cell-51" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">rmsds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb41-2">cp1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mh_mmff)</span>
<span id="cb41-3">cp2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mh_mmff)</span>
<span id="cb41-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mh_mmff.GetNumConformers()):</span>
<span id="cb41-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,mh_mmff.GetNumConformers()):</span>
<span id="cb41-6">        rmsds.append(rdMolAlign.GetBestRMS(cp1,cp2,prbId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,refId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>j))</span>
<span id="cb41-7">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb41-8">plt.hist(rmsds,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb41-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RMSD'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So the conformers are still different from each other but the charge differences are now much smaller than they were previously.</p>
</section>
<section id="repeat-the-analysis-for-another-molecule" class="level1">
<h1>Repeat the analysis for another molecule</h1>
<div id="cell-54" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rivaroxaban</span></span>
<span id="cb42-2">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O=C(NC[C@H]1CN(c2ccc(N3CCOCC3=O)cc2)C(=O)O1)c1ccc(Cl)s1'</span>)</span>
<span id="cb42-3">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-55" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">mh2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.AddHs(m2)</span>
<span id="cb43-2">rdDistGeom.EmbedMultipleConfs(mh2,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,params)</span>
<span id="cb43-3">mh2_mmff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mh2)</span>
<span id="cb43-4">optRes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdForceFieldHelpers.MMFFOptimizeMoleculeConfs(mh2_mmff,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb43-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,needsMore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(optRes):</span>
<span id="cb43-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> needsMore:</span>
<span id="cb43-7">        needsMore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdForceFieldHelpers.MMFFOptimizeMolecule(mh2_mmff,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)</span></code></pre></div>
</div>
<div id="cell-56" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">eres,charges2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runEHT(mh2)</span>
<span id="cb44-2">eres,mmff_charges2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runEHT(mh2_mmff)</span></code></pre></div>
</div>
<div id="cell-57" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb45-2">plt.violinplot(charges2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ETKDG"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom ID'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"partial charge"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Less variability than we had with the ETKDG conformers of imatinib, but there is still some. This almost entirely vanishes when using the MMFF-optimized conformers:</p>
<div id="cell-59" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb46-2">plt.violinplot(mmff_charges2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MMFF"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom ID'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"partial charge"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-36-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Confirm again that the MMFF conformers actually different:</p>
<div id="cell-61" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">rmsds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb47-2">cp1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mh2_mmff)</span>
<span id="cb47-3">cp2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mh2_mmff)</span>
<span id="cb47-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mh2_mmff.GetNumConformers()):</span>
<span id="cb47-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,mh2_mmff.GetNumConformers()):</span>
<span id="cb47-6">        rmsds.append(rdMolAlign.GetBestRMS(cp1,cp2,prbId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,refId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>j))</span>
<span id="cb47-7">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb47-8">plt.hist(rmsds,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RMSD'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-37-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>They are.</p>
</section>
<section id="performance" class="level1">
<h1>Performance</h1>
<p>How long does it take to do this analysis?</p>
<p>Start by looking at the time required to generate a conformer:</p>
<div id="cell-65" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">tempM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mh2)</span>
<span id="cb48-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMolecule(tempM,params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>22 ms ± 164 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>Or to generate a conformer and MMFF minimize it:</p>
<div id="cell-67" class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMolecule(tempM,params)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>rdForceFieldHelpers.MMFFOptimizeMolecule(tempM,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>40.3 ms ± 391 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>Do the eHT calculation:</p>
<div id="cell-69" class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdEHTTools.RunMol(tempM)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>19.4 ms ± 51.5 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>So we can generate a conformer for rivaroxaban, MMFF minimize it, and then do the eHT calculation to get, for example, partial charges (remember these don’t seem to change that much across MMFF conformers) in about 60ms. Not bad!</p>


</section>

 ]]></description>
  <category>tutorial</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit.html</guid>
  <pubDate>Thu, 29 May 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/eHT-in-RDKit-1.png" medium="image" type="image/png" height="99" width="144"/>
</item>
<item>
  <title>Common chemical words II</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-05-22-common-chemical-words-2.html</link>
  <description><![CDATA[ 




<section id="common-chemical-fragments-2-morgan-bits" class="level1">
<h1>Common Chemical Fragments 2: Morgan bits</h1>
<p>This post is a followup to the recent post looking at the <a href="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1.html">1000 most common “chemical words” in PubChem Compound</a>. Here we use the same data set but look at how often circular atom environments (expressed via Morgan fingerprint bits) occur across all of the compounds.</p>
<p>The PubChem team has done a much deeper and more thorough analysis of the <a href="https://link.springer.com/article/10.1186/s13321-015-0076-4">atom environments in PubChem Compound</a>; it’s definitely worth reading that paper if you are interested in this stuff.</p>
<div id="cell-2" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-05-09T06:29:01.006773Z&quot;,&quot;start_time&quot;:&quot;2025-05-09T06:29:01.003719Z&quot;}" data-scrolled="true" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BRICS</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os,time,glob</span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>( time.asctime())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.2
Thu May 22 08:14:31 2025</code></pre>
</div>
</div>
<p>The <a href="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1.html">earlier blog post</a> includes the code for how I processed the molecules, generated fingerprints, and counted bits.</p>
</section>
<section id="initial-workup-of-the-results" class="level1">
<h1>Initial workup of the results</h1>
<section id="how-many-unique-bits-are-there" class="level2">
<h2 class="anchored" data-anchor-id="how-many-unique-bits-are-there">How many unique bits are there?</h2>
<p>Here we look at the fingerprint results.</p>
<p>Start by looking at how we stored the data. For that we just need to read from one of the files:</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle, gzip</span>
<span id="cb3-2">infs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/fileserver/pine/pine1/glandrum/pubchem/Compound/Compound*.pkl.gz'</span>)</span>
<span id="cb3-3">inf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(infs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>)</span>
<span id="cb3-4">brics,fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(inf)</span></code></pre></div>
</div>
<p>The <code>fps</code> variable contains a Counter keyed by (bit ID, atomic number of central atom, radius). I used this triple instead of just the bit ID to minimize problems with collisions.</p>
<div id="cell-8" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fps.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>(10565946, 8, 1)</code></pre>
</div>
</div>
<p>The values of the counter object are the number of times the feature occurs in the file:</p>
<div id="cell-10" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">fps[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10565946</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>3232</code></pre>
</div>
</div>
<p>To get the full set of counts we need to process each of the pickle files and create one giant dictionary. This takes a while:</p>
<div id="cell-12" class="cell" data-scrolled="true" data-execution_count="11">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle, gzip</span>
<span id="cb8-2"></span>
<span id="cb8-3">infs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/fileserver/pine/pine1/glandrum/pubchem/Compound/Compound*.pkl.gz'</span>)</span>
<span id="cb8-4">all_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter()</span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,fname <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(infs):</span>
<span id="cb8-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,fname,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(all_counts.keys()))</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(fname,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb8-8">        _,fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(inf)</span>
<span id="cb8-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key,val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps.items():</span>
<span id="cb8-10">        all_counts[key]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>val</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_099000001_099500000.pkl.gz 0
2 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_016000001_016500000.pkl.gz 62435
3 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_000000001_000500000.pkl.gz 924475
&lt;snip&gt;
345 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_170500001_171000000.pkl.gz 88512548
346 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_171000001_171500000.pkl.gz 88920358</code></pre>
</div>
</div>
<p>Save that so that we don’t have to repeat the work if we need to use the data again;</p>
<div id="cell-14" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/chemical_words_pubchem_counts_fps.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb10-2">    pickle.dump(all_counts,outf)</span></code></pre></div>
</div>
<p>Get the bit information + counts in sorted order:</p>
<div id="cell-16" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">itms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(((y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_counts.items()),reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(itms)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>89174476</code></pre>
</div>
</div>
<p>So we got around 89 million unique bits (circular atom environments) from the dataset.</p>
<p>Let’s look at the most and least frequent bits:</p>
<div id="cell-18" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">itms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>[(638213325, (3218693969, 6, 0)),
 (514726494, (3217380708, 6, 0)),
 (344587626, (951226070, 6, 1)),
 (236172134, (2968968094, 6, 0)),
 (228100149, (2245384272, 6, 0)),
 (227187604, (2246728737, 6, 0)),
 (155556500, (864942730, 8, 0)),
 (143987378, (98513984, 6, 1)),
 (105456574, (2246699815, 6, 0)),
 (93444163, (1510328189, 8, 1))]</code></pre>
</div>
</div>
<p>To understand that output: The most common bit, #3218693969, occurs 638213325 times in the dataset. The bit itself is radius zero, centered on a C. The third most common bit, #951226070, is a radius one bit centered on C.</p>
<div id="cell-20" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itms <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>42140583</code></pre>
</div>
</div>
<p>There are &gt;42 million bits that only occur one time, so looking at any of those in detail is probably not particularly informative.</p>
<p>When I looked at the BRICS results, it was easy to look at exactly what the fragments themselves were since we had a SMILES for each fragment. That is not the case here, in order to get more information about a particular bit, we have to actually find molecules that set it and then extract the info from them.</p>
<p>Here’s code to do that:</p>
<div id="cell-23" class="cell" data-execution_count="84">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb17-2">fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_fp(m):</span>
<span id="cb17-6">    ao <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.AdditionalOutput()</span>
<span id="cb17-7">    ao.AllocateBitInfoMap()</span>
<span id="cb17-8">    fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetSparseCountFingerprint(m, additionalOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ao)</span>
<span id="cb17-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fp,ao</span>
<span id="cb17-10">    </span>
<span id="cb17-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> find_atom_envs_for_bits(bits,fns):</span>
<span id="cb17-12">    needed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(bits)</span>
<span id="cb17-13">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb17-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tpl <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> needed:</span>
<span id="cb17-15">        res[tpl] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb17-16"></span>
<span id="cb17-17">    blocker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdBase.BlockLogs()</span>
<span id="cb17-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fns:</span>
<span id="cb17-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(fn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb17-20">            suppl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.ForwardSDMolSupplier(inf)</span>
<span id="cb17-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> suppl:</span>
<span id="cb17-22">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> m.GetNumHeavyAtoms() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>:</span>
<span id="cb17-23">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb17-24">                fp,ao <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_fp(m)</span>
<span id="cb17-25">                imap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ao.GetBitInfoMap()</span>
<span id="cb17-26">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tpl <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> needed:</span>
<span id="cb17-27">                    bid,anum,rad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpl</span>
<span id="cb17-28">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> bid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> imap:</span>
<span id="cb17-29">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> aid, irad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> imap[bid]:</span>
<span id="cb17-30">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> irad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> rad:</span>
<span id="cb17-31">                                ianum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.GetAtomWithIdx(aid).GetAtomicNum()</span>
<span id="cb17-32">                                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ianum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> anum:</span>
<span id="cb17-33">                                    res[tpl] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (m,aid,irad)</span>
<span id="cb17-34">                                    needed.remove(tpl)</span>
<span id="cb17-35">                                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb17-36">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> needed:</span>
<span id="cb17-37">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb17-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> needed:</span>
<span id="cb17-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb17-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="cell-24" class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">sdfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/fileserver/pine/pine1/glandrum/pubchem/Compound/Compound*.sdf.gz'</span>)</span>
<span id="cb18-2">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_atom_envs_for_bits([x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]],sdfs)</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure the results are in the same order so that our legends are correct</span></span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(t.keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>[x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itms[:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t)]]</span></code></pre></div>
</div>
<p>And now draw the top 20 environments:</p>
<div id="cell-26" class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVG</span>
<span id="cb19-2">m,aid,rad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(t.values())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb19-3">SVG(Draw.DrawMorganEnvs(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(t.values()),molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itms[:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t)]]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-22-common-chemical-words-2_files/figure-html/cell-13-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This is pretty fast for the common bits (since it’s easy to find a matching molecule), but is potentially considerably more time consuming for less common bits.</p>
<p>Those are all radius 0-2, what is the most common radius 3 bit?</p>
<div id="cell-29" class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx,(cnt,(bid,anum,rad)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(itms):</span>
<span id="cb20-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> rad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb20-3">        b3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bid</span>
<span id="cb20-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'rad=3 rank=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, cnt=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cnt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, anum=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>anum<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb20-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>rad=3 rank=40, cnt=21759201, anum=6</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_atom_envs_for_bits([itms[idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]],sdfs)</span>
<span id="cb22-2">SVG(Draw.DrawMorganEnvs(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(t.values()),molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itms[:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t)]]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-22-common-chemical-words-2_files/figure-html/cell-15-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>What about the top three radius 2 and radius 3 bits?</p>
<div id="cell-32" class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">idx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-2">idx3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx,(cnt,(bid,anum,rad)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(itms):</span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(idx3)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> rad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb23-5">        idx3.append(idx)</span>
<span id="cb23-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'rad=3 rank=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, cnt=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cnt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, anum=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>anum<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb23-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(idx2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> rad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb23-8">        idx2.append(idx)</span>
<span id="cb23-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'rad=2 rank=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, cnt=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cnt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, anum=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>anum<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb23-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(idx2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(idx3)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb23-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>rad=2 rank=10, cnt=92845679, anum=6
rad=2 rank=38, cnt=21958195, anum=6
rad=3 rank=40, cnt=21759201, anum=6
rad=2 rank=45, cnt=19440929, anum=6
rad=3 rank=69, cnt=12502015, anum=6
rad=3 rank=83, cnt=11288141, anum=6</code></pre>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="94">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">allidxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> idx3</span>
<span id="cb25-2">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_atom_envs_for_bits([itms[idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> allidxs],sdfs)</span>
<span id="cb25-3">SVG(Draw.DrawMorganEnvs(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(t.values()),molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itms[:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t)]]))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="94">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-22-common-chemical-words-2_files/figure-html/cell-17-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It’s not terribly surprising that these all involve phenyl rings.</p>
<p>Finding less common bits than these starts to take quite a long time, so I will stop here.</p>


</section>
</section>

 ]]></description>
  <category>exploration</category>
  <category>fingerprints</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-05-22-common-chemical-words-2.html</guid>
  <pubDate>Wed, 21 May 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/common-chemical-words-2.png" medium="image" type="image/png" height="57" width="144"/>
</item>
<item>
  <title>Using custom fingerprints in PostgreSQL</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-05-17-custom-fingerprints-in-postgresql.html</link>
  <description><![CDATA[ 




<p>This is an updated and lightly revised version of an <a href="https://rdkit.blogspot.com/2017/04/using-custom-fingerprint-in-postgresql.html">older post</a>.</p>
<p>A <a href="http://www.mail-archive.com/rdkit-discuss@lists.sourceforge.net/msg06764.html">question</a> recently came up on the mailing list about how to use custom fingerprints with the RDKit PostgreSQL cartridge without having to edit the cartridge code itself. Since the answer isn’t trivial but may be useful to others, I’m doing a blog post with the answer.</p>
<p>We’ll start the usual way, with a bunch of imports. In the interests of being maximally explicit and having this whole notebook be normal Python code, I’m handling the database connection with the usual psycopg2 connector to PostgreSQL.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> psycopg2</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.2</code></pre>
</div>
</div>
<p>Read in a set of molecule data that we’ve used before:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/chembl16_2010-2012.smi'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb3-2">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x.strip().split() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> inf]</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>234681</code></pre>
</div>
</div>
<p>Establish a connection to the database we’ll use and insert that data:</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psycopg2.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdkit_blog_demo'</span>)</span>
<span id="cb5-2">curs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb5-3">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create extension if not exists rdkit'</span>)</span>
<span id="cb5-4">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table if exists raw_data'</span>)</span>
<span id="cb5-5">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table raw_data (smiles text,molregno int)'</span>)</span>
<span id="cb5-6">curs.executemany(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into raw_data values (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>,data)</span>
<span id="cb5-7">conn.commit()</span></code></pre></div>
</div>
<p>Create a molecule table with the first 10K rows (we don’t need all the data for the purposes of this post):</p>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table if exists mols'</span>)</span>
<span id="cb6-2">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select molregno,mol_from_smiles(smiles::cstring) as m into mols from raw_data limit 10000'</span>)</span>
<span id="cb6-3">conn.commit()</span></code></pre></div>
</div>
<p>Now generate our custom fingerprints for those molecules. We’re using the topological torsion form of Sheridan’s physicochemical property fingerprints (https://doi.org/10.1021/ci950274j).</p>
<p>These are just standard topological torsion FPs with different atom types.</p>
<p>Here’s an example of the atom types:</p>
<div id="cell-11" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.AtomPairs <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sheridan</span>
<span id="cb7-2">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OCCCN'</span>)</span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(Sheridan.AssignPattyTypes(mol))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['POL', 'HYD', 'HYD', 'HYD', 'CAT']</code></pre>
</div>
</div>
<div id="cell-12" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb9-2">fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetTopologicalTorsionGenerator()</span>
<span id="cb9-3"></span>
<span id="cb9-4">fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grab the molecules, we're pulling them out of the database in their pickled form:</span></span>
<span id="cb9-6">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select molregno,mol_send(m) from mols limit 10000'</span>)</span>
<span id="cb9-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> molregno,pkl <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> curs.fetchall():</span>
<span id="cb9-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pkl <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb9-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># construct a molecule</span></span>
<span id="cb9-10">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(pkl.tobytes())</span>
<span id="cb9-11">    typs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Sheridan.typMap[x] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Sheridan.AssignPattyTypes(m)]</span>
<span id="cb9-12">    fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetFingerprint(m,customAtomInvariants<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>typs)</span>
<span id="cb9-13">    fps.append((molregno,fp))</span></code></pre></div>
</div>
<p>Now insert the fingerprints into the database, we do this by sending a byte string to the database using <code>DataStructs.BitVectToBinaryText()</code> on the python side and then converting that into a bit vector in the database using the function <code>bfp_from_binary_text()</code>:</p>
<div id="cell-14" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drop table if exists fps'</span>)</span>
<span id="cb10-2">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'create table fps (molregno int, btfp bfp)'</span>)</span>
<span id="cb10-3">curs.executemany(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'insert into fps values (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,bfp_from_binary_text(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">))'</span>,</span>
<span id="cb10-4">                 [(x,DataStructs.BitVectToBinaryText(y)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps])</span>
<span id="cb10-5">conn.commit()</span></code></pre></div>
</div>
<p>If this were a larger database I’d also create an index on the fingerprint column in order to speed similarity searches up a bit, but since this one’s small we’ll skip that.</p>
<p>And here’s how you do a query:</p>
<div id="cell-17" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fps[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb11-2">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'set rdkit.tanimoto_threshold=0.6'</span>)</span>
<span id="cb11-3">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select molregno,m from mols join fps using (molregno) where btfp</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">bfp_from_binary_text(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>,</span>
<span id="cb11-4">             (DataStructs.BitVectToBinaryText(fp),))</span>
<span id="cb11-5">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> curs.fetchall()</span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>2</code></pre>
</div>
</div>
<p>It’s always good to test that we’re getting the right answers, so let’s verify that by repeating the same process in Python (just to be sure we did everything right!):</p>
<div id="cell-19" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (x,y) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> DataStructs.TanimotoSimilarity(y,fp)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>2</code></pre>
</div>
</div>
<p>Pull back some similarity values:</p>
<div id="cell-21" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select molregno,tanimoto_sml(btfp,bfp_from_binary_text(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)) from fps limit 10'</span>,</span>
<span id="cb15-2">             (DataStructs.BitVectToBinaryText(fp),))</span>
<span id="cb15-3">curs.fetchall()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>[(23, 0.15217391304347827),
 (97, 0.1643835616438356),
 (115, 0.21428571428571427),
 (146, 0.2054794520547945),
 (147, 0.15517241379310345),
 (148, 0.1),
 (173, 0.21818181818181817),
 (194, 0.13559322033898305),
 (213, 0.2982456140350877),
 (205, 0.19696969696969696)]</code></pre>
</div>
</div>
<p>And again, just a test, ensure that we’re getting the same thing we’d see in Python:</p>
<div id="cell-23" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">[(x,DataStructs.TanimotoSimilarity(y,fp)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (x,y) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>[(23, 0.15217391304347827),
 (97, 0.1643835616438356),
 (115, 0.21428571428571427),
 (146, 0.2054794520547945),
 (147, 0.15517241379310345),
 (148, 0.1),
 (173, 0.21818181818181817),
 (194, 0.13559322033898305),
 (213, 0.2982456140350877),
 (205, 0.19696969696969696)]</code></pre>
</div>
</div>
<p>That’s it. Not particularly complicated, but still a useful thing to know how to do. Following this approach, any bit vector fingerprint (even one’s generated outside of the RDKit) can be inserted into PostgreSQL tables and then searched using the RDKit cartridge.</p>



 ]]></description>
  <category>cartridge</category>
  <category>fingerprints</category>
  <category>tutorial</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-05-17-custom-fingerprints-in-postgresql.html</guid>
  <pubDate>Fri, 16 May 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Common chemical words</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1.html</link>
  <description><![CDATA[ 




<section id="common-chemical-fragments-1-building-the-dataset" class="level1">
<h1>Common Chemical Fragments 1: building the dataset</h1>
<p><strong>Note</strong> this is an extensively revised and updated version of an <a href="https://rdkit.blogspot.com/2016/04/common-chemical-words-1.html">older post</a>.</p>
<p>I got a copy of <a href="http://www.amazon.com/Thing-Explainer-Complicated-Stuff-Simple/dp/0544668251">Thing Explainer</a> a while ago and I think it’s pure genius (not that surprising from Randall Munroe). With my thinking infected by reading the book, the other day I wondered what the ten hundred most common “chemical words” are.</p>
<p>After a bit of extremely deep thinking I decided that I would be willing to accept that a “chemical word” is the kind of fragment that comes out of something like BRICS (or RECAP) decomposition of a molecule.</p>
<p>This post takes that simple idea and applies it to a big database of molecules: the almost 120 million molecules that are in <a href="https://pubchem.ncbi.nlm.nih.gov/docs/compounds">PubChem Compound</a></p>
<div id="cell-2" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-05-09T06:29:01.006773Z&quot;,&quot;start_time&quot;:&quot;2025-05-09T06:29:01.003719Z&quot;}" data-execution_count="75">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BRICS</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os,time,glob</span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>( time.asctime())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.2
Fri May  9 15:38:37 2025</code></pre>
</div>
</div>
</section>
<section id="background-on-brics" class="level1">
<h1>Background on BRICS</h1>
<p>Before diving into the analysis, a bit of explanation about BRICS.</p>
<p>Let’s start with the reference: Degen, J., Wegscheid-Gerlach, C., Zaliani, A. &amp; Rarey, M. “On the Art of Compiling and Using ‘Drug-Like’ Chemical Fragment Spaces”. <em>ChemMedChem</em> <strong>3</strong>:1503–07 (2008).</p>
<p>The idea is to fragment molecules based on synthetically accessible bonds. Here’s an example starting from a random ZINC molecule, ZINC00002139:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC[NH+](CC)CCOc1ccc(cc1)Cc2ccccc2'</span>)</span>
<span id="cb3-2">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And here are the fragments from doing a BRICS analysis:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pieces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> BRICS.BRICSDecompose(m)]</span>
<span id="cb4-2">Draw.MolsToGridImage(pieces,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The isotope labels on the molecules provide information about the type of bond that was broken and can be used later (using <code>BRICS.BRICSBuild()</code>) to build new molecules. For example, the rules allow a bond to be formed between an atom connected to a <code>[4*]</code> and an atom connected to a <code>[5*]</code>.</p>
<p>One important characteristic (I hesitate to use “feature” in this context) of the current RDKit BRICS implementation that impacts this analysis is that only unique fragments are returned. So we only get one <code>[4*]CC</code> fragment for that molecule above, even though it appears in the molecule twice.</p>
<p>So the analysis below is of the most common chemical words, but we only count frequency based on the number of molecules they appear in, not <em>how often</em> they appear in those molecules.</p>
</section>
<section id="the-computation" class="level1">
<h1>The computation</h1>
<p>Dealing with 120 million molecules takes a long time, so I ran this on the compute cluster at the ETH.</p>
<p>The script I ran was:</p>
<pre><code>from rdkit import Chem
import gzip
from collections import Counter
import dbm.sqlite3
import pickle
from rdkit.Chem import BRICS
from rdkit.Chem import rdFingerprintGenerator
from rdkit import RDLogger
import traceback

RDLogger.DisableLog('rdApp.*')


def process_filename(filename):
    outname = filename.replace('.sdf.gz', '.pkl.gz')
    with gzip.open(filename, 'rb') as inf:
        suppl = Chem.ForwardSDMolSupplier(inf)

        brics_cntr = Counter()
        fp_cntr = Counter()
        fpg = rdFingerprintGenerator.GetMorganGenerator(
            radius=3, includeRedundantEnvironments=True)
        ao = rdFingerprintGenerator.AdditionalOutput()
        ao.AllocateBitInfoMap()
        for m in suppl:
            if m is None or m.GetNumHeavyAtoms() &gt; 60:
                continue
            try:
                brics_cntr.update(BRICS.BRICSDecompose(m))
            except:
                traceback.print_exc()
            try:
                fp = fpg.GetSparseCountFingerprint(m, additionalOutput=ao)
                for k, itms in ao.GetBitInfoMap().items():
                    for aid, rad in itms:
                        anum = m.GetAtomWithIdx(aid).GetAtomicNum()
                        fp_cntr[(k, anum, rad)] += 1
            except:
                traceback.print_exc()
    with gzip.open(outname, 'wb+') as outf:
        pickle.dump((brics_cntr, fp_cntr), outf)


if __name__ == '__main__':
    import sys
    if len(sys.argv) != 2:
        print("Usage: python common_words.py &lt;filename&gt;")
        sys.exit(1)
    filename = sys.argv[1]
    process_filename(filename)</code></pre>
<p>I downloaded all of the files on the <a href="https://ftp.ncbi.nlm.nih.gov/pubchem/Compound/CURRENT-Full/SDF/">PubChem Compound FTP site</a> and ran this script over all of them. I did the download in the beginning of March 2025.</p>
</section>
<section id="initial-workup-of-the-results" class="level1">
<h1>Initial workup of the results</h1>
<section id="how-many-unique-fragments-are-there" class="level2">
<h2 class="anchored" data-anchor-id="how-many-unique-fragments-are-there">How many unique fragments are there?</h2>
<p>Here we look at the BRICS results. To get this we need to process each of the pickle files and create one giant dictionary:</p>
<div id="cell-10" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle, gzip</span>
<span id="cb6-2"></span>
<span id="cb6-3">infs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/fileserver/pine/pine1/glandrum/pubchem/Compound/Compound*.pkl.gz'</span>)</span>
<span id="cb6-4">all_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter()</span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,fname <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(infs):</span>
<span id="cb6-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,fname,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(all_counts.keys()))</span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(fname,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb6-8">        brics,fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(inf)</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key,val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> brics.items():</span>
<span id="cb6-10">        all_counts[key]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>val</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_099000001_099500000.pkl.gz 0
2 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_016000001_016500000.pkl.gz 3251
3 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_000000001_000500000.pkl.gz 64482
4 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_016500001_017000000.pkl.gz 239405
5 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_000500001_001000000.pkl.gz 268616
&lt;snip&gt;
342 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_169000001_169500000.pkl.gz 12495796
343 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_169500001_170000000.pkl.gz 12558993
344 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_170000001_170500000.pkl.gz 12654835
345 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_170500001_171000000.pkl.gz 12737600
346 /fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_171000001_171500000.pkl.gz 12802580</code></pre>
</div>
</div>
<p>Save that so that we don’t have to repeat the work if we need to use the data again;</p>
<div id="cell-12" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/chemical_words_pubchem_counts.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb8-2">    pickle.dump(all_counts,outf)</span></code></pre></div>
</div>
<div id="cell-13" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">itms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(((y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_counts.items()),reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(itms)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>12844456</code></pre>
</div>
</div>
<p>So we got 12.8 million unique fragments from the dataset.</p>
<p>Let’s look at the most and least frequent fragments:</p>
<div id="cell-15" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">itms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>[(43898772, '[5*]N[5*]'),
 (28006855, '[3*]O[3*]'),
 (23939213, '[1*]C([6*])=O'),
 (22712171, '[4*]C[8*]'),
 (20245516, '[3*]OC'),
 (15796593, '[16*]c1ccccc1'),
 (12147606, '[16*]c1ccc([16*])cc1'),
 (10425580, '[4*]CC'),
 (6985560, '[1*]C([1*])=O'),
 (6860503, '[5*]N([5*])[5*]')]</code></pre>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">itms[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>[(1, 'B#C.CC1CCCCC1C'),
 (1, 'B#C.CC.Cc1ccc(C)c(C)c1'),
 (1, 'B#C.CC.CC.CC#CC#CCCC.CCC(C)(C)C'),
 (1, 'B#C'),
 (1, 'B#B.[Ti]'),
 (1, 'B#B.CSC'),
 (1, 'B#B.C1CCOC1'),
 (1, 'B#B.B#B.[Ho]'),
 (1, 'B#B'),
 (1, 'B')]</code></pre>
</div>
</div>
<p>It’s nicer to actually look at the molecules:</p>
<div id="cell-18" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">tc,ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>itms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb15-2">Draw.MolsToGridImage([Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ts],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">tc,ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>itms[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:])</span>
<span id="cb16-2">Draw.MolsToGridImage([Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ts],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Ew… those aren’t particularly nice. Good thing we won’t be doing much with them.</p>
<p>Look at the number of times each frequency appears:</p>
<div id="cell-22" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> summarize(pts,maxCount<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e7</span>):</span>
<span id="cb17-3">    bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(math.ceil(math.log10(maxCount)))</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cnt,smi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> itms:</span>
<span id="cb17-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cnt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>maxCount:</span>
<span id="cb17-6">            bins[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-8">            bins[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(math.floor(math.log10(cnt)))]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> bins</span>
<span id="cb17-10">bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>summarize(itms)</span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb18-2">plt.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(bins))),bins,lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-3">plt.yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb18-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log10(freq)'</span>)</span>
<span id="cb18-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a href="https://en.wikipedia.org/wiki/Log%E2%80%93log_plot">The wikipedia says</a> I’m not supposed to call that a power-law distribution, so I’ll go with “power-law-like”. Is that a thing?</p>
<p>Let’s clean up the data a little bit: remove molecules without attachment points and then get rid of the isomeric markers that describe what type of bond was broken:</p>
<div id="cell-25" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb19-2">expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'[0-9]+\*'</span>)</span>
<span id="cb19-3">clean_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter()</span>
<span id="cb19-4">nRejected<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_counts.items():</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb19-7">        nRejected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb19-9">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>,k)</span>
<span id="cb19-10">    clean_counts[k]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>v</span></code></pre></div>
</div>
<div id="cell-26" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">clean_itms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(v,k) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> clean_counts.items()],reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(clean_itms))</span>
<span id="cb20-3">clean_itms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>7489755</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>[(43898772, '[*]N[*]'),
 (32071817, '[*]C[*]'),
 (31711137, '[*]C([*])=O'),
 (28006855, '[*]O[*]'),
 (20245516, '[*]OC'),
 (15883682, '[*]CC'),
 (15796593, '[*]c1ccccc1'),
 (12147606, '[*]c1ccc([*])cc1'),
 (11640436, '[*]C(=O)C[*]'),
 (9657106, '[*]CC[*]')]</code></pre>
</div>
</div>
<p>Most frequent fragments:</p>
<div id="cell-28" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">tc,ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>clean_itms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb23-2">Draw.MolsToGridImage([Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ts],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Least frequent:</p>
<div id="cell-30" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">clean_itms[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>[(1, '[*]/C(=[O+]/[H])C(C)CCC([*])=O'),
 (1, '[*]/C(=[O+]/[H])C(C)CC(C)C'),
 (1, '[*]/C(=[O+]/[H])C(C)CC(C)(C)C'),
 (1, '[*]/C(=[O+]/[H])C(C)C/C([*])=[O+]/[H]'),
 (1, '[*]/C(=[O+]/[H])C(C)C(C)C'),
 (1, '[*]/C(=[O+]/[H])C(C)/C([*])=[O+]/[H]'),
 (1, '[*]/C(=[O+]/[H])C(C)(CC(C)(C)C)C(C)(C)C'),
 (1, '[*]/C(=[O+]/[H])C(C)(C)C(C)(N)N'),
 (1, '[*]/C(=[O+]/[H])C(C(C)=O)C(F)F'),
 (1, '[*]/C(=[O+]/[H])C(=C)C(F)(F)F')]</code></pre>
</div>
</div>
<div id="cell-31" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">tc,ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>clean_itms[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:])</span>
<span id="cb26-2">Draw.MolsToGridImage([Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ts],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Ok, so what about the 1000 most common BRICS fragments?</p>
<div id="cell-33" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">thousand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clean_itms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span></code></pre></div>
</div>
<div id="cell-34" class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb28-2"></span>
<span id="cb28-3">plt.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),[x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand],lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb28-4">plt.yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb28-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'freq'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That’s a steep drop off, but even the least common “word” appears &gt;30000 times in our dataset:</p>
<div id="cell-36" class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">thousand[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>(30196, '[*]c1cc(Br)c([*])c(Br)c1')</code></pre>
</div>
</div>
<p>How many attachment points do those fragments have?</p>
<div id="cell-38" class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb31-2">plt.hist([y.count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Who’s got 4?</p>
<div id="cell-40" class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb32-2">tc,ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tmp)</span>
<span id="cb32-3">Draw.MolsToGridImage([Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ts],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>What about 3?</p>
<div id="cell-42" class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb33-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tmp)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> examples'</span>)</span>
<span id="cb33-3">tc,ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tmp)</span>
<span id="cb33-4">Draw.MolsToGridImage([Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ts][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>78 examples</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="72">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-24-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>There are some examples in there that look like duplicates. That’s just happening because the removal of the isotopic labels has made some stereocenters look like they are no longer stereocenters when the SMILES is processed:</p>
<div id="cell-44" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">[[x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>[(480049, '[*]CC([*])[*]'), (232632, '[*]C([*])C[*]')]</code></pre>
</div>
</div>
<p>This is an inherent problem with the simple string-manipulation approach to removing the isotopes from the fragments. Let’s fix that problem by actually re-building the molecules. This will remove stereochemistry that is no longer present when the isotope labels are removed from the dummies.</p>
<p>We’ve got more than 7 million of these, so this next cell takes a while to run:</p>
<div id="cell-46" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RDLogger</span>
<span id="cb37-2">RDLogger.DisableLog(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdApp.*'</span>)</span>
<span id="cb37-3"></span>
<span id="cb37-4">clean_counts2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter()</span>
<span id="cb37-5">nRejected<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb37-6">fails <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb37-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_counts.items():</span>
<span id="cb37-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb37-9">        nRejected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb37-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb37-11">    tmol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(expr.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>,k))</span>
<span id="cb37-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tmol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb37-13">        fails.append((k,v))</span>
<span id="cb37-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb37-15">    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolToSmiles(tmol)</span>
<span id="cb37-16">    clean_counts2[k]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>v</span></code></pre></div>
</div>
<div id="cell-47" class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle,gzip</span>
<span id="cb38-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/chemical_words_clean_pubchem_counts2.pkl'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb38-3">    pickle.dump(clean_counts2,outf)</span></code></pre></div>
</div>
<div id="cell-48" class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">clean_itms2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(v,k) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> clean_counts2.items()],reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb39-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(clean_itms2),<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(clean_itms))</span>
<span id="cb39-3">thousand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clean_itms2[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>7377524 7489755</code></pre>
</div>
</div>
<p>So we did remove a few.</p>
<p>Let’s look at what’s left:</p>
<div id="cell-50" class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb41-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tmp)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> examples'</span>)</span>
<span id="cb41-3">tc,ts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tmp)</span>
<span id="cb41-4">Draw.MolsToGridImage([Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ts][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tc])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>75 examples</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="74">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-29-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Write out our thousand common chemical words, this file will be in the github repo:</p>
<div id="cell-52" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">outf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/thousand_words.pubchem.no_iso.smi'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w+'</span>)</span>
<span id="cb43-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tc,ts <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand:</span>
<span id="cb43-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ts,tc,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>outf)</span></code></pre></div>
</div>
<p>I’m going to want to use the ones that are still isotopically labeled later, so write those out too. This file will also be in the github repo:</p>
<div id="cell-54" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">t_itms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(v,k) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_counts.items()]</span>
<span id="cb44-2">iso_itms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(v,k) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v,k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> t_itms <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> k.count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb44-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(iso_itms))</span>
<span id="cb44-4">thousand_iso <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iso_itms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb44-5">outf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/thousand_words.pubchem.iso.smi'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w+'</span>)</span>
<span id="cb44-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tc,ts <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand_iso:</span>
<span id="cb44-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ts,tc,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>outf)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>7838372</code></pre>
</div>
</div>
<p>As a teaser, let’s make some new molecules:</p>
<div id="cell-56" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb46-2">thousand_iso_frags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(y) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> thousand_iso]</span>
<span id="cb46-3">new_mols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the building algorithm tends to explore around a given point, </span></span>
<span id="cb46-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so let's pick a number of starting points and enumerate a few molecules</span></span>
<span id="cb46-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># around each of them:</span></span>
<span id="cb46-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb46-8">    random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x12367</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i)</span>
<span id="cb46-9">    brics_gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BRICS.BRICSBuild(thousand_iso_frags)</span>
<span id="cb46-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(brics_gen) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)]:</span>
<span id="cb46-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb46-12">            Chem.SanitizeMol(tm)</span>
<span id="cb46-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb46-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb46-15">        new_mols.append(tm)</span>
<span id="cb46-16">Draw.MolsToGridImage(new_mols,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That’s enough for now…</p>


</section>
</section>

 ]]></description>
  <category>exploration</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-05-09-common-chemical-words-1.html</guid>
  <pubDate>Thu, 08 May 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/common-chemical-words-1.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>Constructing molecules more quickly</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-05-01-constructing-molecules-more-quickly.html</link>
  <description><![CDATA[ 




<p>This is an updated and lightly revised version of a <a href="https://rdkit.blogspot.com/2016/09/avoiding-unnecessary-work-and.html">quite old post</a>.</p>
<p>I have previously talked/posted about ways to construct RDKit molecules more quickly. This post revisits that topic.</p>
<p>By default the RDKit does a lot of work when constructing a molecule. The idea here is to set things up so that we only have to do that work once for a set of molecules that we’re going to work with repeatedly.</p>
<p>There’s also a diversion into thinking about what chemistry information is actually needed for things like substructure searching and tuning the molecule construction to only perceive that information.</p>
<blockquote class="blockquote">
<p>Aside 1: the timing information shown below was all generated on my laptop, a 2.5 year old Lenovo X1 Carbon (2.1GHz Intel Core i7) running Windows. I am, as usual, using the conda-forge RDKit builds.</p>
</blockquote>
<blockquote class="blockquote">
<p>Aside 2: there’s another blog post looking in more detail at <a href="https://greglandrum.github.io/rdkit-blog/posts/2022-12-09-timing-text-methods-for-serializing-mols.html">how long it takes to serialize/deserialize molecules with the RDKit</a></p>
</blockquote>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RDConfig</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os,gzip</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-5">rdBase.rdkitVersion</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'2025.03.1'</code></pre>
</div>
</div>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Start by reading in a set of ChEMBL molecules that we’ve used before and then reducing that to 50K examples.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x.strip().split() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/chembl16_2010-2012.smi'</span>)]</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ind)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>234681</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb5-2">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xf00d</span>)</span>
<span id="cb5-3">random.shuffle(ind)</span>
<span id="cb5-4">ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ind[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55000</span>]</span></code></pre></div>
</div>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">ms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ind:</span>
<span id="cb6-3">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb6-6">    ms.append(m)</span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ms)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>:</span>
<span id="cb6-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[09:46:30] Explicit valence for atom # 34 Cl, 4, is greater than permitted
[09:46:41] Explicit valence for atom # 29 Cl, 4, is greater than permitted</code></pre>
</div>
</div>
<p>Let’s get RDKit-generated representations of the molecules: - A molecule’s <code>ToBinary()</code> method returns a serialized form of the molecule that can be saved and then later efficiently converted back into a molecule. I typically call this the “pickled” form of the molecule because it’s what python’s <code>pickle</code> machinery uses (though if you actually pickle molecules they are a big larger and take a bit longer to restore). - RDKit SMILES - The RDKit’s JSON format. This is derived from Matt Swain’s <a href="https://github.com/CommonChem/CommonChem">commonchem</a>.</p>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pkls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x.ToBinary() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ms]</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">smis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolToSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ms]</span></code></pre></div>
</div>
<div id="cell-10" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">jsons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolToJSON(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ms]</span></code></pre></div>
</div>
</section>
<section id="timing-of-standard-parsing" class="level2">
<h2 class="anchored" data-anchor-id="timing-of-standard-parsing">Timing of standard parsing</h2>
<p>How long does it take to generate the molecules from SMILES?</p>
<div id="cell-12" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>14.6 s ± 316 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>And from the binary format?</p>
<div id="cell-14" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [Chem.Mol(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pkls]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.14 s ± 116 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [Chem.JSONToMols(x)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> jsons]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>4.69 s ± 334 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>That dramatic difference between SMILES and pickles isn’t really that surprising given that the binary format was designed to be easy to read in and that no chemistry perception needs to be done. The JSON format also avoids chemistry perception (all computed properties we need are stored in the JSON), but it does require some work to parse.</p>
<p>So the binary format is really efficient, but it’s not human readable and it’s only useable with the RDKit. It would be cool to be able to take advantage of the portability and readability of SMILES but to have the processing not take quite so long.</p>
<p>As an aside: another benefit of using SMILES, for at least some applications, is that they are an order of magnitude smaller than the binary format. The JSON format is even bigger, more than three times as big as the pickles:</p>
<div id="cell-18" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binary:"</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pkls))</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smiles:"</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis))</span>
<span id="cb17-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JSON:"</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> jsons))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>binary: 22808200
smiles: 3029652
JSON: 78812598</code></pre>
</div>
</div>
<p>Turning off the sanitization and chemistry perception when parsing from the SMILES makes a dramatic difference in processing time:</p>
<div id="cell-20" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [Chem.MolFromSmiles(x,sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3.04 s ± 108 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>Unfortunately, with no sanitization at all done, these molecules aren’t that useful in many of the RDKit algorithms.</p>
</section>
<section id="partial-sanitization" class="level2">
<h2 class="anchored" data-anchor-id="partial-sanitization">Partial sanitization</h2>
<p>One of the standard operations done on reading molecules from SMILES is a call to the stereochemistry assignment code, which also removes redundant or extraneous stereochemistry specifications. This can be computationally expensive and most likely not needed when reading from an RDKit-generated canonical SMILES since that already has had incorrect or redundant specifications removed.</p>
<p>Let’s see how long it takes if we skip that part (which is part of the call to <code>MolFromSmiles()</code>). We’ll make one other change here and also skip the various cleanup operations the RDKit does by default to fix problematic substructures during sanitization:</p>
<div id="cell-24" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> partialSanit1(smi):</span>
<span id="cb21-2">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smi,sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-3">    Chem.SanitizeMol(m,sanitizeOps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Chem.SANITIZE_ALL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^\</span></span>
<span id="cb21-4">                     Chem.SANITIZE_CLEANUPCHIRALITY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUPATROPISOMERS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUP_ORGANOMETALLICS)</span>
<span id="cb21-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> m</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [partialSanit1(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>9.91 s ± 259 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>That’s a solid reduction over the 14.6 seconds originally required, but is still a long way off the 3.0 seconds for the completely unsanitized version.</p>
<p>Since the RDKit SMILES contains information about aromaticity, we can also skip the kekulization and aromatization steps of the sanitization:</p>
<div id="cell-27" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> partialSanit2(smi):</span>
<span id="cb24-2">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smi,sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb24-3">    Chem.SanitizeMol(m,sanitizeOps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Chem.SANITIZE_ALL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^\</span></span>
<span id="cb24-4">                     Chem.SANITIZE_CLEANUPCHIRALITY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUPATROPISOMERS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUP_ORGANOMETALLICS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^\</span></span>
<span id="cb24-5">                     Chem.SANITIZE_KEKULIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_SETAROMATICITY)</span>
<span id="cb24-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> m</span></code></pre></div>
</div>
<div id="cell-28" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [partialSanit2(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>7.66 s ± 154 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>Even better.</p>
<p>We are still calling the ring-finding code, and sometimes we don’t need information about rings (for example, all substructure queries from SMILES and many queries from SMILES), so what if we skip that?</p>
<div id="cell-30" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> partialSanit3(smi):</span>
<span id="cb27-2">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smi,sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb27-3">    Chem.SanitizeMol(m,sanitizeOps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Chem.SANITIZE_ALL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^\</span></span>
<span id="cb27-4">                     Chem.SANITIZE_CLEANUPCHIRALITY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUPATROPISOMERS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_CLEANUP_ORGANOMETALLICS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^\</span></span>
<span id="cb27-5">                     Chem.SANITIZE_KEKULIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>Chem.SANITIZE_SETAROMATICITY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^\</span></span>
<span id="cb27-6">                     Chem.SANITIZE_SYMMRINGS)</span>
<span id="cb27-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> m</span></code></pre></div>
</div>
<div id="cell-31" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [partialSanit3(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>5.11 s ± 233 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>If we’re just concerned about doing substructure searches or generating RDKit fingerprints, this is still doing some extra work. Let’s go to the bare minimum of sanitization: only updating the explicit and implicit valences of the atoms. Here it’s less typing to just call the one function we need:</p>
<div id="cell-33" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> partialSanit4(smi):</span>
<span id="cb30-2">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smi,sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb30-3">    m.UpdatePropertyCache()</span>
<span id="cb30-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> m</span></code></pre></div>
</div>
<div id="cell-34" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [partialSanit4(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3.34 s ± 133 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>That’s pretty fast, and those molecules are actually useful for many, many calculations.</p>
<p>We can add some ring information by calling <code>FastFindRings()</code>. This algorithm provides reliable information about whether or not atoms or bonds are in rings - and so can help with basic ring-membership queries on atoms and bonds in SMARTS or for generating Pattern fingerprints or standard Morgan fingerprints- but doesn’t help with the number of smallest rings that an atom/bond is in.</p>
<div id="cell-36" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> partialSanit5(smi):</span>
<span id="cb33-2">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smi,sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb33-3">    m.UpdatePropertyCache()</span>
<span id="cb33-4">    Chem.FastFindRings(m)</span>
<span id="cb33-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> m</span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit [partialSanit5(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>4.08 s ± 86.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>I think those last two are pretty good. By thinking about the information we need and starting from a reliable SMILES (I often call these “trusted SMILES”) we can get molecules that are useful for many RDKit operations much more quickly than the default.</p>


</section>

 ]]></description>
  <category>tutorial</category>
  <category>optimization</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-05-01-constructing-molecules-more-quickly.html</guid>
  <pubDate>Wed, 30 Apr 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Specifying what changes in a reaction</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-04-26-specifying-changes-in-reactions.html</link>
  <description><![CDATA[ 




<p>This post provides an overview/tutorial about how to change atomic properties (identity, charge, H count, etc.) when providing reactions using reaction SMARTS.</p>
<p>Other sources of information about reaction SMARTS:</p>
<ul>
<li>The RDKit book has some <a href="https://www.rdkit.org/docs/RDKit_Book.html#reaction-smarts">reference material</a> about how reaction SMARTS are handled.</li>
<li>Phyo Phyo Kyaw Zin wrote a <a href="https://drzinph.com/learning-reaction-smarts-a-practical-guide-to-reaction-based-patterns/">blog post</a> with an overview of the RDKit’s reaction SMARTS and some tips. It’s worth a read.</li>
</ul>
<p>The focus here is on reactions specified using <a href="https://www.rdkit.org/docs/RDKit_Book.html#reaction-smarts">reaction SMARTS</a> since they are human readable (once you get used to them) and don’t take up a lot of space in the notebook, but many of the same rules apply when working with reactions that were specified using other formats like RXN.</p>
<div id="98389f23" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdChemReactions</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.1</code></pre>
</div>
</div>
<section id="which-features-are-used-to-match-atoms-in-smarts" class="level1">
<h1>Which features are used to match atoms in SMARTS?</h1>
<p>The general rule for SMARTS (<a href="https://www.rdkit.org/docs/RDKit_Book.html#atom-atom-matching-in-substructure-queries">as it is for atoms in molecules constructed from SMILES or mol blocks</a>) is that properties that are not explicitly specified in the query are not used in the matching.</p>
<p>So, the simple <code>N</code> query in the SMARTS here matches both atoms:</p>
<div id="e42b0769" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NCC[N+](C)(C)C'</span>).GetSubstructMatches(Chem.MolFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>((0,), (3,))</code></pre>
</div>
</div>
<p>If we specify a charge on the query N, we only matched the charged atom:</p>
<div id="3a39725e" class="cell" data-scrolled="true" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NCC[N+](C)(C)C'</span>).GetSubstructMatches(Chem.MolFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[N+]'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>((3,),)</code></pre>
</div>
</div>
<p>We can also specify that the N must have at least one H neighbor:</p>
<div id="f976ed29" class="cell" data-scrolled="true" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NCC[N+](C)(C)C'</span>).GetSubstructMatches(Chem.MolFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[N!H0]'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>((0,),)</code></pre>
</div>
</div>
<p>Or that it have no charge:</p>
<div id="c81a752a" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NCC[N+](C)(C)C'</span>).GetSubstructMatches(Chem.MolFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[N+0]'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>((0,),)</code></pre>
</div>
</div>
</section>
<section id="specifying-changes-in-reactions" class="level1">
<h1>Specifying changes in reactions</h1>
<div id="25b83ad9" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[NH+:1]&gt;&gt;[N:1]'</span>)</span>
<span id="cb11-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[NH+](C)C'</span>)</span>
<span id="cb11-3">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m,))</span>
<span id="cb11-4">Draw.MolsToGridImage([m,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]],legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactant'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'product'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-26-specifying-changes-in-reactions_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We didn’t specify what should change on the right-hand side, so the H-count and charge were preserved.</p>
<p>In order to get those to change, we need to be explicit about the H counts and charge on the product atoms:</p>
<div id="d25d7990" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[NH+:1]&gt;&gt;[NH0+0:1]'</span>)</span>
<span id="cb12-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[NH+](C)C'</span>)</span>
<span id="cb12-3">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m,))</span>
<span id="cb12-4">Draw.MolsToGridImage([m,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]],legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactant'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'product'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-26-specifying-changes-in-reactions_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The atomic properties that can be modified this way are: 1. Charge 2. H count 3. Isotope</p>
<p>Properties which are not specified on the reactant atom, but are specified on the product will also be modified. Here’s an example of using that to introduce an isotopic label into a molecule:</p>
<div id="70028047" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[C:1](=[O:2])[O:3]&gt;&gt;[13C:1](=[O:2])[O:3]'</span>)</span>
<span id="cb13-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(=O)O'</span>)</span>
<span id="cb13-3">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m,))</span>
<span id="cb13-4">Draw.MolsToGridImage([m,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]],legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactant'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'product'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-26-specifying-changes-in-reactions_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="chirality-and-reactions" class="level2">
<h2 class="anchored" data-anchor-id="chirality-and-reactions">Chirality and reactions</h2>
<p>As is typical with stereochemistry, things get more complicated if you want to work with chirality in your reactions.</p>
<div id="1f132d86" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[*:1][C@:2][F:3]&gt;&gt;[*:1][C@@:2][O:3]'</span>)</span>
<span id="cb14-2">m1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@H](F)Cl'</span>)</span>
<span id="cb14-3">ps1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m1,))</span>
<span id="cb14-4">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@@H](F)Cl'</span>)</span>
<span id="cb14-5">ps2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m2,))</span>
<span id="cb14-6">m3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[CH](F)Cl'</span>)</span>
<span id="cb14-7">ps3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m3,))</span>
<span id="cb14-8"></span>
<span id="cb14-9">Draw.MolsToGridImage([m1,ps1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],m2,ps2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],m3,ps3[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]],legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactant'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'product'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-26-specifying-changes-in-reactions_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Similarly, if the chiral specification is the same in reactants and in products, then stereochemistry will be preserved:</p>
<div id="d249f5ed" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[*:1][C@:2][F:3]&gt;&gt;[*:1][C@:2][O:3]'</span>)</span>
<span id="cb15-2">m1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@H](F)Cl'</span>)</span>
<span id="cb15-3">ps1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m1,))</span>
<span id="cb15-4">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@@H](F)Cl'</span>)</span>
<span id="cb15-5">ps2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m2,))</span>
<span id="cb15-6"></span>
<span id="cb15-7">Draw.MolsToGridImage([m1,ps1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],m2,ps2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]],legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactant'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'product'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-26-specifying-changes-in-reactions_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Finally, if you want to actually take the chirality into account during the reaction, you can do so by changing the substructure match parameters for the reaction and providing the full coordination environment of the atom to be modified:</p>
<div id="12a57eae" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[C:1][C@:2]([F:3])[*:4]&gt;&gt;[*:1][C@@:2]([O:3])[*:4]'</span>)</span>
<span id="cb16-2">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.GetSubstructParams()</span>
<span id="cb16-3">ps.useChirality <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">m1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@H](F)Cl'</span>)</span>
<span id="cb16-6">ps1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m1,))</span>
<span id="cb16-7">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@@H](F)Cl'</span>)</span>
<span id="cb16-8">ps2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants((m2,))</span>
<span id="cb16-9">p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ps2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ps2 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb16-10"></span>
<span id="cb16-11">Draw.MolsToGridImage([m1,ps1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],m2,p2],legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactant'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'product'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-26-specifying-changes-in-reactions_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Here the second reactant doesn’t match since the stereochemistry is wrong.</p>


</section>
</section>

 ]]></description>
  <category>tutorial</category>
  <category>reactions</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-04-26-specifying-changes-in-reactions.html</guid>
  <pubDate>Fri, 25 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/specifying-changes-in-reactions-1.png" medium="image" type="image/png" height="48" width="144"/>
</item>
<item>
  <title>Explaining enhanced stereochemistry</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo.html</link>
  <description><![CDATA[ 




<p>A while ago I did a blog post with an <a href="https://greglandrum.github.io/rdkit-blog/posts/2023-11-19-explaining-stereo-groups.html">introduction to stereo groups and enhanced stereochemistry</a>. The basic idea of enhanced stereo isn’t particularly complicated, but interpreting what a given enhanced stereo specification with more than one stereo group actually means can be decidedly non-trivial. I’ve had a few conversations about this recently, so it seemed like a good idea to write some code.</p>
<p>In this post I provide some tools that are intended to help interpret enhanced stereo specifications. The idea is to expand the specification in a molecule and provides information about what it actually means.</p>
<p>For example, for this molecule from the previous blog post:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/325b578b-2-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<p>you get this set of possible stereoisomers:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/325b578b-1-image-2.png" class="img-fluid figure-img"></p>
<figcaption>image-2.png</figcaption>
</figure>
</div>
<p>and this summary of what’s present: <code>['AND', ['OR', 'A', 'B'], ['OR', 'C', 'D']]</code>. So the enhanced stereo spec is saying that you have stereoisomer A or B together with stereoisomer C or D.</p>
<p>I think this code is useful enough to people working with enhanced stereo that it should probably end up in the RDKit, but I wanted to first get it out there and collect some feedback on whether or not people agree that I’m doing everything correctly and that the format of the results looks reasonable.</p>
<div id="18f1abc5" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EnumerateStereoisomers</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.1</code></pre>
</div>
</div>
<p>Start with a molecule with a single stereo group containing a single atom:</p>
<div id="e1bf2606" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">IPythonConsole.drawOptions.addAtomIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@@H](F)[C@H](O)Br |o1:3|'</span>)</span>
<span id="cb3-3">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>In this case it works fine to just run <code>EnumerateStereoisomers()</code> and then look at the type - <code>AND</code> or <code>OR</code> - of the stereogropu:</p>
<div id="290ab42f" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">opts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnumerateStereoisomers.StereoEnumerationOptions()</span>
<span id="cb4-2"></span>
<span id="cb4-3">ms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnumerateStereoisomers.EnumerateStereoisomers(m,options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>opts)</span>
<span id="cb4-4">Draw.MolsToGridImage(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(ms))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="234bca40" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">sgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.GetStereoGroups()</span>
<span id="cb5-2">sg0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sgs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-3">sg0.GetGroupType(),[x.GetIdx() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sg0.GetAtoms()]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(rdkit.Chem.rdchem.StereoGroupType.STEREO_OR, [3])</code></pre>
</div>
</div>
<p><code>EnumerateStereoisomers()</code> will enumerate all stereoisomers of a molecule, but we need more fine-grained control than that for this work, so here’s an function to enumerate all stereoisomers covered by a single stereogroup.</p>
<div id="5b8b9491" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _invertAtomStereochemistry(atom):</span>
<span id="cb7-2">    chi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> atom.GetChiralTag()</span>
<span id="cb7-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> chi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>Chem.ChiralType.CHI_TETRAHEDRAL_CCW:</span>
<span id="cb7-4">        nchi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.ChiralType.CHI_TETRAHEDRAL_CW</span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> chi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>Chem.ChiralType.CHI_TETRAHEDRAL_CW:</span>
<span id="cb7-6">        nchi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.ChiralType.CHI_TETRAHEDRAL_CCW</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unhandled chirality'</span>)</span>
<span id="cb7-9">    atom.SetChiralTag(nchi)</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># not useful until 2025.03.2 release</span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def _invertBondStereochemistry(bond):</span></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     chi = bond.GetStereo()</span></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     if chi==Chem.BondStereo.STEREOATROPCW:</span></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         nchi = Chem.BondStereo.STEREOATROPCCW</span></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     elif chi==Chem.BondStereo.STEREOATROPCCW:</span></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         nchi = Chem.BondStereo.STEREOATROPCW</span></span>
<span id="cb7-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     else:</span></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         raise ValueError('unhandled chirality')</span></span>
<span id="cb7-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     bond.SetStereo(nchi)</span></span>
<span id="cb7-21">    </span>
<span id="cb7-22">    </span>
<span id="cb7-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> enumStereogroup(m,sg):</span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> sg.GetGroupType() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (Chem.StereoGroupType.STEREO_OR, Chem.StereoGroupType.STEREO_AND)</span>
<span id="cb7-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sg.GetAtoms()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or len(sg.GetBonds())</span></span>
<span id="cb7-26">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sg.GetGroupType(),Chem.RWMol(m),Chem.RWMol(m)]</span>
<span id="cb7-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> at <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sg.GetAtoms():</span>
<span id="cb7-28">        _invertAtomStereochemistry(res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].GetAtomWithIdx(at.GetIdx()))</span>
<span id="cb7-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this will not work until v2025.03.2 is out</span></span>
<span id="cb7-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#for bnd in sg.GetBonds():</span></span>
<span id="cb7-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    _invertBondStereochemistry(res[2].GetBondWithIdx(at.GetIdx()))</span></span>
<span id="cb7-32">    </span>
<span id="cb7-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the stereogroup from the result mols</span></span>
<span id="cb7-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nmol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]):</span>
<span id="cb7-35">        nsgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nsg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nmol.GetStereoGroups():</span>
<span id="cb7-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> nsg.GetReadId() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> sg.GetReadId() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> sg.GetGroupType() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> nsg.GetGroupType():</span>
<span id="cb7-38">                nsgs.append(nsg)</span>
<span id="cb7-39">        nmol.SetStereoGroups(nsgs)</span>
<span id="cb7-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<p>Apply that to the single stereo group from our sample molecule:</p>
<div id="fecd480f" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enumStereogroup(m,m.GetStereoGroups()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-3">Draw.MolsToGridImage(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>STEREO_OR</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>If there are multiple stereo groups in a molecule, we need to decide in which order they are going to be enumerated. I haven’t found anything in the CTAB documentation about what should be done, so I’m going to adopt the convention that lower numbered stereo groups have higher precedence and that <code>OR</code> is higher precedence than <code>AND</code>. The first part of this just seems logical, and the second is consistent with how Python and C++ do things: <code>A and B or C</code> is interpreted as <code>A and (B or C)</code>.</p>
<p>Start by establishing that <code>STEREO_OR</code> will sort lower than <code>STEREO_AND</code>:</p>
<div id="564df253" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> Chem.StereoGroupType.STEREO_OR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> Chem.StereoGroupType.STEREO_AND</span></code></pre></div>
</div>
<p>Ok, that works, so here’s the function for sorting stereo groups:</p>
<div id="060b1442" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> orderStereogroups(m):</span>
<span id="cb11-2">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(sg.GetReadId(),sg.GetGroupType(),sg) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> m.GetStereoGroups()]</span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(res))</span>
<span id="cb11-4">    </span></code></pre></div>
</div>
<div id="33010b5a" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@@H](N)[C@@H](F)[C@H](O)Br |o1:5,&amp;1:1|'</span>)</span>
<span id="cb12-2">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>See that we get the expected order of OR and AND:</p>
<div id="3bc49377" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">orderStereogroups(m2)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>[(1,
  rdkit.Chem.rdchem.StereoGroupType.STEREO_OR,
  &lt;rdkit.Chem.rdchem.StereoGroup at 0x71314cd01a10&gt;),
 (1,
  rdkit.Chem.rdchem.StereoGroupType.STEREO_AND,
  &lt;rdkit.Chem.rdchem.StereoGroup at 0x71314cd01310&gt;)]</code></pre>
</div>
</div>
<p>And now we can write the function to actually enumerate all stereoisomers described by a set of stereo groups.</p>
<p>The result is returned as a tree represented by set of nested lists:</p>
<div id="40e0fe6a" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _compositionHelper(res,sgs):</span>
<span id="cb15-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb15-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> sgs:</span>
<span id="cb15-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span>
<span id="cb15-5">    nres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb15-6">    sg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sgs.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb15-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> res[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:</span>
<span id="cb15-8">        nres.append(_compositionHelper(enumStereogroup(m,sg),sgs[:]))</span>
<span id="cb15-9">    </span>
<span id="cb15-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> nres</span>
<span id="cb15-11"></span>
<span id="cb15-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> getPossibleCompositions(m):</span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get all the AND and OR stereo groups</span></span>
<span id="cb15-14">    sgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sg <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> orderStereogroups(m) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> sg[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (Chem.StereoGroupType.STEREO_OR, Chem.StereoGroupType.STEREO_AND)]</span>
<span id="cb15-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> sgs:</span>
<span id="cb15-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no enumerable stereo groups"</span>)</span>
<span id="cb15-17">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enumStereogroup(m,sgs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb15-18">    sgs.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> _compositionHelper(res,sgs)</span></code></pre></div>
</div>
<div id="d607a182" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">getPossibleCompositions(m2)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>[rdkit.Chem.rdchem.StereoGroupType.STEREO_OR,
 [rdkit.Chem.rdchem.StereoGroupType.STEREO_AND,
  &lt;rdkit.Chem.rdchem.RWMol at 0x71314cd1ecf0&gt;,
  &lt;rdkit.Chem.rdchem.RWMol at 0x71314cd4ea20&gt;],
 [rdkit.Chem.rdchem.StereoGroupType.STEREO_AND,
  &lt;rdkit.Chem.rdchem.RWMol at 0x71314cd4ed90&gt;,
  &lt;rdkit.Chem.rdchem.RWMol at 0x71314cd4ec50&gt;]]</code></pre>
</div>
</div>
<p>Finally, it would be nice useful to get a report of what could actually be in the sample.</p>
<p>For this we will keep track of all the unique stereoisomers present and assign each of them a letter:</p>
<div id="6a31c1cf" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _treeHelper(c1,smisSeen):</span>
<span id="cb18-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(c1,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb18-3">        c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(annotateTree(c1,smisSeen))</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb18-5">        smi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolToSmiles(c1)</span>
<span id="cb18-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> smi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smisSeen:</span>
<span id="cb18-7">            idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smisSeen.index(smi)</span>
<span id="cb18-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb18-9">            idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smisSeen)</span>
<span id="cb18-10">            smisSeen.append(smi)</span>
<span id="cb18-11">        c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>idx),smi,c1)</span>
<span id="cb18-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c1</span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> annotateTree(composition,smisSeen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb18-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> smisSeen <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb18-16">        smisSeen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-17">    op,c1,c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> composition</span>
<span id="cb18-18">    c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _treeHelper(c1,smisSeen)</span>
<span id="cb18-19">    c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _treeHelper(c2,smisSeen)</span>
<span id="cb18-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (op,c1,c2)</span></code></pre></div>
</div>
<div id="0de1368a" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">annotateTree(getPossibleCompositions(m2))    </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(rdkit.Chem.rdchem.StereoGroupType.STEREO_OR,
 [rdkit.Chem.rdchem.StereoGroupType.STEREO_AND,
  ('A',
   'C[C@@H](N)[C@@H](F)[C@H](O)Br',
   &lt;rdkit.Chem.rdchem.RWMol at 0x71314cd4ef20&gt;),
  ('B',
   'C[C@H](N)[C@@H](F)[C@H](O)Br',
   &lt;rdkit.Chem.rdchem.RWMol at 0x71314cd4fb00&gt;)],
 [rdkit.Chem.rdchem.StereoGroupType.STEREO_AND,
  ('C',
   'C[C@@H](N)[C@@H](F)[C@@H](O)Br',
   &lt;rdkit.Chem.rdchem.RWMol at 0x71314cd4fbf0&gt;),
  ('D',
   'C[C@H](N)[C@@H](F)[C@@H](O)Br',
   &lt;rdkit.Chem.rdchem.RWMol at 0x71314cd4fa60&gt;)])</code></pre>
</div>
</div>
<p>And here’s a function to generate a text description of what could be present, along with a rendering of the individual stereoisomers involved:</p>
<div id="46ef26d8" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _textSummary(composition):</span>
<span id="cb21-2">    op,c1,c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> composition</span>
<span id="cb21-3">    </span>
<span id="cb21-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> op<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>Chem.StereoGroupType.STEREO_AND:</span>
<span id="cb21-5">        op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AND'</span></span>
<span id="cb21-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> op<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>Chem.StereoGroupType.STEREO_OR:</span>
<span id="cb21-7">        op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OR'</span></span>
<span id="cb21-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb21-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(op)</span>
<span id="cb21-10">    </span>
<span id="cb21-11">    children <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (c1,c2):</span>
<span id="cb21-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(c,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb21-14">            nc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _textSummary(c)</span>
<span id="cb21-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb21-16">            nc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-17">        children.append(nc1)</span>
<span id="cb21-18">    nc1,nc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> children</span>
<span id="cb21-19">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [op, nc1, nc2]</span>
<span id="cb21-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># condense when possible</span></span>
<span id="cb21-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AND'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OR'</span>):</span>
<span id="cb21-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> op<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-23">           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(nc1,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> nc1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb21-24">           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(nc2,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> nc2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>o:</span>
<span id="cb21-25">            children <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nc1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb21-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nc2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]:</span>
<span id="cb21-27">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> children:</span>
<span id="cb21-28">                    children.append(c)</span>
<span id="cb21-29">            res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [o] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> children</span>
<span id="cb21-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb21-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span>
<span id="cb21-32">        </span>
<span id="cb21-33">    </span>
<span id="cb21-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> report(composition):</span>
<span id="cb21-35">    smiKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-36">    aTree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotateTree(composition,smiKey)</span>
<span id="cb21-37">    mols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiKey]</span>
<span id="cb21-38">    lbls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mols))]</span>
<span id="cb21-39">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw.MolsToGridImage(mols,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lbls,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb21-40">    </span>
<span id="cb21-41">    rpt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _textSummary(aTree)</span>
<span id="cb21-42">    </span>
<span id="cb21-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> rpt,img</span></code></pre></div>
</div>
<div id="e568a8a0" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">IPythonConsole.drawOptions.addAtomIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb22-2">rpt,img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> report(getPossibleCompositions(m2))</span>
<span id="cb22-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rpt)</span>
<span id="cb22-4">img</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['OR', ['AND', 'A', 'B'], ['AND', 'C', 'D']]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-17-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So, in words, molecule <code>m2</code> contains either a mixture of A and B or a mixture of C and D.</p>
<p>I’m sure someone better at front-end work than I am could come up with a much nicer way of presenting this, but I think it’s already useful as is.</p>
<p>Let’s look at some more examples:</p>
<p>As discussed in the earlier blog post, one of the common uses of enhanced stereo is to express the relative stereochemistry of two centers.</p>
<p>Here’s another molecule with one stereo group including two atoms (the relative stereo of those atoms is defined) and one with a single atom:</p>
<div id="1a0c0774" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">m3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@@H](N)[C@@H](F)[C@H](O)Br |o1:5,1,&amp;1:3|'</span>)</span>
<span id="cb24-2">m3</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Generate a report for that:</p>
<div id="dcae7cd7" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">rpt,img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> report(getPossibleCompositions(m3))</span>
<span id="cb25-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rpt)</span>
<span id="cb25-3">img</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['OR', ['AND', 'A', 'B'], ['AND', 'C', 'D']]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-19-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The reporting function above will condense nested AND or OR groups. For example, <code>[AND [AND A B] [AND C D]]</code> is reported as <code>[AND A B C D]</code>. Here’s an example of that:</p>
<div id="044818da" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">m4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C[C@@H](N)[C@@H](F)[C@H](O)Br |&amp;1:5,1,&amp;2:3|'</span>)</span>
<span id="cb27-2">m4</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="85a77752" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">rpt,img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> report(getPossibleCompositions(m4))</span>
<span id="cb28-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rpt)</span>
<span id="cb28-3">img</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['AND', 'A', 'B', 'C', 'D']</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-21-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>At some point it may be worth adding another function which can, in the case of OR groups, provide a list of possible compositions.</p>
<p>This would map something like:</p>
<p><code>['OR', ['AND', 'A', 'B'], ['AND', 'C', 'D']]</code></p>
<p>to</p>
<pre><code>  'A' AND 'B'
OR
  'C' AND 'D'</code></pre>
<p>And it would also ideally be able to recognize that: <code>['AND', ['OR', 'A', 'B'], ['OR', 'C', 'D']]</code> is:</p>
<pre><code>  'A' AND 'C'
OR
  'A' AND 'D'
OR
  'B' AND 'C'
OR
  'B' AND 'D'</code></pre>
<p>Finally, here’s the “more complicated” example from the original blog post:</p>
<div id="c066fcac" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">three_centers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OC[C@H]1OC=C[C@@H](O)[C@@H]1O |&amp;1:2,o2:6,8|'</span>) </span>
<span id="cb32-2">three_centers</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="eef3d3f6" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">rpt,img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> report(getPossibleCompositions(three_centers))</span>
<span id="cb33-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rpt)</span>
<span id="cb33-3">img</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['AND', ['OR', 'A', 'B'], ['OR', 'C', 'D']]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo_files/figure-html/cell-23-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>prototypes</category>
  <category>tutorial</category>
  <category>stereochemistry</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-04-18-explaining-enhanced-stereo.html</guid>
  <pubDate>Thu, 17 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/explaining-enhanced-stereo-1.png" medium="image" type="image/png" height="42" width="144"/>
</item>
<item>
  <title>Similarity-search hitlist overlap part 2</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-04-13-similarity-hitset-overlap-2.html</link>
  <description><![CDATA[ 




<p>This post is a followup to <a href="https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1.html">a recent one</a> exploring the amount of overlap in the hit sets returned by doing similarity searches with different fingerprint types.</p>
<p>At the end of the intro to that post I said:</p>
<blockquote class="blockquote">
<p>One thing that is worth keeping in mind is that these results almost certainly consider similarity values which are down close to and probably in the region of similarities observed between <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">random compounds</a>. It may be worth refining the analysis in order to only consider similarities which are more significant, but that’s for a possible future post.</p>
</blockquote>
<p>This is that “possible future post”. Here I filter the hit sets to only include similarity values greater than or equal to the 99% threshold for each fingerprint in the <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">post on random similarities</a>.</p>
<p>Other than skipping the initial examination of searches done with a single compounds, the rest of the analysis is the same as in earlier post. The results are not qualitatively different, but I think this is a more sensible approach overall.</p>
<div id="6127934a" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tableau-colorblind10'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext sql</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.1</code></pre>
</div>
</div>
<div id="92e399b5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/Pubchem_AID373_compounds.sdf.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Chem.ForwardSDMolSupplier(inf) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> suppl:</span>
<span id="cb3-4">        dbmols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> suppl <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dbmols)</span>
<span id="cb3-6">    </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>59788</code></pre>
</div>
</div>
<p>Define the fingerprints and similarity thresholds we will use:</p>
<div id="2f8d196f" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tuple order: (fp name, generator, count_thresh, bit_thresh)</span></span>
<span id="cb5-2">runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-3">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.23</span>),</span>
<span id="cb5-4">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp2'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb5-5">                                                  atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganAtomInvGen()),</span>
<span id="cb5-6">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.32</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.24</span>),</span>
<span id="cb5-7">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.23</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>),</span>
<span id="cb5-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp3'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb5-9">                                                  atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganAtomInvGen()),</span>
<span id="cb5-10">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.18</span>),</span>
<span id="cb5-11">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp1'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.42</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.36</span>),</span>
<span id="cb5-12">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp1'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-13">                                                  atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganAtomInvGen()),</span>
<span id="cb5-14">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.46</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.40</span>),</span>
<span id="cb5-15">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tt'</span>,rdFingerprintGenerator.GetTopologicalTorsionGenerator(), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.26</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.28</span>),</span>
<span id="cb5-16">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ap'</span>,rdFingerprintGenerator.GetAtomPairGenerator(), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.32</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.42</span>),</span>
<span id="cb5-17">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk5'</span>,rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.33</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37</span>),</span>
<span id="cb5-18">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk7'</span>,rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.51</span>),</span>
<span id="cb5-19">]</span></code></pre></div>
</div>
<div id="812f75b7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Pharm2D <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Gobbi_Pharm2D,Generate</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Gobbi2D_bits(mol,fpLen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>):</span>
<span id="cb6-3">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataStructs.ExplicitBitVect(fpLen)</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bit <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Generate.Gen2DFingerprint(mol,Gobbi_Pharm2D.factory).GetOnBits():</span>
<span id="cb6-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the bits are not hashed, so we need to do so before we fold them:</span></span>
<span id="cb6-6">        res.SetBit(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>((bit,))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>fpLen)</span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="1c181fc1" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdMolDescriptors</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Avalon <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyAvalonTools</span>
<span id="cb7-3"></span>
<span id="cb7-4">func_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-5">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gobbi2d'</span>,Gobbi2D_bits, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37</span>),</span>
<span id="cb7-6">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avalon'</span>,pyAvalonTools.GetAvalonFP, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.59</span>),</span>
<span id="cb7-7">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avalon-c'</span>,pyAvalonTools.GetAvalonCountFP, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>),</span>
<span id="cb7-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pattern'</span>,Chem.PatternFingerprint, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>),</span>
<span id="cb7-9">]</span></code></pre></div>
</div>
<p>In order to get some decent statistics, we will do similarity searches with 500 random molecules.</p>
<p>Running this cell takes a while.</p>
<div id="4e9b9dbb" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb8-2">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xbad5eed</span>)</span>
<span id="cb8-3">order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dbmols)))</span>
<span id="cb8-4">random.shuffle(order)</span>
<span id="cb8-5"></span>
<span id="cb8-6">nToDo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb8-7">order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> order[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>]</span>
<span id="cb8-8"></span>
<span id="cb8-9">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm,fpg,cthresh,bthresh <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> runs:</span>
<span id="cb8-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(nm)</span>
<span id="cb8-12">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fpg.GetFingerprints(dbmols,numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb8-13">    taccum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> order:</span>
<span id="cb8-15">        qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fps[i]</span>
<span id="cb8-16">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(sim,j) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j,sim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(DataStructs.BulkTanimotoSimilarity(qry,fps)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span>bthresh <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>i]</span>
<span id="cb8-17">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(sims,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb8-18">        taccum.append(sims)</span>
<span id="cb8-19">    accum[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-b'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> taccum</span>
<span id="cb8-20"></span>
<span id="cb8-21">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fpg.GetCountFingerprints(dbmols,numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb8-22">    taccum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> order:</span>
<span id="cb8-24">        qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fps[i]</span>
<span id="cb8-25">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(sim,j) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j,sim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(DataStructs.BulkTanimotoSimilarity(qry,fps)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span>cthresh <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>i]</span>
<span id="cb8-26">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(sims,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb8-27">        taccum.append(sims)</span>
<span id="cb8-28">    accum[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-c'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> taccum</span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm,func,thresh <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> func_runs:</span>
<span id="cb8-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(nm)</span>
<span id="cb8-32">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [func(m) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dbmols]</span>
<span id="cb8-33">    taccum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> order:</span>
<span id="cb8-35">        qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fps[i]</span>
<span id="cb8-36">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(sim,j) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j,sim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(DataStructs.BulkTanimotoSimilarity(qry,fps)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> sim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span>thresh <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>i]</span>
<span id="cb8-37">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(sims,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb8-38">        taccum.append(sims)</span>
<span id="cb8-39">    accum[nm] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> taccum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mfp2
ffp2
mfp3
ffp3
mfp1
ffp1
tt
ap
rdk5
rdk7
gobbi2d
avalon
avalon-c
pattern</code></pre>
</div>
</div>
<div id="0ce4aa9c" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/sim_overlaps_thresh.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb10-4">    pickle.dump(accum,outf)</span></code></pre></div>
</div>
<p>Accumulate the overlaps:</p>
<div id="04426233" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb11-2"></span>
<span id="cb11-3">nms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(accum.keys())</span>
<span id="cb11-4"></span>
<span id="cb11-5">ovls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb11-6">topNs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb11-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,nmi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(nms):</span>
<span id="cb11-8">    nruns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(accum[nmi])</span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i):</span>
<span id="cb11-10">        nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nms[j]</span>
<span id="cb11-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> topN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> topNs:</span>
<span id="cb11-12">            ovls[nmi,nmj][topN] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> run <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nruns):</span>
<span id="cb11-14">            topi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum[nmi][run]]</span>
<span id="cb11-15">            topj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum[nmj][run]]</span>
<span id="cb11-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> topN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> topNs:</span>
<span id="cb11-17">                ovls[nmi,nmj][topN].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(topi[:topN]).intersection(topj[:topN])))</span>
<span id="cb11-18">ovls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(ovls)</span></code></pre></div>
</div>
<p>Find the most similar fingerprint types for each of the fingerprints, this time using the mean overlap across the 500 hit sets:</p>
<div id="f87c6e49" class="cell" data-scrolled="false" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">snms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(nms)</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(snms)):</span>
<span id="cb12-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>)</span>
<span id="cb12-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(snms[i])</span>
<span id="cb12-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cnt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>):</span>
<span id="cb12-7">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(snms)):</span>
<span id="cb12-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>j:</span>
<span id="cb12-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb12-11">            nmi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snms[i]</span>
<span id="cb12-12">            nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snms[j]</span>
<span id="cb12-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (nmi,nmj) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ovls:</span>
<span id="cb12-14">                nmi,nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nmj,nmi</span>
<span id="cb12-15">            row.append((np.mean(ovls[nmi,nmj][cnt]),j))</span>
<span id="cb12-16">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(row,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-17">        nbrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb12-19">            nbrs.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>snms[row[j][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:8s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[j][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:5.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb12-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cnt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 5d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:17s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:17s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:16s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------------------------------------------------------------------
ap-b
       10 ap-c    (  7.8)   ffp1-c  (  4.9)   mfp1-c  (  4.8) 
      100 ap-c    ( 61.4)   ffp1-c  ( 34.6)   mfp1-c  ( 34.0) 
     1000 ap-c    (329.6)   ffp1-c  (189.2)   mfp1-c  (182.2) 
----------------------------------------------------------------------
ap-c
       10 ap-b    (  7.8)   ffp2-c  (  5.1)   ffp1-c  (  5.1) 
      100 ap-b    ( 61.4)   ffp1-c  ( 40.2)   mfp1-c  ( 39.0) 
     1000 ap-b    (329.6)   ffp1-c  (264.2)   mfp1-c  (252.7) 
----------------------------------------------------------------------
avalon
       10 avalon-c(  5.3)   rdk5-b  (  5.1)   rdk7-b  (  5.1) 
      100 rdk5-b  ( 42.7)   avalon-c( 40.3)   rdk7-c  ( 40.1) 
     1000 rdk7-c  (207.2)   avalon-c(195.1)   rdk5-b  (175.3) 
----------------------------------------------------------------------
avalon-c
       10 avalon  (  5.3)   rdk5-c  (  5.3)   rdk7-c  (  5.1) 
      100 rdk5-c  ( 42.5)   avalon  ( 40.3)   rdk7-c  ( 40.2) 
     1000 rdk7-c  (235.7)   rdk5-c  (224.9)   avalon  (195.1) 
----------------------------------------------------------------------
ffp1-b
       10 mfp1-b  (  7.2)   ffp2-b  (  6.7)   mfp2-b  (  6.2) 
      100 mfp1-b  ( 64.7)   ffp2-b  ( 62.6)   mfp2-b  ( 55.7) 
     1000 ffp2-b  (493.4)   mfp1-b  (467.8)   mfp2-b  (420.7) 
----------------------------------------------------------------------
ffp1-c
       10 mfp1-c  (  7.5)   ffp2-c  (  6.9)   mfp2-c  (  6.4) 
      100 mfp1-c  ( 64.1)   ffp2-c  ( 62.5)   mfp2-c  ( 55.2) 
     1000 ffp2-c  (465.9)   mfp1-c  (435.8)   ffp3-c  (410.9) 
----------------------------------------------------------------------
ffp2-b
       10 ffp3-b  (  8.2)   mfp2-b  (  7.9)   mfp3-b  (  7.5) 
      100 ffp3-b  ( 79.6)   mfp2-b  ( 73.6)   mfp3-b  ( 69.9) 
     1000 ffp3-b  (679.8)   mfp2-b  (575.7)   mfp3-b  (568.1) 
----------------------------------------------------------------------
ffp2-c
       10 ffp3-c  (  8.3)   mfp2-c  (  8.1)   mfp3-c  (  7.5) 
      100 ffp3-c  ( 79.6)   mfp2-c  ( 72.3)   mfp3-c  ( 69.1) 
     1000 ffp3-c  (631.5)   mfp3-c  (524.9)   mfp2-c  (519.3) 
----------------------------------------------------------------------
ffp3-b
       10 ffp2-b  (  8.2)   mfp3-b  (  8.1)   mfp2-b  (  7.5) 
      100 ffp2-b  ( 79.6)   mfp3-b  ( 74.3)   mfp2-b  ( 68.6) 
     1000 ffp2-b  (679.8)   mfp3-b  (589.2)   mfp2-b  (543.7) 
----------------------------------------------------------------------
ffp3-c
       10 ffp2-c  (  8.3)   mfp3-c  (  8.2)   mfp2-c  (  7.6) 
      100 ffp2-c  ( 79.6)   mfp3-c  ( 74.1)   mfp2-c  ( 68.9) 
     1000 ffp2-c  (631.5)   mfp3-c  (567.9)   ffp3-b  (539.2) 
----------------------------------------------------------------------
gobbi2d
       10 ap-c    (  3.8)   ap-b    (  3.7)   mfp3-c  (  3.5) 
      100 ap-c    ( 22.0)   mfp2-c  ( 21.6)   mfp3-c  ( 21.2) 
     1000 ap-c    ( 73.8)   mfp2-b  ( 72.1)   mfp3-c  ( 70.8) 
----------------------------------------------------------------------
mfp1-b
       10 ffp1-b  (  7.2)   mfp2-b  (  7.0)   ffp2-b  (  6.3) 
      100 mfp2-b  ( 65.5)   ffp1-b  ( 64.7)   ffp2-b  ( 56.9) 
     1000 mfp2-b  (515.2)   ffp1-b  (467.8)   mfp3-b  (448.4) 
----------------------------------------------------------------------
mfp1-c
       10 ffp1-c  (  7.5)   mfp2-c  (  7.1)   ffp2-c  (  6.5) 
      100 mfp2-c  ( 65.6)   ffp1-c  ( 64.1)   ffp2-c  ( 57.2) 
     1000 mfp2-c  (480.2)   mfp3-c  (436.2)   ffp1-c  (435.8) 
----------------------------------------------------------------------
mfp2-b
       10 mfp3-b  (  8.3)   ffp2-b  (  7.9)   ffp3-b  (  7.5) 
      100 mfp3-b  ( 80.3)   ffp2-b  ( 73.6)   ffp3-b  ( 68.6) 
     1000 mfp3-b  (669.9)   ffp2-b  (575.7)   ffp3-b  (543.7) 
----------------------------------------------------------------------
mfp2-c
       10 mfp3-c  (  8.3)   ffp2-c  (  8.1)   ffp3-c  (  7.6) 
      100 mfp3-c  ( 80.5)   ffp2-c  ( 72.3)   ffp3-c  ( 68.9) 
     1000 mfp3-c  (614.3)   ffp2-c  (519.3)   ffp3-c  (512.8) 
----------------------------------------------------------------------
mfp3-b
       10 mfp2-b  (  8.3)   ffp3-b  (  8.1)   ffp2-b  (  7.5) 
      100 mfp2-b  ( 80.3)   ffp3-b  ( 74.3)   mfp3-c  ( 70.0) 
     1000 mfp2-b  (669.9)   ffp3-b  (589.2)   ffp2-b  (568.1) 
----------------------------------------------------------------------
mfp3-c
       10 mfp2-c  (  8.3)   ffp3-c  (  8.2)   ffp2-c  (  7.5) 
      100 mfp2-c  ( 80.5)   ffp3-c  ( 74.1)   mfp3-b  ( 70.0) 
     1000 mfp2-c  (614.3)   ffp3-c  (567.9)   mfp3-b  (546.7) 
----------------------------------------------------------------------
pattern
       10 avalon-c(  4.7)   rdk5-c  (  4.2)   avalon  (  4.2) 
      100 avalon-c( 37.4)   rdk5-c  ( 35.7)   rdk7-c  ( 34.1) 
     1000 rdk5-c  (183.8)   rdk7-c  (182.3)   rdk5-b  (170.9) 
----------------------------------------------------------------------
rdk5-b
       10 rdk7-b  (  6.8)   rdk5-c  (  6.4)   rdk7-c  (  6.1) 
      100 rdk5-c  ( 61.9)   rdk7-c  ( 57.6)   rdk7-b  ( 47.3) 
     1000 rdk5-c  (383.5)   rdk7-c  (368.5)   ffp2-b  (228.8) 
----------------------------------------------------------------------
rdk5-c
       10 rdk7-c  (  7.5)   rdk5-b  (  6.4)   rdk7-b  (  5.8) 
      100 rdk7-c  ( 73.4)   rdk5-b  ( 61.9)   tt-c    ( 44.2) 
     1000 rdk7-c  (521.6)   rdk5-b  (383.5)   tt-c    (265.3) 
----------------------------------------------------------------------
rdk7-b
       10 rdk5-b  (  6.8)   rdk7-c  (  6.6)   rdk5-c  (  5.8) 
      100 rdk5-b  ( 47.3)   rdk7-c  ( 46.0)   rdk5-c  ( 42.3) 
     1000 rdk7-c  (163.0)   rdk5-b  (130.0)   rdk5-c  (125.0) 
----------------------------------------------------------------------
rdk7-c
       10 rdk5-c  (  7.5)   rdk7-b  (  6.6)   rdk5-b  (  6.1) 
      100 rdk5-c  ( 73.4)   rdk5-b  ( 57.6)   rdk7-b  ( 46.0) 
     1000 rdk5-c  (521.6)   rdk5-b  (368.5)   tt-c    (282.9) 
----------------------------------------------------------------------
tt-b
       10 tt-c    (  8.5)   ffp3-c  (  6.2)   mfp3-c  (  6.1) 
      100 tt-c    ( 77.6)   ffp2-b  ( 52.7)   mfp2-b  ( 51.4) 
     1000 tt-c    (470.1)   ffp2-b  (321.8)   mfp2-b  (308.9) 
----------------------------------------------------------------------
tt-c
       10 tt-b    (  8.5)   ffp3-c  (  6.4)   ffp2-c  (  6.3) 
      100 tt-b    ( 77.6)   ffp2-c  ( 52.6)   ffp3-c  ( 52.6) 
     1000 tt-b    (470.1)   ffp3-c  (322.5)   ffp2-c  (322.3) </code></pre>
</div>
</div>
<p>Look at histograms of the overlap sizes for a few different fingerprint pairs</p>
<div id="1a6f7152" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compare(prs,ovls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ovls):</span>
<span id="cb14-2">    prs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(prs)</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,pr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(prs):</span>
<span id="cb14-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ovls:</span>
<span id="cb14-5">            pr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],pr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb14-6">        prs[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr</span>
<span id="cb14-7"></span>
<span id="cb14-8">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb14-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)):</span>
<span id="cb14-10">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-11">        plt.hist([ovls[pr][n] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prs],label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prs,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-12">        plt.xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,n)</span>
<span id="cb14-13">        plt.xlabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'n=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> overlap'</span>)</span>
<span id="cb14-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.title(pr)</span></span>
<span id="cb14-15">        plt.legend()</span>
<span id="cb14-16">    plt.tight_layout()</span></code></pre></div>
</div>
<p>Start with <a href="https://www.rdkit.org/docs/RDKit_Book.html#morgan-and-feature-morgan-fingerprints">FeatureMorgan and Morgan</a>, where there is a reasonably large amount of overlap:</p>
<div id="c8df404b" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp2-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp3-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-13-similarity-hitset-overlap-2_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now compare count-based and bit-based Morgan fingerprints. I expected the overlaps here to be higher:</p>
<div id="01a6402a" class="cell" data-scrolled="false" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-c'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2-c'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2-b'</span>),))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-13-similarity-hitset-overlap-2_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Comparing very different types of fingerprints: count-based Morgan3 and both <a href="https://www.rdkit.org/docs/RDKit_Book.html#atom-pair-and-topological-torsion-fingerprints">Topological Torsions and Atom Pairs</a> (these both use <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-07-06-simulating-counts.html">count simulation</a>. Here there are significant differences. These are fingerprints that it would be interesting to use together.</p>
<div id="76e8ffef" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tt-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-c'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ap-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-c'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-13-similarity-hitset-overlap-2_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Same thing with bit-baseed Morgan3 and <a href="https://www.rdkit.org/docs/RDKit_Book.html#rdkit-fingerprints">RDK5</a>. Again, These are nicely complementary fingerprints:</p>
<div id="5b8f4a61" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tt-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ap-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk5-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-13-similarity-hitset-overlap-2_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Finally compare Morgan3 with the <a href="https://www.rdkit.org/docs/RDKit_Book.html#pattern-fingerprints">pattern fingerprint</a> (normally used for substructure screening, not similarity search), Gobbi2D (a 2D pharmacophore FP) and the Avalon FP. These are also nicely different from each other:</p>
<div id="76ea761c" class="cell" data-scrolled="false" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pattern'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gobbi2d'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avalon'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-04-13-similarity-hitset-overlap-2_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>reference</category>
  <category>similarity</category>
  <category>fingerprints</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-04-13-similarity-hitset-overlap-2.html</guid>
  <pubDate>Sat, 12 Apr 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/similarity-hitset-overlap-2.png" medium="image" type="image/png" height="121" width="144"/>
</item>
<item>
  <title>Interrupting calculations</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-04-06-interrupting-calculations.html</link>
  <description><![CDATA[ 




<p>This is a short post to introduce a couple of features to make working with some of the longer-running calculations in the RDKit a bit easier:</p>
<ul>
<li>timeouts for some functions</li>
<li>cancelling calculations, a feature that we have started to support in the 2025.03.1 RDKit release</li>
</ul>
<div id="439fda68" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDistGeom</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdSynthonSpaceSearch</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.1</code></pre>
</div>
</div>
<section id="conformer-generation" class="level1">
<h1>Conformer generation</h1>
<div id="f1b0d8de" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.AddHs(Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCCCCCCCCCCCCCCC'</span>))</span></code></pre></div>
</div>
<div id="23d6819f" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.ETKDGv3()</span>
<span id="cb4-2">params.randomSeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xbad5eed</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb4-5">cids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMultipleConfs(m,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,params)</span>
<span id="cb4-6">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cids)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> conformers in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1000 conformers in 11.72s</code></pre>
</div>
</div>
<p>What’s new is that you can stop the calculation by pressing the “interrupt the kernel” button in the notebook or by hitting <code>^C</code> if you are running on the command line:</p>
<div id="9ce10417" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.ETKDGv3()</span>
<span id="cb6-2">params.randomSeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xbad5eed</span></span>
<span id="cb6-3"></span>
<span id="cb6-4">cids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMultipleConfs(m,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,params)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[16:34:13] Interrupted, cancelling conformer generation</code></pre>
</div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">KeyboardInterrupt</span>                         Traceback (most recent call last)
Cell <span class="ansi-green-fg">In[4], line 4</span>
<span class="ansi-green-fg ansi-bold">      1</span> params <span style="color:rgb(98,98,98)">=</span> rdDistGeom<span style="color:rgb(98,98,98)">.</span>ETKDGv3()
<span class="ansi-green-fg ansi-bold">      2</span> params<span style="color:rgb(98,98,98)">.</span>randomSeed <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(98,98,98)">0xbad5eed</span>
<span class="ansi-green-fg">----&gt; 4</span> cids <span style="color:rgb(98,98,98)">=</span> <span class="ansi-yellow-bg">rdDistGeom</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">EmbedMultipleConfs</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">m</span><span class="ansi-yellow-bg">,</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">1000</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg">params</span><span class="ansi-yellow-bg">)</span>

<span class="ansi-red-fg">KeyboardInterrupt</span>: Embedding cancelled</pre>
</div>
</div>
</div>
<p>Obviously in this case it doesn’t make that big of a difference, but for a molecule which takes longer to embed, for example one with a lot of chiral centers and/or a complex fused-ring system, it’s nice to be able to stop things without having to completely restart the kernel.</p>
<p>It’s now also possible to specify a time out for the conformer generation. If you provide a timeout, the conformer generation will be gracefully cancelled if it runs for longer than the specified value.</p>
<p>Thanks to Nikitas Rontsis, Akvilė Žemgulytė, and Charlie Beattie at Google Deepmind for contributing the timeout support.</p>
<div id="23eadc9c" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">params.timeout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-2">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb8-3">cids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMultipleConfs(m,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,params)</span>
<span id="cb8-4">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb8-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cids)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> conformers in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 conformers in 3.01s</code></pre>
</div>
</div>
<p>The one conformer ID we get is -1, to indicate that the calculation failed:</p>
<div id="8626b6fa" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">cids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>-1</code></pre>
</div>
</div>
</section>
<section id="synthon-searches" class="level1">
<h1>Synthon searches</h1>
<p>Inspired by the changes to the conformer generator, Dave Cosgrove added support for both timeouts and interrupting calculations to the code for doing <a href="https://greglandrum.github.io/rdkit-blog/posts/2024-12-03-introducing-synthon-search.html">synthon space searches</a>.</p>
<p>Demonstrate this using synthon search in Chemspace’s FreedomSpace</p>
<div id="3261ef95" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">spc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdSynthonSpaceSearch.SynthonSpace()</span>
<span id="cb12-2">spc.ReadDBFile(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/RDKit_git/Data/2023-05_Freedom_synthons.spc'</span>)</span></code></pre></div>
</div>
<div id="3fd82389" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">spc.GetNumProducts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>9360696185</code></pre>
</div>
</div>
<div id="7d17a975" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FC1=CC=CC2=C1NN=C2'</span>)</span></code></pre></div>
</div>
<div id="80d11779" class="cell" data-scrolled="true" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdSynthonSpaceSearch.SynthonSpaceSearchParams()</span>
<span id="cb16-2">ps.maxHits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb16-3"></span>
<span id="cb16-4">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb16-5">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spc.SubstructureSearch(qry,params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ps)</span>
<span id="cb16-6">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb16-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res.GetHitMolecules())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> results in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>5000 results in 1.84s</code></pre>
</div>
</div>
<div id="4f099e85" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdSynthonSpaceSearch.SynthonSpaceSearchParams()</span>
<span id="cb18-2">ps.maxHits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb18-3"></span>
<span id="cb18-4">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb18-5">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spc.SubstructureSearch(qry,params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ps)</span>
<span id="cb18-6">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">RuntimeError</span>                              Traceback (most recent call last)
Cell <span class="ansi-green-fg">In[11], line 5</span>
<span class="ansi-green-fg ansi-bold">      2</span> ps<span style="color:rgb(98,98,98)">.</span>maxHits <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(98,98,98)">5000</span>
<span class="ansi-green-fg ansi-bold">      4</span> t1 <span style="color:rgb(98,98,98)">=</span> time<span style="color:rgb(98,98,98)">.</span>time()
<span class="ansi-green-fg">----&gt; 5</span> res <span style="color:rgb(98,98,98)">=</span> <span class="ansi-yellow-bg">spc</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">SubstructureSearch</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">qry</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg">params</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">=</span><span class="ansi-yellow-bg">ps</span><span class="ansi-yellow-bg">)</span>
<span class="ansi-green-fg ansi-bold">      6</span> t2 <span style="color:rgb(98,98,98)">=</span> time<span style="color:rgb(98,98,98)">.</span>time()

<span class="ansi-red-fg">RuntimeError</span>: SubstructureSearch cancelled</pre>
</div>
</div>
</div>
<p>Substructure searching is really too fast to sensibly demonstrate the timeout, so let’s do a similarity search.</p>
<div id="0d8c3ca6" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">vemurafenib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCCS(=O)(=O)Nc1ccc(F)c(c1F)C(=O)c2c[nH]c3c2cc(cn3)c4ccc(Cl)cc4'</span>)</span></code></pre></div>
</div>
<div id="c99dcf6c" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdSynthonSpaceSearch.SynthonSpaceSearchParams()</span>
<span id="cb20-2">ps.maxHits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb20-3">ps.numThreads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> </span>
<span id="cb20-4"></span>
<span id="cb20-5">fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetMorganGenerator()</span>
<span id="cb20-6"></span>
<span id="cb20-7">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb20-8">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spc.FingerprintSearch(vemurafenib,fpg,params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ps)</span>
<span id="cb20-9">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb20-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res.GetHitMolecules())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> results in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[16:34:46] Building the fingerprints may take some time.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>0 results in 33.32s</code></pre>
</div>
</div>
<div id="d01b60e9" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdSynthonSpaceSearch.SynthonSpaceSearchParams()</span>
<span id="cb23-2">ps.maxHits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb23-3">ps.similarityCutoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span></span>
<span id="cb23-4"></span>
<span id="cb23-5">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb23-6">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spc.FingerprintSearch(vemurafenib,fpg,params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ps)</span>
<span id="cb23-7">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb23-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res.GetHitMolecules())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> results in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>448 results in 4.88s</code></pre>
</div>
</div>
<div id="a302edc6" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">ps.timeOut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb25-2">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb25-3">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spc.FingerprintSearch(vemurafenib,fpg,params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ps)</span>
<span id="cb25-4">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb25-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res.GetHitMolecules())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> results in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 results in 1.03s</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[16:35:27] Timed out.
[16:35:27] Timed out.
[16:35:27] Timed out.</code></pre>
</div>
</div>
<p>We can also cancel the calculation with the “interrupt the kernel” button in the notebook or <code>^C</code> in the terminal:</p>
<div id="b60f0cc0" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdSynthonSpaceSearch.SynthonSpaceSearchParams()</span>
<span id="cb28-2">ps.maxHits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb28-3">ps.similarityCutoff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span></span>
<span id="cb28-4"></span>
<span id="cb28-5">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb28-6">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spc.FingerprintSearch(vemurafenib,fpg,params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ps)</span>
<span id="cb28-7">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb28-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res.GetHitMolecules())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> results in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s'</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">RuntimeError</span>                              Traceback (most recent call last)
Cell <span class="ansi-green-fg">In[16], line 6</span>
<span class="ansi-green-fg ansi-bold">      3</span> ps<span style="color:rgb(98,98,98)">.</span>similarityCutoff <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(98,98,98)">0.4</span>
<span class="ansi-green-fg ansi-bold">      5</span> t1 <span style="color:rgb(98,98,98)">=</span> time<span style="color:rgb(98,98,98)">.</span>time()
<span class="ansi-green-fg">----&gt; 6</span> res <span style="color:rgb(98,98,98)">=</span> <span class="ansi-yellow-bg">spc</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">FingerprintSearch</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">vemurafenib</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg">fpg</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg">params</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">=</span><span class="ansi-yellow-bg">ps</span><span class="ansi-yellow-bg">)</span>
<span class="ansi-green-fg ansi-bold">      7</span> t2 <span style="color:rgb(98,98,98)">=</span> time<span style="color:rgb(98,98,98)">.</span>time()
<span class="ansi-green-fg ansi-bold">      8</span> <span style="color:rgb(0,135,0)">print</span>(<span style="color:rgb(175,0,0)">f</span><span style="color:rgb(175,0,0)">'</span><span style="font-weight:bold;color:rgb(175,95,135)">{</span><span style="color:rgb(0,135,0)">len</span>(res<span style="color:rgb(98,98,98)">.</span>GetHitMolecules())<span style="font-weight:bold;color:rgb(175,95,135)">}</span><span style="color:rgb(175,0,0)"> results in </span><span style="font-weight:bold;color:rgb(175,95,135)">{</span>t2<span style="color:rgb(98,98,98)">-</span>t1<span style="font-weight:bold;color:rgb(175,95,135)">:</span><span style="color:rgb(175,0,0)">.2f</span><span style="font-weight:bold;color:rgb(175,95,135)">}</span><span style="color:rgb(175,0,0)">s</span><span style="color:rgb(175,0,0)">'</span>)

<span class="ansi-red-fg">RuntimeError</span>: FingerprintSearch cancelled</pre>
</div>
</div>
</div>
</section>
<section id="other-rdkit-functions-supporting-a-timeout" class="level1">
<h1>Other RDKit functions supporting a timeout</h1>
<p>Some other RDKit functions have supported providing a timeout for a while:</p>
<ul>
<li><code>rdFMCS.FindMCS()</code> via <code>rdFMCS.MCSParameters.Timeout</code></li>
<li>The code in <code>rdRascalMCES</code> via <code>rdRascalMCES.RascalOptions.timeout</code></li>
<li>The code in <code>rdRGroupDecompositoin</code> via <code>rdRGroupDecomposition.RGroupDecompositionParameters.timeout</code></li>
</ul>
<p>If you have ideas for other long-running functions which should support a timeout and/or being interruptable, please leave a comment or open an RDKit feature request in github.</p>


</section>

 ]]></description>
  <category>tutorial</category>
  <category>technical</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-04-06-interrupting-calculations.html</guid>
  <pubDate>Sat, 05 Apr 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Rendering fingerprint bits</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-03-29-updated-bit-rendering.html</link>
  <description><![CDATA[ 




<p>This is an updated version of an <a href="https://rdkit.blogspot.com/2018/10/using-new-fingerprint-bit-rendering-code.html">older post</a>.</p>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>A frequent desire when working with chemical fingerprints is to see what the indvidual bits actually “mean”. For most of the fingerprinting algorithms in the RDKit this question only means something in the context of a molecule, so there have been a number of code samples floating around (including in the RDKit documentation) allowing the user to show the atoms/bonds in a molecule that are responsible for setting a particular bit. In the 2018.09 release we made this easier and added a few functions to the <code>rdkit.Chem.Draw</code> package that allow direct visualization of the atoms and bonds from a molecule that set bits from Morgan and RDKit fingerprints.</p>
<p>This notebook shows how to use this functionality. Note that since this is new code, it will only work in RDKit versions 2018.09 and later.</p>
<p>The code that is used for this is derived from the bit rendering code that Nadine Schneider wrote for <a href="https://github.com/rdkit/CheTo">CheTo</a>.</p>
<p>Start by importing the required packages:</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span></code></pre></div>
</div>
<p>We’ll use epinephrine as the demo molecule:</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">epinephrine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CNC[C@H](O)c1ccc(O)c(O)c1'</span>)</span>
<span id="cb2-2">epinephrine</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-29-updated-bit-rendering_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="looking-at-morgan-bits" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-morgan-bits">Looking at Morgan bits</h2>
<p>Generate a Morgan fingerprint and save information about the bits that are set using the <code>bitInfo</code> argument:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2">ao <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.AdditionalOutput()</span>
<span id="cb3-3">ao.AllocateBitInfoMap()</span>
<span id="cb3-4"></span>
<span id="cb3-5">fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetFingerprint(epinephrine,additionalOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ao)</span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show 10 of the set bits:</span></span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fp.GetOnBits())[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>[1, 80, 227, 315, 589, 606, 632, 807, 875, 1057]</code></pre>
</div>
</div>
<p>In its simplest form, the new code lets you display the atomic environment that sets a particular bit. Here we will look at bit 589:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">Draw.DrawMorganBit(epinephrine,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">589</span>,ao.GetBitInfoMap())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-29-updated-bit-rendering_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>There’s also a function, <code>DrawMorganBits()</code>, for drawing multiple bits at once (thanks to Pat Walters for suggesting this one):</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">tpls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(epinephrine,x,ao.GetBitInfoMap()) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fp.GetOnBits()]</span>
<span id="cb6-2">Draw.DrawMorganBits(tpls[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fp.GetOnBits()][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-29-updated-bit-rendering_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Some notes about the rendering here:</p>
<ul>
<li>The molecule fragment is drawn with the atoms in the same positions as in the original molecule.</li>
<li>The central atom is highlighted in blue.</li>
<li>Aromatic atoms are highlighted in yellow</li>
<li>Aliphatic ring atoms (none present here) are highlighted in dark gray</li>
<li>Atoms/bonds that are drawn in light gray indicate pieces of the structure that influence the atoms’ connectivity invariants but that are not directly part of the fingerprint.</li>
</ul>
<p>We can also take advantage of the interactivity features of the Jupyter notebook and create a widget allowing is to browse through the bits. Note that this does not work in the blog post or the github view of the notebook; you will need to download the notebook and try it yourself to see this interactivity.</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> interact,fixed,IntSlider</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> renderFpBit(mol,bitIdx,bitInfo,fn):</span>
<span id="cb7-3">    bid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bitIdx</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(display(fn(mol,bid,bitInfo)))</span></code></pre></div>
</div>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">bi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ao.GetBitInfoMap()</span>
<span id="cb8-2">interact(renderFpBit, bitIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(bi.keys()),mol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed(epinephrine),bitInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed(bi),fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed(Draw.DrawMorganBit))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>Here’s a GIF showing what the output of the above cell looks like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/images/blog/updated-bit-rendering-movie1.gif" class="img-fluid figure-img"></p>
<figcaption>animation showng interaction</figcaption>
</figure>
</div>
</section>
<section id="looking-at-rdkit-bits" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-rdkit-bits">Looking at RDKit bits</h2>
<p>We can do the same thing with RDKit bits:</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb9-2">ao <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.AdditionalOutput()</span>
<span id="cb9-3">ao.AllocateBitPaths()</span>
<span id="cb9-4"></span>
<span id="cb9-5">rdkfp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetFingerprint(epinephrine,additionalOutput<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ao)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show 10 of the set bits:</span></span>
<span id="cb9-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(rdkfp.GetOnBits())[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>[93, 103, 112, 122, 148, 149, 161, 166, 194, 208]</code></pre>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkfp.GetNumOnBits(),<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ao.GetBitPaths()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>128 128</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">Draw.DrawRDKitBit(epinephrine,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>,ao.GetBitPaths())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-29-updated-bit-rendering_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-22" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">rdkbi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ao.GetBitPaths()</span>
<span id="cb14-2">tpls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(epinephrine,x,rdkbi) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rdkbi]</span>
<span id="cb14-3">Draw.DrawRDKitBits(tpls[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rdkbi][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-29-updated-bit-rendering_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Some notes about the rendering here:</p>
<ul>
<li>The molecule fragment is drawn with the atoms in the same positions as in the original molecule.</li>
<li>All bonds that are drawn are part of the bit.</li>
<li>Aromatic atoms are highlighted in yellow</li>
<li>By default there is no additional highlighting for aliphatic ring atoms, but this can be changed using the <code>nonAromaticColor</code> optional argument.</li>
</ul>
<p>We can, of course, use the same jupyter interactivity features here as we did for the Morgan fingerprint:</p>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">interact(renderFpBit, bitIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(rdkbi.keys()),mol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed(epinephrine),bitInfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed(rdkbi),fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed(Draw.DrawRDKitBit))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>Here’s a GIF showing what the output of the above cell looks like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/images/blog/updated-bit-rendering-movie2.gif" class="img-fluid figure-img"></p>
<figcaption>animation showng interaction</figcaption>
</figure>
</div>


</section>
</section>

 ]]></description>
  <category>tutorial</category>
  <category>drawing</category>
  <category>fingerprints</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-03-29-updated-bit-rendering.html</guid>
  <pubDate>Fri, 28 Mar 2025 23:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/updated-bit-rendering-movie2.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Similarity-search hitlist overlap</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1.html</link>
  <description><![CDATA[ 




<p>One of the things I say when teaching about fingerprints and similarity searches is that there is no best fingerprint for every use case and that it’s often useful to do similarity searches using different types of fingerprints and combine the results. If you use fingerprints that use quite different features to determine similarity (e.g.&nbsp;Morgan3 and atom pairs), this is a good way to take advantage of the differences between the fingerprints.</p>
<p>The goal of this post is to explore (and try to quantitate) the differences between the hit sets returned by doing similarity searches with different fingerprint types.</p>
<p>For this post I will use the 59788 compounds tested in PubChem <a href="https://pubchem.ncbi.nlm.nih.gov/bioassay/373">Bioassay ID 373</a>. This is one of the PubChem screening assays, so the the compounds are taken from a screening deck and should be expected to be reasonably diverse with some small SAR clusters. You can directly access and download the compound structures <a href="https://www.ncbi.nlm.nih.gov/pccompound?linkname=pcassay_pccompound&amp;from_uid=373">here</a>.</p>
<p>One thing that is worth keeping in mind is that these results almost certainly consider similarity values which are down close to and probably in the region of similarities observed between <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">random compounds</a>. It may be worth refining the analysis in order to only consider similarities which are more significant, but that’s for a possible future post.</p>
<div id="6127934a" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tableau-colorblind10'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext sql</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2024.09.6</code></pre>
</div>
</div>
<div id="92e399b5" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/Pubchem_AID373_compounds.sdf.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Chem.ForwardSDMolSupplier(inf) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> suppl:</span>
<span id="cb3-4">        dbmols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> suppl <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dbmols)</span>
<span id="cb3-6">    </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>59788</code></pre>
</div>
</div>
<div id="7c3c6e8e" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">dbmols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ms</span></code></pre></div>
</div>
<div id="6a9fbf6f" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCOC1=C(C=C(C=C1)C2=NOC(=N2)C3=CC=NC=C3)OCC'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://pubchem.ncbi.nlm.nih.gov/compound/666359</span></span>
<span id="cb6-2">qry</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="2f8d196f" class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-2">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb7-3">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp2'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb7-4">                                                  atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganAtomInvGen())),</span>
<span id="cb7-5">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb7-6">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp3'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb7-7">                                                  atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganAtomInvGen())),</span>
<span id="cb7-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp1'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb7-9">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp1'</span>,rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-10">                                                  atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganAtomInvGen())),</span>
<span id="cb7-11">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tt'</span>,rdFingerprintGenerator.GetTopologicalTorsionGenerator()),</span>
<span id="cb7-12">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ap'</span>,rdFingerprintGenerator.GetAtomPairGenerator()),</span>
<span id="cb7-13">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk5'</span>,rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)),</span>
<span id="cb7-14">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk7'</span>,rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)),</span>
<span id="cb7-15">]</span>
<span id="cb7-16"></span>
<span id="cb7-17">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb7-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm,fpg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> runs:</span>
<span id="cb7-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(nm)</span>
<span id="cb7-20">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetFingerprints(dbmols,numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb7-21">    sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataStructs.BulkTanimotoSimilarity(fpg.GetFingerprint(qry),fps)</span>
<span id="cb7-22">    accum[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-b'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sims</span>
<span id="cb7-23"></span>
<span id="cb7-24">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetCountFingerprints(dbmols,numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb7-25">    sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataStructs.BulkTanimotoSimilarity(fpg.GetCountFingerprint(qry),<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fps))</span>
<span id="cb7-26">    accum[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-c'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sims</span>
<span id="cb7-27"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mfp2
ffp2
mfp3
ffp3
mfp1
ffp1
tt
ap
rdk5
rdk7</code></pre>
</div>
</div>
<div id="812f75b7" class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Pharm2D <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Gobbi_Pharm2D,Generate</span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Gobbi2D_bits(mol,fpLen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>):</span>
<span id="cb9-3">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataStructs.ExplicitBitVect(fpLen)</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bit <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Generate.Gen2DFingerprint(mol,Gobbi_Pharm2D.factory).GetOnBits():</span>
<span id="cb9-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the bits are not hashed, so we need to do so before we fold them:</span></span>
<span id="cb9-6">        res.SetBit(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>((bit,))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>fpLen)</span>
<span id="cb9-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="1c181fc1" class="cell" data-execution_count="119">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdMolDescriptors</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Avalon <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyAvalonTools</span>
<span id="cb10-3"></span>
<span id="cb10-4">func_runs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-5">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gobbi2d'</span>,Gobbi2D_bits),</span>
<span id="cb10-6">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avalon'</span>,pyAvalonTools.GetAvalonFP),</span>
<span id="cb10-7">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avalon-c'</span>,pyAvalonTools.GetAvalonCountFP),</span>
<span id="cb10-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pattern'</span>,Chem.PatternFingerprint),</span>
<span id="cb10-9">]</span>
<span id="cb10-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm,func <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> func_runs:</span>
<span id="cb10-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(nm)</span>
<span id="cb10-12">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [func(m) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dbmols]</span>
<span id="cb10-13">    sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataStructs.BulkTanimotoSimilarity(func(qry),fps)</span>
<span id="cb10-14">    accum[nm] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sims</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>gobbi2d
avalon
avalon-c
pattern</code></pre>
</div>
</div>
<p>Accumulate the overlaps between the hit sets:</p>
<div id="3c97fd94" class="cell" data-execution_count="120">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb12-2"></span>
<span id="cb12-3">nms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(accum.keys())</span>
<span id="cb12-4"></span>
<span id="cb12-5">ovls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb12-6">topNs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb12-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,nmi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(nms):</span>
<span id="cb12-8">    topi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(s,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(accum[nmi])],reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)]</span>
<span id="cb12-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i):</span>
<span id="cb12-10">        nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nms[j]</span>
<span id="cb12-11">        topj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(s,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(accum[nmj])],reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)]</span>
<span id="cb12-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> topN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> topNs:</span>
<span id="cb12-13">            ovls[nmi,nmj][topN] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(topi[:topN]).intersection(topj[:topN])</span>
<span id="cb12-14">ovls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(ovls)</span></code></pre></div>
</div>
<p>Here’s the full table of concordances between the fingerprints in the top 10, 100, and 1000 results:</p>
<div id="0f05b787" class="cell" data-execution_count="121">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HTML</span>
<span id="cb13-2"></span>
<span id="cb13-3">snms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(nms)</span>
<span id="cb13-4"></span>
<span id="cb13-5">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;table&gt;"</span></span>
<span id="cb13-6">ths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;th&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/th&gt;"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> snms)</span>
<span id="cb13-7">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;tr&gt;&lt;td&gt;&lt;/td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ths<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-8">ovls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(ovls)</span>
<span id="cb13-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(snms):</span>
<span id="cb13-10">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;th&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/th&gt;"</span></span>
<span id="cb13-11">    tds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(snms)):</span>
<span id="cb13-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>j:</span>
<span id="cb13-14">            tds.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;td&gt;&lt;/td&gt;'</span>)</span>
<span id="cb13-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb13-16">        nmi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snms[i]</span>
<span id="cb13-17">        nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snms[j]</span>
<span id="cb13-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (nmi,nmj) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ovls:</span>
<span id="cb13-19">            nmi,nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nmj,nmi</span>
<span id="cb13-20">        tds.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;td&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ovls[nmi,nmj][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;br /&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ovls[nmi,nmj][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;br /&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ovls[nmi,nmj][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/td&gt;"</span>)</span>
<span id="cb13-21">    tds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(tds)</span>
<span id="cb13-22">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> tds</span>
<span id="cb13-23">    html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"&lt;tr&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/tr&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-24"></span>
<span id="cb13-25">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/table&gt;"</span></span>
<span id="cb13-26"></span>
<span id="cb13-27">HTML(html)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="121">
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<colgroup>
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
<col style="width: 4%">
</colgroup>
<tbody>
<tr class="odd">
<td></td>
<td data-quarto-table-cell-role="th">ap-b</td>
<td data-quarto-table-cell-role="th">ap-c</td>
<td data-quarto-table-cell-role="th">avalon</td>
<td data-quarto-table-cell-role="th">avalon-c</td>
<td data-quarto-table-cell-role="th">ffp1-b</td>
<td data-quarto-table-cell-role="th">ffp1-c</td>
<td data-quarto-table-cell-role="th">ffp2-b</td>
<td data-quarto-table-cell-role="th">ffp2-c</td>
<td data-quarto-table-cell-role="th">ffp3-b</td>
<td data-quarto-table-cell-role="th">ffp3-c</td>
<td data-quarto-table-cell-role="th">gobbi2d</td>
<td data-quarto-table-cell-role="th">mfp1-b</td>
<td data-quarto-table-cell-role="th">mfp1-c</td>
<td data-quarto-table-cell-role="th">mfp2-b</td>
<td data-quarto-table-cell-role="th">mfp2-c</td>
<td data-quarto-table-cell-role="th">mfp3-b</td>
<td data-quarto-table-cell-role="th">mfp3-c</td>
<td data-quarto-table-cell-role="th">pattern</td>
<td data-quarto-table-cell-role="th">rdk5-b</td>
<td data-quarto-table-cell-role="th">rdk5-c</td>
<td data-quarto-table-cell-role="th">rdk7-b</td>
<td data-quarto-table-cell-role="th">rdk7-c</td>
<td data-quarto-table-cell-role="th">tt-b</td>
<td data-quarto-table-cell-role="th">tt-c</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ap-b</td>
<td></td>
<td>9<br>
77<br>
724</td>
<td>7<br>
40<br>
245</td>
<td>7<br>
40<br>
255</td>
<td>6<br>
43<br>
317</td>
<td>8<br>
38<br>
383</td>
<td>7<br>
46<br>
281</td>
<td>7<br>
42<br>
336</td>
<td>7<br>
43<br>
260</td>
<td>6<br>
41<br>
310</td>
<td>3<br>
51<br>
235</td>
<td>7<br>
43<br>
323</td>
<td>8<br>
41<br>
380</td>
<td>7<br>
47<br>
303</td>
<td>7<br>
43<br>
337</td>
<td>7<br>
46<br>
264</td>
<td>7<br>
45<br>
314</td>
<td>5<br>
35<br>
237</td>
<td>6<br>
46<br>
292</td>
<td>6<br>
46<br>
325</td>
<td>7<br>
47<br>
279</td>
<td>6<br>
46<br>
290</td>
<td>7<br>
39<br>
298</td>
<td>7<br>
41<br>
306</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ap-c</td>
<td>9<br>
77<br>
724</td>
<td></td>
<td>6<br>
46<br>
271</td>
<td>6<br>
49<br>
291</td>
<td>6<br>
42<br>
350</td>
<td>8<br>
45<br>
445</td>
<td>7<br>
48<br>
312</td>
<td>7<br>
44<br>
378</td>
<td>7<br>
45<br>
289</td>
<td>7<br>
44<br>
349</td>
<td>3<br>
49<br>
238</td>
<td>6<br>
46<br>
349</td>
<td>7<br>
48<br>
424</td>
<td>6<br>
47<br>
312</td>
<td>6<br>
48<br>
359</td>
<td>6<br>
47<br>
280</td>
<td>6<br>
48<br>
335</td>
<td>5<br>
41<br>
295</td>
<td>6<br>
52<br>
326</td>
<td>6<br>
51<br>
364</td>
<td>6<br>
50<br>
310</td>
<td>7<br>
48<br>
317</td>
<td>7<br>
41<br>
337</td>
<td>7<br>
47<br>
359</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">avalon</td>
<td>7<br>
40<br>
245</td>
<td>6<br>
46<br>
271</td>
<td></td>
<td>9<br>
70<br>
588</td>
<td>7<br>
57<br>
512</td>
<td>8<br>
40<br>
399</td>
<td>8<br>
57<br>
428</td>
<td>9<br>
43<br>
357</td>
<td>8<br>
51<br>
354</td>
<td>8<br>
43<br>
320</td>
<td>5<br>
37<br>
290</td>
<td>8<br>
65<br>
552</td>
<td>9<br>
48<br>
451</td>
<td>9<br>
60<br>
529</td>
<td>9<br>
50<br>
443</td>
<td>8<br>
54<br>
429</td>
<td>9<br>
51<br>
382</td>
<td>6<br>
56<br>
518</td>
<td>7<br>
83<br>
625</td>
<td>8<br>
74<br>
502</td>
<td>8<br>
73<br>
502</td>
<td>8<br>
68<br>
487</td>
<td>8<br>
54<br>
399</td>
<td>8<br>
60<br>
446</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">avalon-c</td>
<td>7<br>
40<br>
255</td>
<td>6<br>
49<br>
291</td>
<td>9<br>
70<br>
588</td>
<td></td>
<td>7<br>
50<br>
430</td>
<td>8<br>
50<br>
402</td>
<td>8<br>
46<br>
379</td>
<td>9<br>
41<br>
371</td>
<td>8<br>
44<br>
339</td>
<td>8<br>
40<br>
344</td>
<td>5<br>
37<br>
289</td>
<td>8<br>
59<br>
459</td>
<td>9<br>
57<br>
466</td>
<td>9<br>
52<br>
458</td>
<td>9<br>
50<br>
469</td>
<td>8<br>
47<br>
399</td>
<td>9<br>
46<br>
430</td>
<td>6<br>
62<br>
532</td>
<td>7<br>
63<br>
494</td>
<td>8<br>
69<br>
478</td>
<td>8<br>
61<br>
424</td>
<td>8<br>
68<br>
458</td>
<td>8<br>
50<br>
361</td>
<td>8<br>
57<br>
393</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ffp1-b</td>
<td>6<br>
43<br>
317</td>
<td>6<br>
42<br>
350</td>
<td>7<br>
57<br>
512</td>
<td>7<br>
50<br>
430</td>
<td></td>
<td>7<br>
60<br>
586</td>
<td>9<br>
68<br>
671</td>
<td>8<br>
54<br>
547</td>
<td>9<br>
55<br>
573</td>
<td>8<br>
52<br>
496</td>
<td>6<br>
37<br>
263</td>
<td>9<br>
82<br>
759</td>
<td>7<br>
60<br>
562</td>
<td>8<br>
67<br>
662</td>
<td>8<br>
59<br>
529</td>
<td>8<br>
59<br>
542</td>
<td>8<br>
57<br>
469</td>
<td>5<br>
50<br>
436</td>
<td>7<br>
58<br>
563</td>
<td>8<br>
54<br>
485</td>
<td>8<br>
57<br>
458</td>
<td>7<br>
49<br>
441</td>
<td>8<br>
65<br>
514</td>
<td>8<br>
63<br>
544</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ffp1-c</td>
<td>8<br>
38<br>
383</td>
<td>8<br>
45<br>
445</td>
<td>8<br>
40<br>
399</td>
<td>8<br>
50<br>
402</td>
<td>7<br>
60<br>
586</td>
<td></td>
<td>8<br>
60<br>
560</td>
<td>9<br>
70<br>
722</td>
<td>8<br>
55<br>
507</td>
<td>8<br>
65<br>
633</td>
<td>5<br>
39<br>
292</td>
<td>7<br>
59<br>
539</td>
<td>9<br>
80<br>
674</td>
<td>8<br>
59<br>
527</td>
<td>8<br>
68<br>
598</td>
<td>7<br>
60<br>
461</td>
<td>8<br>
64<br>
532</td>
<td>6<br>
48<br>
385</td>
<td>8<br>
41<br>
449</td>
<td>8<br>
44<br>
473</td>
<td>7<br>
40<br>
405</td>
<td>8<br>
43<br>
442</td>
<td>9<br>
60<br>
543</td>
<td>9<br>
62<br>
579</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ffp2-b</td>
<td>7<br>
46<br>
281</td>
<td>7<br>
48<br>
312</td>
<td>8<br>
57<br>
428</td>
<td>8<br>
46<br>
379</td>
<td>9<br>
68<br>
671</td>
<td>8<br>
60<br>
560</td>
<td></td>
<td>9<br>
75<br>
682</td>
<td>10<br>
82<br>
804</td>
<td>9<br>
73<br>
649</td>
<td>6<br>
49<br>
285</td>
<td>9<br>
62<br>
582</td>
<td>8<br>
61<br>
483</td>
<td>9<br>
84<br>
658</td>
<td>9<br>
78<br>
539</td>
<td>9<br>
82<br>
598</td>
<td>9<br>
79<br>
510</td>
<td>5<br>
39<br>
385</td>
<td>8<br>
61<br>
511</td>
<td>8<br>
56<br>
479</td>
<td>9<br>
63<br>
453</td>
<td>8<br>
57<br>
447</td>
<td>9<br>
70<br>
595</td>
<td>9<br>
74<br>
611</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ffp2-c</td>
<td>7<br>
42<br>
336</td>
<td>7<br>
44<br>
378</td>
<td>9<br>
43<br>
357</td>
<td>9<br>
41<br>
371</td>
<td>8<br>
54<br>
547</td>
<td>9<br>
70<br>
722</td>
<td>9<br>
75<br>
682</td>
<td></td>
<td>9<br>
78<br>
669</td>
<td>9<br>
90<br>
848</td>
<td>6<br>
41<br>
314</td>
<td>8<br>
52<br>
483</td>
<td>9<br>
65<br>
564</td>
<td>9<br>
71<br>
559</td>
<td>9<br>
81<br>
655</td>
<td>8<br>
76<br>
553</td>
<td>9<br>
80<br>
625</td>
<td>6<br>
32<br>
347</td>
<td>8<br>
47<br>
430</td>
<td>9<br>
45<br>
441</td>
<td>8<br>
47<br>
387</td>
<td>9<br>
44<br>
413</td>
<td>9<br>
64<br>
578</td>
<td>9<br>
67<br>
603</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ffp3-b</td>
<td>7<br>
43<br>
260</td>
<td>7<br>
45<br>
289</td>
<td>8<br>
51<br>
354</td>
<td>8<br>
44<br>
339</td>
<td>9<br>
55<br>
573</td>
<td>8<br>
55<br>
507</td>
<td>10<br>
82<br>
804</td>
<td>9<br>
78<br>
669</td>
<td></td>
<td>9<br>
81<br>
715</td>
<td>6<br>
45<br>
277</td>
<td>9<br>
54<br>
498</td>
<td>8<br>
58<br>
450</td>
<td>9<br>
74<br>
606</td>
<td>9<br>
77<br>
543</td>
<td>9<br>
86<br>
617</td>
<td>9<br>
82<br>
547</td>
<td>5<br>
34<br>
337</td>
<td>8<br>
56<br>
443</td>
<td>8<br>
54<br>
431</td>
<td>9<br>
60<br>
397</td>
<td>8<br>
54<br>
395</td>
<td>9<br>
63<br>
538</td>
<td>9<br>
67<br>
546</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ffp3-c</td>
<td>6<br>
41<br>
310</td>
<td>7<br>
44<br>
349</td>
<td>8<br>
43<br>
320</td>
<td>8<br>
40<br>
344</td>
<td>8<br>
52<br>
496</td>
<td>8<br>
65<br>
633</td>
<td>9<br>
73<br>
649</td>
<td>9<br>
90<br>
848</td>
<td>9<br>
81<br>
715</td>
<td></td>
<td>6<br>
41<br>
307</td>
<td>8<br>
50<br>
440</td>
<td>8<br>
63<br>
519</td>
<td>9<br>
69<br>
535</td>
<td>9<br>
79<br>
648</td>
<td>8<br>
79<br>
565</td>
<td>9<br>
82<br>
645</td>
<td>6<br>
32<br>
314</td>
<td>8<br>
47<br>
394</td>
<td>8<br>
45<br>
413</td>
<td>8<br>
47<br>
363</td>
<td>9<br>
44<br>
383</td>
<td>9<br>
60<br>
548</td>
<td>9<br>
63<br>
570</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">gobbi2d</td>
<td>3<br>
51<br>
235</td>
<td>3<br>
49<br>
238</td>
<td>5<br>
37<br>
290</td>
<td>5<br>
37<br>
289</td>
<td>6<br>
37<br>
263</td>
<td>5<br>
39<br>
292</td>
<td>6<br>
49<br>
285</td>
<td>6<br>
41<br>
314</td>
<td>6<br>
45<br>
277</td>
<td>6<br>
41<br>
307</td>
<td></td>
<td>5<br>
40<br>
280</td>
<td>5<br>
42<br>
309</td>
<td>6<br>
55<br>
319</td>
<td>6<br>
48<br>
351</td>
<td>5<br>
49<br>
301</td>
<td>6<br>
48<br>
346</td>
<td>3<br>
33<br>
238</td>
<td>7<br>
42<br>
349</td>
<td>7<br>
41<br>
367</td>
<td>5<br>
44<br>
367</td>
<td>5<br>
43<br>
371</td>
<td>6<br>
44<br>
278</td>
<td>6<br>
41<br>
304</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mfp1-b</td>
<td>7<br>
43<br>
323</td>
<td>6<br>
46<br>
349</td>
<td>8<br>
65<br>
552</td>
<td>8<br>
59<br>
459</td>
<td>9<br>
82<br>
759</td>
<td>7<br>
59<br>
539</td>
<td>9<br>
62<br>
582</td>
<td>8<br>
52<br>
483</td>
<td>9<br>
54<br>
498</td>
<td>8<br>
50<br>
440</td>
<td>5<br>
40<br>
280</td>
<td></td>
<td>8<br>
66<br>
645</td>
<td>9<br>
68<br>
729</td>
<td>9<br>
60<br>
582</td>
<td>9<br>
59<br>
580</td>
<td>9<br>
57<br>
505</td>
<td>5<br>
57<br>
443</td>
<td>7<br>
63<br>
581</td>
<td>7<br>
57<br>
494</td>
<td>9<br>
60<br>
455</td>
<td>7<br>
52<br>
444</td>
<td>8<br>
61<br>
461</td>
<td>8<br>
60<br>
507</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mfp1-c</td>
<td>8<br>
41<br>
380</td>
<td>7<br>
48<br>
424</td>
<td>9<br>
48<br>
451</td>
<td>9<br>
57<br>
466</td>
<td>7<br>
60<br>
562</td>
<td>9<br>
80<br>
674</td>
<td>8<br>
61<br>
483</td>
<td>9<br>
65<br>
564</td>
<td>8<br>
58<br>
450</td>
<td>8<br>
63<br>
519</td>
<td>5<br>
42<br>
309</td>
<td>8<br>
66<br>
645</td>
<td></td>
<td>9<br>
65<br>
613</td>
<td>9<br>
75<br>
729</td>
<td>8<br>
65<br>
530</td>
<td>9<br>
69<br>
628</td>
<td>6<br>
53<br>
408</td>
<td>7<br>
48<br>
481</td>
<td>8<br>
51<br>
483</td>
<td>8<br>
48<br>
414</td>
<td>8<br>
50<br>
439</td>
<td>8<br>
59<br>
434</td>
<td>8<br>
60<br>
482</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mfp2-b</td>
<td>7<br>
47<br>
303</td>
<td>6<br>
47<br>
312</td>
<td>9<br>
60<br>
529</td>
<td>9<br>
52<br>
458</td>
<td>8<br>
67<br>
662</td>
<td>8<br>
59<br>
527</td>
<td>9<br>
84<br>
658</td>
<td>9<br>
71<br>
559</td>
<td>9<br>
74<br>
606</td>
<td>9<br>
69<br>
535</td>
<td>6<br>
55<br>
319</td>
<td>9<br>
68<br>
729</td>
<td>9<br>
65<br>
613</td>
<td></td>
<td>10<br>
81<br>
694</td>
<td>9<br>
83<br>
780</td>
<td>10<br>
80<br>
643</td>
<td>6<br>
44<br>
449</td>
<td>8<br>
61<br>
605</td>
<td>8<br>
57<br>
534</td>
<td>9<br>
64<br>
504</td>
<td>8<br>
57<br>
490</td>
<td>9<br>
74<br>
480</td>
<td>9<br>
75<br>
521</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mfp2-c</td>
<td>7<br>
43<br>
337</td>
<td>6<br>
48<br>
359</td>
<td>9<br>
50<br>
443</td>
<td>9<br>
50<br>
469</td>
<td>8<br>
59<br>
529</td>
<td>8<br>
68<br>
598</td>
<td>9<br>
78<br>
539</td>
<td>9<br>
81<br>
655</td>
<td>9<br>
77<br>
543</td>
<td>9<br>
79<br>
648</td>
<td>6<br>
48<br>
351</td>
<td>9<br>
60<br>
582</td>
<td>9<br>
75<br>
729</td>
<td>10<br>
81<br>
694</td>
<td></td>
<td>9<br>
84<br>
679</td>
<td>10<br>
89<br>
844</td>
<td>6<br>
41<br>
393</td>
<td>8<br>
53<br>
483</td>
<td>8<br>
51<br>
488</td>
<td>9<br>
54<br>
440</td>
<td>8<br>
51<br>
461</td>
<td>9<br>
67<br>
456</td>
<td>9<br>
71<br>
507</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mfp3-b</td>
<td>7<br>
46<br>
264</td>
<td>6<br>
47<br>
280</td>
<td>8<br>
54<br>
429</td>
<td>8<br>
47<br>
399</td>
<td>8<br>
59<br>
542</td>
<td>7<br>
60<br>
461</td>
<td>9<br>
82<br>
598</td>
<td>8<br>
76<br>
553</td>
<td>9<br>
86<br>
617</td>
<td>8<br>
79<br>
565</td>
<td>5<br>
49<br>
301</td>
<td>9<br>
59<br>
580</td>
<td>8<br>
65<br>
530</td>
<td>9<br>
83<br>
780</td>
<td>9<br>
84<br>
679</td>
<td></td>
<td>9<br>
89<br>
735</td>
<td>5<br>
39<br>
382</td>
<td>7<br>
58<br>
516</td>
<td>7<br>
57<br>
470</td>
<td>9<br>
63<br>
459</td>
<td>7<br>
58<br>
447</td>
<td>8<br>
67<br>
444</td>
<td>8<br>
70<br>
477</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mfp3-c</td>
<td>7<br>
45<br>
314</td>
<td>6<br>
48<br>
335</td>
<td>9<br>
51<br>
382</td>
<td>9<br>
46<br>
430</td>
<td>8<br>
57<br>
469</td>
<td>8<br>
64<br>
532</td>
<td>9<br>
79<br>
510</td>
<td>9<br>
80<br>
625</td>
<td>9<br>
82<br>
547</td>
<td>9<br>
82<br>
645</td>
<td>6<br>
48<br>
346</td>
<td>9<br>
57<br>
505</td>
<td>9<br>
69<br>
628</td>
<td>10<br>
80<br>
643</td>
<td>10<br>
89<br>
844</td>
<td>9<br>
89<br>
735</td>
<td></td>
<td>6<br>
39<br>
360</td>
<td>8<br>
55<br>
436</td>
<td>8<br>
52<br>
446</td>
<td>9<br>
56<br>
412</td>
<td>8<br>
51<br>
424</td>
<td>9<br>
65<br>
431</td>
<td>9<br>
70<br>
472</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pattern</td>
<td>5<br>
35<br>
237</td>
<td>5<br>
41<br>
295</td>
<td>6<br>
56<br>
518</td>
<td>6<br>
62<br>
532</td>
<td>5<br>
50<br>
436</td>
<td>6<br>
48<br>
385</td>
<td>5<br>
39<br>
385</td>
<td>6<br>
32<br>
347</td>
<td>5<br>
34<br>
337</td>
<td>6<br>
32<br>
314</td>
<td>3<br>
33<br>
238</td>
<td>5<br>
57<br>
443</td>
<td>6<br>
53<br>
408</td>
<td>6<br>
44<br>
449</td>
<td>6<br>
41<br>
393</td>
<td>5<br>
39<br>
382</td>
<td>6<br>
39<br>
360</td>
<td></td>
<td>5<br>
51<br>
513</td>
<td>6<br>
49<br>
432</td>
<td>5<br>
52<br>
393</td>
<td>6<br>
51<br>
398</td>
<td>6<br>
45<br>
347</td>
<td>6<br>
47<br>
385</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">rdk5-b</td>
<td>6<br>
46<br>
292</td>
<td>6<br>
52<br>
326</td>
<td>7<br>
83<br>
625</td>
<td>7<br>
63<br>
494</td>
<td>7<br>
58<br>
563</td>
<td>8<br>
41<br>
449</td>
<td>8<br>
61<br>
511</td>
<td>8<br>
47<br>
430</td>
<td>8<br>
56<br>
443</td>
<td>8<br>
47<br>
394</td>
<td>7<br>
42<br>
349</td>
<td>7<br>
63<br>
581</td>
<td>7<br>
48<br>
481</td>
<td>8<br>
61<br>
605</td>
<td>8<br>
53<br>
483</td>
<td>7<br>
58<br>
516</td>
<td>8<br>
55<br>
436</td>
<td>5<br>
51<br>
513</td>
<td></td>
<td>8<br>
83<br>
736</td>
<td>7<br>
84<br>
705</td>
<td>7<br>
73<br>
663</td>
<td>9<br>
61<br>
504</td>
<td>9<br>
67<br>
548</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">rdk5-c</td>
<td>6<br>
46<br>
325</td>
<td>6<br>
51<br>
364</td>
<td>8<br>
74<br>
502</td>
<td>8<br>
69<br>
478</td>
<td>8<br>
54<br>
485</td>
<td>8<br>
44<br>
473</td>
<td>8<br>
56<br>
479</td>
<td>9<br>
45<br>
441</td>
<td>8<br>
54<br>
431</td>
<td>8<br>
45<br>
413</td>
<td>7<br>
41<br>
367</td>
<td>7<br>
57<br>
494</td>
<td>8<br>
51<br>
483</td>
<td>8<br>
57<br>
534</td>
<td>8<br>
51<br>
488</td>
<td>7<br>
57<br>
470</td>
<td>8<br>
52<br>
446</td>
<td>6<br>
49<br>
432</td>
<td>8<br>
83<br>
736</td>
<td></td>
<td>7<br>
85<br>
701</td>
<td>8<br>
86<br>
812</td>
<td>8<br>
59<br>
509</td>
<td>8<br>
64<br>
539</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">rdk7-b</td>
<td>7<br>
47<br>
279</td>
<td>6<br>
50<br>
310</td>
<td>8<br>
73<br>
502</td>
<td>8<br>
61<br>
424</td>
<td>8<br>
57<br>
458</td>
<td>7<br>
40<br>
405</td>
<td>9<br>
63<br>
453</td>
<td>8<br>
47<br>
387</td>
<td>9<br>
60<br>
397</td>
<td>8<br>
47<br>
363</td>
<td>5<br>
44<br>
367</td>
<td>9<br>
60<br>
455</td>
<td>8<br>
48<br>
414</td>
<td>9<br>
64<br>
504</td>
<td>9<br>
54<br>
440</td>
<td>9<br>
63<br>
459</td>
<td>9<br>
56<br>
412</td>
<td>5<br>
52<br>
393</td>
<td>7<br>
84<br>
705</td>
<td>7<br>
85<br>
701</td>
<td></td>
<td>7<br>
85<br>
776</td>
<td>8<br>
63<br>
468</td>
<td>8<br>
67<br>
490</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">rdk7-c</td>
<td>6<br>
46<br>
290</td>
<td>7<br>
48<br>
317</td>
<td>8<br>
68<br>
487</td>
<td>8<br>
68<br>
458</td>
<td>7<br>
49<br>
441</td>
<td>8<br>
43<br>
442</td>
<td>8<br>
57<br>
447</td>
<td>9<br>
44<br>
413</td>
<td>8<br>
54<br>
395</td>
<td>9<br>
44<br>
383</td>
<td>5<br>
43<br>
371</td>
<td>7<br>
52<br>
444</td>
<td>8<br>
50<br>
439</td>
<td>8<br>
57<br>
490</td>
<td>8<br>
51<br>
461</td>
<td>7<br>
58<br>
447</td>
<td>8<br>
51<br>
424</td>
<td>6<br>
51<br>
398</td>
<td>7<br>
73<br>
663</td>
<td>8<br>
86<br>
812</td>
<td>7<br>
85<br>
776</td>
<td></td>
<td>8<br>
57<br>
493</td>
<td>8<br>
62<br>
518</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">tt-b</td>
<td>7<br>
39<br>
298</td>
<td>7<br>
41<br>
337</td>
<td>8<br>
54<br>
399</td>
<td>8<br>
50<br>
361</td>
<td>8<br>
65<br>
514</td>
<td>9<br>
60<br>
543</td>
<td>9<br>
70<br>
595</td>
<td>9<br>
64<br>
578</td>
<td>9<br>
63<br>
538</td>
<td>9<br>
60<br>
548</td>
<td>6<br>
44<br>
278</td>
<td>8<br>
61<br>
461</td>
<td>8<br>
59<br>
434</td>
<td>9<br>
74<br>
480</td>
<td>9<br>
67<br>
456</td>
<td>8<br>
67<br>
444</td>
<td>9<br>
65<br>
431</td>
<td>6<br>
45<br>
347</td>
<td>9<br>
61<br>
504</td>
<td>8<br>
59<br>
509</td>
<td>8<br>
63<br>
468</td>
<td>8<br>
57<br>
493</td>
<td></td>
<td>10<br>
87<br>
853</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">tt-c</td>
<td>7<br>
41<br>
306</td>
<td>7<br>
47<br>
359</td>
<td>8<br>
60<br>
446</td>
<td>8<br>
57<br>
393</td>
<td>8<br>
63<br>
544</td>
<td>9<br>
62<br>
579</td>
<td>9<br>
74<br>
611</td>
<td>9<br>
67<br>
603</td>
<td>9<br>
67<br>
546</td>
<td>9<br>
63<br>
570</td>
<td>6<br>
41<br>
304</td>
<td>8<br>
60<br>
507</td>
<td>8<br>
60<br>
482</td>
<td>9<br>
75<br>
521</td>
<td>9<br>
71<br>
507</td>
<td>8<br>
70<br>
477</td>
<td>9<br>
70<br>
472</td>
<td>6<br>
47<br>
385</td>
<td>9<br>
67<br>
548</td>
<td>8<br>
64<br>
539</td>
<td>8<br>
67<br>
490</td>
<td>8<br>
62<br>
518</td>
<td>10<br>
87<br>
853</td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Look at the highest overlaps (most similar results) for each FP:</p>
<div id="73a46d7e" class="cell" data-scrolled="false" data-execution_count="124">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">snms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(nms)</span>
<span id="cb14-2"></span>
<span id="cb14-3">ovls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(ovls)</span>
<span id="cb14-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(snms)):</span>
<span id="cb14-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>)</span>
<span id="cb14-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(snms[i])</span>
<span id="cb14-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cnt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>):</span>
<span id="cb14-8">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(snms)):</span>
<span id="cb14-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>j:</span>
<span id="cb14-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb14-12">            nmi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snms[i]</span>
<span id="cb14-13">            nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snms[j]</span>
<span id="cb14-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (nmi,nmj) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ovls:</span>
<span id="cb14-15">                nmi,nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nmj,nmi</span>
<span id="cb14-16">            row.append((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ovls[nmi,nmj][cnt]),j))</span>
<span id="cb14-17">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(row,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-18">        nbrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb14-20">            nbrs.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>snms[row[j][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[j][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb14-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cnt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 5d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:13s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:13s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:13s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------------------------------------------------------------------
ap-b
       10 ap-c(9)       mfp1-c(8)     ffp1-c(8)    
      100 ap-c(77)      gobbi2d(51)   rdk7-b(47)   
     1000 ap-c(724)     ffp1-c(383)   mfp1-c(380)  
----------------------------------------------------------------------
ap-c
       10 ap-b(9)       ffp1-c(8)     tt-c(7)      
      100 ap-b(77)      rdk5-b(52)    rdk5-c(51)   
     1000 ap-b(724)     ffp1-c(445)   mfp1-c(424)  
----------------------------------------------------------------------
avalon
       10 mfp3-c(9)     mfp2-c(9)     mfp2-b(9)    
      100 rdk5-b(83)    rdk5-c(74)    rdk7-b(73)   
     1000 rdk5-b(625)   avalon-c(588) mfp1-b(552)  
----------------------------------------------------------------------
avalon-c
       10 mfp3-c(9)     mfp2-c(9)     mfp2-b(9)    
      100 avalon(70)    rdk5-c(69)    rdk7-c(68)   
     1000 avalon(588)   pattern(532)  rdk5-b(494)  
----------------------------------------------------------------------
ffp1-b
       10 mfp1-b(9)     ffp3-b(9)     ffp2-b(9)    
      100 mfp1-b(82)    ffp2-b(68)    mfp2-b(67)   
     1000 mfp1-b(759)   ffp2-b(671)   mfp2-b(662)  
----------------------------------------------------------------------
ffp1-c
       10 tt-c(9)       tt-b(9)       mfp1-c(9)    
      100 mfp1-c(80)    ffp2-c(70)    mfp2-c(68)   
     1000 ffp2-c(722)   mfp1-c(674)   ffp3-c(633)  
----------------------------------------------------------------------
ffp2-b
       10 ffp3-b(10)    tt-c(9)       tt-b(9)      
      100 mfp2-b(84)    mfp3-b(82)    ffp3-b(82)   
     1000 ffp3-b(804)   ffp2-c(682)   ffp1-b(671)  
----------------------------------------------------------------------
ffp2-c
       10 tt-c(9)       tt-b(9)       rdk7-c(9)    
      100 ffp3-c(90)    mfp2-c(81)    mfp3-c(80)   
     1000 ffp3-c(848)   ffp1-c(722)   ffp2-b(682)  
----------------------------------------------------------------------
ffp3-b
       10 ffp2-b(10)    tt-c(9)       tt-b(9)      
      100 mfp3-b(86)    mfp3-c(82)    ffp2-b(82)   
     1000 ffp2-b(804)   ffp3-c(715)   ffp2-c(669)  
----------------------------------------------------------------------
ffp3-c
       10 tt-c(9)       tt-b(9)       rdk7-c(9)    
      100 ffp2-c(90)    mfp3-c(82)    ffp3-b(81)   
     1000 ffp2-c(848)   ffp3-b(715)   ffp2-b(649)  
----------------------------------------------------------------------
gobbi2d
       10 rdk5-c(7)     rdk5-b(7)     tt-c(6)      
      100 mfp2-b(55)    ap-b(51)      mfp3-b(49)   
     1000 rdk7-c(371)   rdk7-b(367)   rdk5-c(367)  
----------------------------------------------------------------------
mfp1-b
       10 rdk7-b(9)     mfp3-c(9)     mfp3-b(9)    
      100 ffp1-b(82)    mfp2-b(68)    mfp1-c(66)   
     1000 ffp1-b(759)   mfp2-b(729)   mfp1-c(645)  
----------------------------------------------------------------------
mfp1-c
       10 mfp3-c(9)     mfp2-c(9)     mfp2-b(9)    
      100 ffp1-c(80)    mfp2-c(75)    mfp3-c(69)   
     1000 mfp2-c(729)   ffp1-c(674)   mfp1-b(645)  
----------------------------------------------------------------------
mfp2-b
       10 mfp3-c(10)    mfp2-c(10)    tt-c(9)      
      100 ffp2-b(84)    mfp3-b(83)    mfp2-c(81)   
     1000 mfp3-b(780)   mfp1-b(729)   mfp2-c(694)  
----------------------------------------------------------------------
mfp2-c
       10 mfp3-c(10)    mfp2-b(10)    tt-c(9)      
      100 mfp3-c(89)    mfp3-b(84)    mfp2-b(81)   
     1000 mfp3-c(844)   mfp1-c(729)   mfp2-b(694)  
----------------------------------------------------------------------
mfp3-b
       10 rdk7-b(9)     mfp3-c(9)     mfp2-c(9)    
      100 mfp3-c(89)    ffp3-b(86)    mfp2-c(84)   
     1000 mfp2-b(780)   mfp3-c(735)   mfp2-c(679)  
----------------------------------------------------------------------
mfp3-c
       10 mfp2-c(10)    mfp2-b(10)    tt-c(9)      
      100 mfp3-b(89)    mfp2-c(89)    ffp3-c(82)   
     1000 mfp2-c(844)   mfp3-b(735)   ffp3-c(645)  
----------------------------------------------------------------------
pattern
       10 tt-c(6)       tt-b(6)       rdk7-c(6)    
      100 avalon-c(62)  mfp1-b(57)    avalon(56)   
     1000 avalon-c(532) avalon(518)   rdk5-b(513)  
----------------------------------------------------------------------
rdk5-b
       10 tt-c(9)       tt-b(9)       rdk5-c(8)    
      100 rdk7-b(84)    rdk5-c(83)    avalon(83)   
     1000 rdk5-c(736)   rdk7-b(705)   rdk7-c(663)  
----------------------------------------------------------------------
rdk5-c
       10 ffp2-c(9)     tt-c(8)       tt-b(8)      
      100 rdk7-c(86)    rdk7-b(85)    rdk5-b(83)   
     1000 rdk7-c(812)   rdk5-b(736)   rdk7-b(701)  
----------------------------------------------------------------------
rdk7-b
       10 mfp3-c(9)     mfp3-b(9)     mfp2-c(9)    
      100 rdk7-c(85)    rdk5-c(85)    rdk5-b(84)   
     1000 rdk7-c(776)   rdk5-b(705)   rdk5-c(701)  
----------------------------------------------------------------------
rdk7-c
       10 ffp3-c(9)     ffp2-c(9)     tt-c(8)      
      100 rdk5-c(86)    rdk7-b(85)    rdk5-b(73)   
     1000 rdk5-c(812)   rdk7-b(776)   rdk5-b(663)  
----------------------------------------------------------------------
tt-b
       10 tt-c(10)      rdk5-b(9)     mfp3-c(9)    
      100 tt-c(87)      mfp2-b(74)    ffp2-b(70)   
     1000 tt-c(853)     ffp2-b(595)   ffp2-c(578)  
----------------------------------------------------------------------
tt-c
       10 tt-b(10)      rdk5-b(9)     mfp3-c(9)    
      100 tt-b(87)      mfp2-b(75)    ffp2-b(74)   
     1000 tt-b(853)     ffp2-b(611)   ffp2-c(603)  </code></pre>
</div>
</div>
<section id="do-some-statistics" class="level1">
<h1>Do some statistics</h1>
<p>Those were just results for a single query molecule. Let’s try and get more robust results by picking 500 molecules and looking at statistics for the overlaps:</p>
<div id="4e9b9dbb" class="cell" data-execution_count="232">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb16-2">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xbad5eed</span>)</span>
<span id="cb16-3">order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dbmols)))</span>
<span id="cb16-4">random.shuffle(order)</span>
<span id="cb16-5"></span>
<span id="cb16-6"></span>
<span id="cb16-7">nToDo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb16-8">order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> order[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>]</span>
<span id="cb16-9"></span>
<span id="cb16-10"></span>
<span id="cb16-11"></span>
<span id="cb16-12">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm,fpg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> runs:</span>
<span id="cb16-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(nm)</span>
<span id="cb16-15">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fpg.GetFingerprints(dbmols,numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb16-16">    taccum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> order:</span>
<span id="cb16-18">        qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fps[i]</span>
<span id="cb16-19">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(sim,j) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j,sim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(DataStructs.BulkTanimotoSimilarity(qry,fps))]</span>
<span id="cb16-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the self similarity</span></span>
<span id="cb16-21">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> sims[i]</span>
<span id="cb16-22">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(sims,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb16-23">        taccum.append(sims)</span>
<span id="cb16-24">    accum[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-b'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> taccum</span>
<span id="cb16-25"></span>
<span id="cb16-26">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fpg.GetCountFingerprints(dbmols,numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb16-27">    taccum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> order:</span>
<span id="cb16-29">        qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fps[i]</span>
<span id="cb16-30">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(sim,j) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j,sim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(DataStructs.BulkTanimotoSimilarity(qry,fps))]</span>
<span id="cb16-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the self similarity</span></span>
<span id="cb16-32">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> sims[i]</span>
<span id="cb16-33">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(sims,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb16-34">        taccum.append(sims)</span>
<span id="cb16-35">    accum[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-c'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> taccum</span>
<span id="cb16-36"></span>
<span id="cb16-37"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm,func <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> func_runs:</span>
<span id="cb16-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(nm)</span>
<span id="cb16-39">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [func(m) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dbmols]</span>
<span id="cb16-40">    taccum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> order:</span>
<span id="cb16-42">        qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fps[i]</span>
<span id="cb16-43">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(sim,j) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j,sim <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(DataStructs.BulkTanimotoSimilarity(qry,fps))]</span>
<span id="cb16-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the self similarity</span></span>
<span id="cb16-45">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> sims[i]</span>
<span id="cb16-46">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(sims,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb16-47">        taccum.append(sims)</span>
<span id="cb16-48">    accum[nm] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> taccum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mfp2
ffp2
mfp3
ffp3
mfp1
ffp1
tt
ap
rdk5
rdk7
gobbi2d
avalon
avalon-c
pattern</code></pre>
</div>
</div>
<div id="0ce4aa9c" class="cell" data-execution_count="162">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb18-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/sim_overlaps.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb18-4">    pickle.dump(accum,outf)</span></code></pre></div>
</div>
<p>Accumulate the overlaps:</p>
<div id="04426233" class="cell" data-execution_count="164">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb19-2"></span>
<span id="cb19-3">nms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(accum.keys())</span>
<span id="cb19-4"></span>
<span id="cb19-5">ovls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb19-6">topNs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb19-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,nmi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(nms):</span>
<span id="cb19-8">    nruns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(accum[nmi])</span>
<span id="cb19-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i):</span>
<span id="cb19-10">        nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nms[j]</span>
<span id="cb19-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> topN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> topNs:</span>
<span id="cb19-12">            ovls[nmi,nmj][topN] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> run <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nruns):</span>
<span id="cb19-14">            topi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum[nmi][run]]</span>
<span id="cb19-15">            topj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum[nmj][run]]</span>
<span id="cb19-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> topN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> topNs:</span>
<span id="cb19-17">                ovls[nmi,nmj][topN].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(topi[:topN]).intersection(topj[:topN])))</span>
<span id="cb19-18">ovls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(ovls)</span></code></pre></div>
</div>
<p>Find the most similar fingerprint types for each of the fingerprints, this time using the mean overlap across the 500 hit sets:</p>
<div id="f87c6e49" class="cell" data-scrolled="false" data-execution_count="165">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">snms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(nms)</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(snms)):</span>
<span id="cb20-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>)</span>
<span id="cb20-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(snms[i])</span>
<span id="cb20-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cnt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>):</span>
<span id="cb20-7">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(snms)):</span>
<span id="cb20-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>j:</span>
<span id="cb20-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb20-11">            nmi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snms[i]</span>
<span id="cb20-12">            nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> snms[j]</span>
<span id="cb20-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (nmi,nmj) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ovls:</span>
<span id="cb20-14">                nmi,nmj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nmj,nmi</span>
<span id="cb20-15">            row.append((np.mean(ovls[nmi,nmj][cnt]),j))</span>
<span id="cb20-16">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(row,reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-17">        nbrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb20-19">            nbrs.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>snms[row[j][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:8s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[j][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:5.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb20-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cnt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 5d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:17s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:17s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:16s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----------------------------------------------------------------------
ap-b
       10 ap-c    (  8.1)   ffp1-c  (  5.0)   mfp1-c  (  5.0) 
      100 ap-c    ( 74.9)   ffp1-c  ( 40.7)   mfp1-c  ( 39.7) 
     1000 ap-c    (732.9)   ffp1-c  (395.4)   mfp1-c  (370.4) 
----------------------------------------------------------------------
ap-c
       10 ap-b    (  8.1)   ffp2-c  (  5.1)   ffp1-c  (  5.1) 
      100 ap-b    ( 74.9)   ffp1-c  ( 43.6)   mfp1-c  ( 41.9) 
     1000 ap-b    (732.9)   ffp1-c  (432.4)   mfp1-c  (402.0) 
----------------------------------------------------------------------
avalon
       10 avalon-c(  5.6)   rdk7-b  (  5.4)   rdk5-b  (  5.3) 
      100 avalon-c( 49.7)   rdk5-b  ( 49.3)   rdk7-b  ( 48.1) 
     1000 avalon-c(452.4)   rdk5-b  (403.7)   rdk5-c  (370.2) 
----------------------------------------------------------------------
avalon-c
       10 avalon  (  5.6)   rdk5-c  (  5.4)   rdk7-c  (  5.1) 
      100 avalon  ( 49.7)   rdk5-c  ( 45.9)   rdk7-c  ( 43.2) 
     1000 avalon  (452.4)   rdk5-c  (378.0)   rdk7-c  (358.5) 
----------------------------------------------------------------------
ffp1-b
       10 mfp1-b  (  7.2)   ffp2-b  (  6.7)   mfp2-b  (  6.2) 
      100 mfp1-b  ( 66.2)   ffp2-b  ( 64.0)   mfp2-b  ( 56.8) 
     1000 ffp2-b  (645.2)   mfp1-b  (622.2)   mfp2-b  (545.6) 
----------------------------------------------------------------------
ffp1-c
       10 mfp1-c  (  7.6)   ffp2-c  (  7.0)   mfp2-c  (  6.5) 
      100 mfp1-c  ( 68.0)   ffp2-c  ( 66.5)   mfp2-c  ( 58.3) 
     1000 ffp2-c  (698.4)   mfp1-c  (652.9)   ffp3-c  (610.5) 
----------------------------------------------------------------------
ffp2-b
       10 ffp3-b  (  8.2)   mfp2-b  (  7.9)   mfp3-b  (  7.5) 
      100 ffp3-b  ( 80.2)   mfp2-b  ( 74.1)   mfp3-b  ( 70.4) 
     1000 ffp3-b  (797.6)   mfp2-b  (679.3)   mfp3-b  (651.9) 
----------------------------------------------------------------------
ffp2-c
       10 ffp3-c  (  8.3)   mfp2-c  (  8.1)   mfp3-c  (  7.5) 
      100 ffp3-c  ( 82.2)   mfp2-c  ( 74.4)   mfp3-c  ( 70.8) 
     1000 ffp3-c  (840.0)   mfp2-c  (700.4)   ffp1-c  (698.4) 
----------------------------------------------------------------------
ffp3-b
       10 ffp2-b  (  8.2)   mfp3-b  (  8.1)   mfp2-b  (  7.5) 
      100 ffp2-b  ( 80.2)   mfp3-b  ( 74.7)   ffp3-c  ( 69.5) 
     1000 ffp2-b  (797.6)   mfp3-b  (662.3)   ffp3-c  (660.8) 
----------------------------------------------------------------------
ffp3-c
       10 ffp2-c  (  8.3)   mfp3-c  (  8.2)   mfp2-c  (  7.6) 
      100 ffp2-c  ( 82.2)   mfp3-c  ( 75.4)   mfp2-c  ( 70.6) 
     1000 ffp2-c  (840.0)   mfp3-c  (692.7)   mfp2-c  (674.0) 
----------------------------------------------------------------------
gobbi2d
       10 ap-c    (  3.9)   ap-b    (  3.8)   mfp3-c  (  3.6) 
      100 ap-c    ( 27.7)   ap-b    ( 27.6)   mfp2-c  ( 27.0) 
     1000 ap-b    (253.4)   ap-c    (251.7)   mfp2-c  (218.5) 
----------------------------------------------------------------------
mfp1-b
       10 ffp1-b  (  7.2)   mfp2-b  (  7.0)   ffp2-b  (  6.3) 
      100 mfp2-b  ( 67.2)   ffp1-b  ( 66.2)   ffp2-b  ( 57.9) 
     1000 mfp2-b  (681.8)   ffp1-b  (622.2)   mfp3-b  (581.7) 
----------------------------------------------------------------------
mfp1-c
       10 ffp1-c  (  7.6)   mfp2-c  (  7.2)   ffp2-c  (  6.5) 
      100 mfp2-c  ( 69.8)   ffp1-c  ( 68.0)   ffp2-c  ( 60.0) 
     1000 mfp2-c  (727.6)   ffp1-c  (652.9)   mfp3-c  (644.3) 
----------------------------------------------------------------------
mfp2-b
       10 mfp3-b  (  8.3)   ffp2-b  (  7.9)   ffp3-b  (  7.5) 
      100 mfp3-b  ( 81.1)   ffp2-b  ( 74.1)   ffp3-b  ( 69.1) 
     1000 mfp3-b  (807.9)   mfp1-b  (681.8)   ffp2-b  (679.3) 
----------------------------------------------------------------------
mfp2-c
       10 mfp3-c  (  8.3)   ffp2-c  (  8.1)   ffp3-c  (  7.6) 
      100 mfp3-c  ( 83.4)   ffp2-c  ( 74.4)   ffp3-c  ( 70.6) 
     1000 mfp3-c  (847.8)   mfp1-c  (727.6)   ffp2-c  (700.4) 
----------------------------------------------------------------------
mfp3-b
       10 mfp2-b  (  8.3)   ffp3-b  (  8.1)   ffp2-b  (  7.5) 
      100 mfp2-b  ( 81.1)   ffp3-b  ( 74.7)   mfp3-c  ( 71.4) 
     1000 mfp2-b  (807.9)   mfp3-c  (678.4)   ffp3-b  (662.3) 
----------------------------------------------------------------------
mfp3-c
       10 mfp2-c  (  8.3)   ffp3-c  (  8.2)   ffp2-c  (  7.5) 
      100 mfp2-c  ( 83.4)   ffp3-c  ( 75.4)   mfp3-b  ( 71.4) 
     1000 mfp2-c  (847.8)   ffp3-c  (692.7)   ffp2-c  (678.8) 
----------------------------------------------------------------------
pattern
       10 avalon-c(  4.8)   avalon  (  4.3)   rdk5-c  (  4.2) 
      100 avalon-c( 42.3)   avalon  ( 39.9)   rdk5-c  ( 38.9) 
     1000 avalon-c(356.0)   rdk5-c  (345.9)   rdk5-b  (340.6) 
----------------------------------------------------------------------
rdk5-b
       10 rdk7-b  (  7.3)   rdk5-c  (  6.4)   rdk7-c  (  6.1) 
      100 rdk7-b  ( 68.4)   rdk5-c  ( 64.8)   rdk7-c  ( 59.3) 
     1000 rdk5-c  (651.3)   rdk7-c  (545.5)   rdk7-b  (535.0) 
----------------------------------------------------------------------
rdk5-c
       10 rdk7-c  (  7.5)   rdk5-b  (  6.4)   rdk7-b  (  6.1) 
      100 rdk7-c  ( 74.9)   rdk5-b  ( 64.8)   rdk7-b  ( 58.2) 
     1000 rdk7-c  (688.7)   rdk5-b  (651.3)   rdk7-b  (457.5) 
----------------------------------------------------------------------
rdk7-b
       10 rdk5-b  (  7.3)   rdk7-c  (  7.0)   rdk5-c  (  6.1) 
      100 rdk5-b  ( 68.4)   rdk7-c  ( 63.8)   rdk5-c  ( 58.2) 
     1000 rdk7-c  (538.0)   rdk5-b  (535.0)   rdk5-c  (457.5) 
----------------------------------------------------------------------
rdk7-c
       10 rdk5-c  (  7.5)   rdk7-b  (  7.0)   rdk5-b  (  6.1) 
      100 rdk5-c  ( 74.9)   rdk7-b  ( 63.8)   rdk5-b  ( 59.3) 
     1000 rdk5-c  (688.7)   rdk5-b  (545.5)   rdk7-b  (538.0) 
----------------------------------------------------------------------
tt-b
       10 tt-c    (  8.6)   ffp3-c  (  6.2)   mfp3-c  (  6.1) 
      100 tt-c    ( 83.4)   ffp2-b  ( 54.9)   mfp2-b  ( 53.5) 
     1000 tt-c    (824.8)   ffp2-b  (481.9)   ffp2-c  (468.5) 
----------------------------------------------------------------------
tt-c
       10 tt-b    (  8.6)   ffp3-c  (  6.4)   ffp2-c  (  6.3) 
      100 tt-b    ( 83.4)   ffp2-c  ( 54.9)   ffp3-c  ( 54.6) 
     1000 tt-b    (824.8)   ffp2-c  (494.2)   ffp2-b  (486.5) </code></pre>
</div>
</div>
<p>Look at histograms of the overlap sizes for a few different fingerprint pairs</p>
<div id="1a6f7152" class="cell" data-execution_count="217">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compare(prs,ovls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ovls):</span>
<span id="cb22-2">    prs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(prs)</span>
<span id="cb22-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,pr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(prs):</span>
<span id="cb22-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ovls:</span>
<span id="cb22-5">            pr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],pr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb22-6">        prs[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr</span>
<span id="cb22-7"></span>
<span id="cb22-8">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb22-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)):</span>
<span id="cb22-10">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-11">        plt.hist([ovls[pr][n] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prs],label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prs,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-12">        plt.xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,n)</span>
<span id="cb22-13">        plt.xlabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'n=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> overlap'</span>)</span>
<span id="cb22-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.title(pr)</span></span>
<span id="cb22-15">        plt.legend()</span>
<span id="cb22-16">    plt.tight_layout()</span></code></pre></div>
</div>
<p>Start with <a href="https://www.rdkit.org/docs/RDKit_Book.html#morgan-and-feature-morgan-fingerprints">FeatureMorgan and Morgan</a>, where there is a reasonably large amount of overlap:</p>
<div id="c8df404b" class="cell" data-execution_count="219">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp2-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp3-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now compare count-based and bit-based Morgan fingerprints. I expected the overlaps here to be higher:</p>
<div id="01a6402a" class="cell" data-scrolled="false" data-execution_count="220">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-c'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2-c'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2-b'</span>),))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Comparing very different types of fingerprints: count-based Morgan3 and both <a href="https://www.rdkit.org/docs/RDKit_Book.html#atom-pair-and-topological-torsion-fingerprints">Topological Torsions and Atom Pairs</a> (these both use <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-07-06-simulating-counts.html">count simulation</a>. Here there are significant differences. These are fingerprints that it would be interesting to use together.</p>
<div id="76e8ffef" class="cell" data-execution_count="222">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tt-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-c'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ap-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-c'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Same thing with bit-baseed Morgan3 and <a href="https://www.rdkit.org/docs/RDKit_Book.html#rdkit-fingerprints">RDK5</a>. Again, These are nicely complementary fingerprints:</p>
<div id="5b8f4a61" class="cell" data-execution_count="224">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tt-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ap-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk5-b'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Finally compare Morgan3 with the <a href="https://www.rdkit.org/docs/RDKit_Book.html#pattern-fingerprints">pattern fingerprint</a> (normally used for substructure screening, not similarity search), Gobbi2D (a 2D pharmacophore FP) and the Avalon FP. These are also nicely different from each other:</p>
<div id="76ea761c" class="cell" data-scrolled="false" data-execution_count="226">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">compare(((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pattern'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gobbi2d'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>),(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avalon'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3-b'</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>reference</category>
  <category>similarity</category>
  <category>fingerprints</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-03-21-similarity-hitset-overlap-1.html</guid>
  <pubDate>Thu, 20 Mar 2025 23:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/similarity-hitset-overlap-1.png" medium="image" type="image/png" height="119" width="144"/>
</item>
<item>
  <title>Building a similarity comparison set</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-03-16-building-a-similarity-comparison-set.html</link>
  <description><![CDATA[ 




<p>This is a revised and expanded version of an <a href="http://rdkit.blogspot.com/2013/10/building-similarity-comparison-set-goal.html">old blog post</a> which has already been <a href="http://rdkit.blogspot.com/2016/04/revisiting-similarity-comparison-set.html">updated once</a>.</p>
<p>Goal: construct a set of molecular pairs that can be used to compare similarity methods to each other.</p>
<p>This works with ChEMBL35.</p>
<p>I want to start with molecules that have some connection to each other, so I will pick pairs that have a baseline similarity: a Tanimoto similarity using count based Morgan0 fingerprints of at least 0.65. I also create a second set of somewhat more closely related molecules where the baseline similarity is 0.55 with a Morgan1 fingerprint. The thresholds were selected based on the analysis <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-21-similarity-search-thresholds.html">in this blog post</a></p>
<p>If you are interested in using the sets generated in this post, you can find them in the <a href="https://github.com/greglandrum/rdkit_blog/tree/master/data">source repo</a> for this blog.</p>
<section id="creating-the-tables-in-postgresql" class="level1">
<h1>Creating the tables in PostgreSQL</h1>
<p>I’m going to use ChEMBL as my data source, so I’ll start by adding a table with count-based morgan fingerprints. Here’s the SQL for that, assuming that you’ve installed the RDKit extension and setup an RDKit schema as described in the <a href="https://www.rdkit.org/docs/Cartridge.html#loading-chembl">docs</a></p>
<pre><code>select molregno,morgan_fp(m,0) mfp0,morgan_fp(m,1) mfp1,morgan_fp(m,2) mfp2 into rdk.countfps from rdk.mols;
create index cfps_mfp0 on rdk.countfps using gist(mfp0);
create index cfps_mfp1 on rdk.countfps using gist(mfp1);
create index cfps_mfp2 on rdk.countfps using gist(mfp2);</code></pre>
<p>Fingerprints that only contains molecules with &lt;= 50 heavy atoms and a single fragment (we recognize this because there is no ‘.’ in the SMILES):</p>
<pre><code>select molregno,mfp0,mfp1 into table rdk.tfps_smaller from rdk.countfps join compound_properties using (molregno) join compound_structures using (molregno) where heavy_atoms&lt;=50 and canonical_smiles not like '%.%';
create index sfps_mfp0_idx on rdk.tfps_smaller using gist(mfp0);
create index sfps_mfp1_idx on rdk.tfps_smaller using gist(mfp1);</code></pre>
<p>And now I’ll build the set of pairs using Python. This is definitely doable in SQL, but my SQL-fu isn’t that strong.</p>
<p>Start by getting a set of 60K random small molecules:</p>
<div id="cell-4" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-01-16T08:20:51.492914Z&quot;,&quot;start_time&quot;:&quot;2023-01-16T08:20:51.394115Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(time.asctime())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2024.09.6
Sat Mar 15 18:36:20 2025</code></pre>
</div>
</div>
<div id="cell-5" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-01-16T08:25:43.609849Z&quot;,&quot;start_time&quot;:&quot;2023-01-16T08:25:35.695948Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> psycopg2</span>
<span id="cb5-2">cn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psycopg2.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'localhost'</span>,dbname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chembl_35'</span>)</span>
<span id="cb5-3">curs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cn.cursor()</span>
<span id="cb5-4">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select chembl_id,m from rdk.mols join rdk.tfps_smaller using (molregno)"</span></span>
<span id="cb5-5">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" join chembl_id_lookup on (molregno=entity_id and entity_type='COMPOUND')"</span></span>
<span id="cb5-6">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" order by random() limit 60000"</span>)</span>
<span id="cb5-7">qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> curs.fetchall()</span></code></pre></div>
</div>
<p>And now find one neighbor for 50K of those from the mfp0 table of smallish molecules:</p>
<div id="cell-7" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-01-16T12:48:36.981493Z&quot;,&quot;start_time&quot;:&quot;2023-01-16T12:43:05.733091Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">cn.rollback()</span>
<span id="cb6-2">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'set rdkit.tanimoto_threshold=0.65'</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4">keep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(qs):</span>
<span id="cb6-6">    curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select chembl_id,m from rdk.mols join (select chembl_id,molregno from rdk.tfps_smaller "</span></span>
<span id="cb6-7">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"join chembl_id_lookup on (molregno=entity_id and entity_type='COMPOUND') "</span></span>
<span id="cb6-8">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"where mfp0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">morgan_fp(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,0) "</span></span>
<span id="cb6-9">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and chembl_id!=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> limit 1) t2 using (molregno) "</span></span>
<span id="cb6-10">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"limit 1"</span>,(row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb6-11">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> curs.fetchone()</span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> d: </span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb6-14">    keep.append((row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb6-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keep)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>: </span>
<span id="cb6-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>i)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Done: 0
Done: 1000
Done: 2000
Done: 3000
Done: 4000
Done: 5000
Done: 6000
Done: 7000
Done: 8000
Done: 9000
Done: 10000
Done: 11000
Done: 12000
Done: 13000
Done: 14000
Done: 15000
Done: 16000
Done: 17000
Done: 18000
Done: 19000
Done: 20000
Done: 21000
Done: 22000
Done: 23000
Done: 24000
Done: 25000
Done: 26000
Done: 27000
Done: 28000
Done: 29000
Done: 30000
Done: 31000
Done: 32000
Done: 33000
Done: 34000
Done: 35000
Done: 36000
Done: 37000
Done: 38000
Done: 39000
Done: 40000
Done: 41000
Done: 42000
Done: 43000
Done: 44000
Done: 45000
Done: 46000
Done: 47000
Done: 48000
Done: 49000
Done: 50000</code></pre>
</div>
</div>
<p>Finally, write those out to a file so that we can use them elsewhere:</p>
<div id="cell-9" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-01-16T12:48:37.896921Z&quot;,&quot;start_time&quot;:&quot;2023-01-16T12:48:36.983261Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/chembl35_50K.mfp0.pairs.txt.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cid1,smi1,cid2,smi2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> keep: </span>
<span id="cb8-4">        outf.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cid1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smi1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cid2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smi2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UTF-8'</span>))</span></code></pre></div>
</div>
</section>
<section id="try-molecules-that-are-a-bit-more-similar." class="level1">
<h1>Try molecules that are a bit more similar.</h1>
<p>Use a similarity threshold for the pairs using MFP1 bits.</p>
<div id="cell-11" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-01-16T13:17:03.816967Z&quot;,&quot;start_time&quot;:&quot;2023-01-16T12:48:37.898370Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">cn.rollback()</span>
<span id="cb9-2">curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'set rdkit.tanimoto_threshold=0.55'</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">keep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb9-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(qs):</span>
<span id="cb9-6">    curs.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"select chembl_id,m from rdk.mols join (select chembl_id,molregno from rdk.tfps_smaller "</span></span>
<span id="cb9-7">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"join chembl_id_lookup on (molregno=entity_id and entity_type='COMPOUND') "</span></span>
<span id="cb9-8">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"where mfp1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">morgan_fp(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,1) "</span></span>
<span id="cb9-9">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and chembl_id!=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> limit 1) t2 using (molregno) "</span></span>
<span id="cb9-10">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"limit 1"</span>,(row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb9-11">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> curs.fetchone()</span>
<span id="cb9-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> d: </span>
<span id="cb9-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb9-14">    keep.append((row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb9-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keep)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>: </span>
<span id="cb9-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb9-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>i)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Done: 0
Done: 1000
Done: 2000
Done: 3000
Done: 4000
Done: 5000
Done: 6000
Done: 7000
Done: 8000
Done: 9000
Done: 10000
Done: 11000
Done: 12000
Done: 13000
Done: 14000
Done: 15000
Done: 16000
Done: 17000
Done: 18000
Done: 19000
Done: 20000
Done: 21000
Done: 22000
Done: 23000
Done: 24000
Done: 25000
Done: 26000
Done: 27000
Done: 28000
Done: 29000
Done: 30000
Done: 31000
Done: 32000
Done: 33000
Done: 34000
Done: 35000
Done: 36000
Done: 37000
Done: 38000
Done: 39000
Done: 40000
Done: 41000
Done: 42000
Done: 43000
Done: 44000
Done: 45000
Done: 46000
Done: 47000
Done: 48000
Done: 49000
Done: 50000</code></pre>
</div>
</div>
<div id="cell-12" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-01-16T13:23:34.529592Z&quot;,&quot;start_time&quot;:&quot;2023-01-16T13:23:33.517374Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/chembl35_50K.mfp1.pairs.txt.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cid1,smi1,cid2,smi2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> keep: </span>
<span id="cb11-4">        outf.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cid1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smi1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cid2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smi2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UTF-8'</span>))</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>reference</category>
  <category>similarity</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-03-16-building-a-similarity-comparison-set.html</guid>
  <pubDate>Sat, 15 Mar 2025 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
