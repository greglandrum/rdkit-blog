<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>RDKit blog</title>
<link>https://greglandrum.github.io/rdkit-blog/</link>
<atom:link href="https://greglandrum.github.io/rdkit-blog/index.xml" rel="self" type="application/rss+xml"/>
<description>RDKit experiments, tips, and tutorials</description>
<generator>quarto-1.6.43</generator>
<lastBuildDate>Thu, 16 Oct 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>Displaying atom maps and highlighting with reactions</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions.html</link>
  <description><![CDATA[ 




<p>This one was inspired by an example I did this week for the class I’m teaching: I wanted to apply an RDKit reaction to a set of reactants and then draw the reactants and the products of the reaction as a normal reaction with the mapped atoms indicated. Doing that made me realize that, with a bit more code, I could produce some other useful views of a reaction.</p>
<p>In addition to the visualizations themselves, this post has some potentially useful details about what kind of extra information is available in the products of reactions.</p>
<div id="60f925e4-4d20-4752-ad92-119e08cb19f4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdChemReactions</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.09.1</code></pre>
</div>
</div>
<p>The first example reaction, adapted from the SI for http://pubs.acs.org/doi/abs/10.1021/ci200379p. I frequently use this paper as a source of reaction SMARTS definitions for real reactions; left to my own devices I would just use amide bond formation all the time, and that gets pretty boring pretty quick.</p>
<div id="b2035753" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adapted example from the SI for: http://pubs.acs.org/doi/abs/10.1021/ci200379p</span></span>
<span id="cb3-2">sma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[Br,I;$(*c1ccccc1)]-[c:1]:[c:2]-[OH1:3].[CH1:5]#[C;$(C-[#6]):4]&gt;&gt;[c:1]1:[c:2]-[O:3]-[C:4]=[C:5]-1'</span></span>
<span id="cb3-3">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(sma)</span>
<span id="cb3-4">rxn</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>A set of reactants for the reaction:</p>
<div id="820ada2b" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1cc(I)c(O)cc1'</span>)</span>
<span id="cb4-2">r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1CCC1C#C'</span>)</span>
<span id="cb4-3">Draw.MolsToGridImage([r1,r2],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Run the reaction and show the product:</p>
<div id="8edfad59" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">reactants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (r1,r2)</span>
<span id="cb5-2"></span>
<span id="cb5-3">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants(reactants)</span>
<span id="cb5-4">ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Look at the properties set on one of the atoms in the product that came from a mapped atom:</p>
<div id="f0543c0c" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mapped atom:'</span>,prod.GetAtomWithIdx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).GetPropsAsDict(includePrivate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unmapped atom:'</span>,prod.GetAtomWithIdx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>).GetPropsAsDict(includePrivate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mapped atom: {'old_mapno': 1, 'react_atom_idx': 2, 'react_idx': 0}
unmapped atom: {'react_atom_idx': 6, 'react_idx': 0}</code></pre>
</div>
</div>
<p>Here’s what those mean: 1. <code>old_mapno</code>: the atom map number for the atom (obviously only present on mapped atoms) 2. <code>react_idx</code>: which reactant the atom came from 3. <code>react_atom_idx</code>: the index of the atom in its reactant</p>
<p>What I did for the course was set the atom map numbers on the reactants and products, combine them into a new reaction, and then display that reaction.</p>
<p>Start by setting the atom map numbers:</p>
<div id="3731b082" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since we're going to modify things, copy them first:</span></span>
<span id="cb8-2">prod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-3">reactants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (Chem.Mol(r1),Chem.Mol(r2))</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> at <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prod.GetAtoms():</span>
<span id="cb8-6">    pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> at.GetPropsAsDict()</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'old_mapno'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pd:</span>
<span id="cb8-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb8-9">    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reactants[pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_idx'</span>]]</span>
<span id="cb8-10">    rat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r.GetAtomWithIdx(pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_atom_idx'</span>])</span>
<span id="cb8-11">    rat.SetAtomMapNum(pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'old_mapno'</span>])</span>
<span id="cb8-12">    at.SetAtomMapNum(pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'old_mapno'</span>])</span></code></pre></div>
</div>
<p>Now create the reaction and display it:</p>
<div id="ac6d10c7" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">nrxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ChemicalReaction()</span>
<span id="cb9-2">nrxn.AddReactantTemplate(reactants[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb9-3">nrxn.AddReactantTemplate(reactants[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb9-4">nrxn.AddProductTemplate(prod)</span>
<span id="cb9-5"></span>
<span id="cb9-6">IPythonConsole.molSize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb9-7">nrxn</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Once the atom-mapping information is there, The reaction drawing code can also highlight the atoms based upon which reactant they came from. Unfortunately this causes the atom-mapping information to not be displayed:</p>
<div id="0b9bb8d0" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">IPythonConsole.highlightByReactant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb10-2">nrxn</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="902579e8" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">IPythonConsole.highlightByReactant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</div>
<p>At this point it makes sense to take what we know and write a function to draw the highlighted reaction. By working directly with a MolDraw2DCairo object instead of using the notebook integration we more easily control what’s going on.</p>
<div id="8ce8c947" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> drawHighlightedReaction(rxn, reacts, prods, </span>
<span id="cb12-3">                            includeAtomMaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, highlightAllAtoms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb12-4">                            mapAllAtoms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb12-5">                            highlightColors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb12-6">                            size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), annotationFontScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.74</span>,</span>
<span id="cb12-7">                            drawOptions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb12-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">''' draws a specific reaction with the reactants and products highlighted</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns an Image object with the drawing.    </span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments</span></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    rxn: the reaction object (not currently used)</span></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    reacts: a sequence of molecules. The reactants used in the reaction</span></span>
<span id="cb12-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    prods: a sequence of molecules. The products from the reaction</span></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    includeAtomMaps: bool. Whether or not atom map numbers should be included in the output</span></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    highlightAllAtoms: bool. Whether or not to highlight all reactant/product atoms in the output. </span></span>
<span id="cb12-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           If True, non-mapped atoms will be highlighted. </span></span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           If False, only the mapped atoms will be highlighted</span></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    mapAllAtoms: bool. Whether or not to include atom mapping numbers on all atoms.</span></span>
<span id="cb12-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           If True, non-mapped atoms will have negative atom map numbers displayed</span></span>
<span id="cb12-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    highlightColors: sequence of 3-tuples. Controls the colors used for highlighting the reactants.</span></span>
<span id="cb12-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           The values should go from 0-1. The sequence should have (at least) len(reacts) </span></span>
<span id="cb12-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           elements.</span></span>
<span id="cb12-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    size: tuple. Controls the size of the output image.</span></span>
<span id="cb12-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    annotationFontScale: float. Controls the size of the atom map notes (if being drawn)</span></span>
<span id="cb12-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    drawOptions: a MolDraw2DOptions object. Used as the draw options for the rendering. </span></span>
<span id="cb12-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           Overrides annotationFontScale if provided.</span></span>
<span id="cb12-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb12-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb12-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make copies of all the reactants and the products since we will modify them</span></span>
<span id="cb12-31">    reacts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.Mol(r) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reacts]</span>
<span id="cb12-32">    prods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.Mol(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prods]</span>
<span id="cb12-33">    </span>
<span id="cb12-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the largest atom map number, used to initialize the negative atom map numbers</span></span>
<span id="cb12-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  when we are doing highlightAllAtoms</span></span>
<span id="cb12-36">    negVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mapAllAtoms:</span>
<span id="cb12-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prod <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prods:</span>
<span id="cb12-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> at <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prod.GetAtoms():</span>
<span id="cb12-40">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> at.HasProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'old_mapno'</span>):</span>
<span id="cb12-41">                    negVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(negVal,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> at.GetIntProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'old_mapno'</span>))</span>
<span id="cb12-42">    negVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-43"></span>
<span id="cb12-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop over each of the products and set the atom map and note information</span></span>
<span id="cb12-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  in both the product atoms and corresponding reactant atoms.</span></span>
<span id="cb12-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prod <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prods:</span>
<span id="cb12-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> at <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prod.GetAtoms():</span>
<span id="cb12-48">            pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> at.GetPropsAsDict()</span>
<span id="cb12-49">            mno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'old_mapno'</span>,negVal)</span>
<span id="cb12-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb12-51">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> highlightAllAtoms:</span>
<span id="cb12-52">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb12-53">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb12-54">                    negVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-55">            </span>
<span id="cb12-56">            r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reacts[pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_idx'</span>]]</span>
<span id="cb12-57">            rat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r.GetAtomWithIdx(pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_atom_idx'</span>])</span>
<span id="cb12-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tat <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> at,rat:</span>
<span id="cb12-59">                tat.SetAtomMapNum(mno)</span>
<span id="cb12-60">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> includeAtomMaps <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (mno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> mapAllAtoms):</span>
<span id="cb12-61">                    tat.SetProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atomNote'</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(mno))    </span>
<span id="cb12-62">    </span>
<span id="cb12-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the reaction we'll actually render:</span></span>
<span id="cb12-64">    nrxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ChemicalReaction()</span>
<span id="cb12-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> react <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reacts:</span>
<span id="cb12-66">        nrxn.AddReactantTemplate(react)</span>
<span id="cb12-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prod <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prods:</span>
<span id="cb12-68">        nrxn.AddProductTemplate(prod)</span>
<span id="cb12-69"></span>
<span id="cb12-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and draw it</span></span>
<span id="cb12-71">    d2d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw.MolDraw2DCairo(size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb12-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> drawOptions <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb12-73">        d2d.SetDrawOptions(drawOptions)</span>
<span id="cb12-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb12-75">        d2d.drawOptions().annotationFontScale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotationFontScale</span>
<span id="cb12-76">    d2d.DrawReaction(nrxn, highlightByReactant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, highlightColorsReactants<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>highlightColors)</span>
<span id="cb12-77">    d2d.FinishDrawing()</span>
<span id="cb12-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Image(d2d.GetDrawingText())</span></code></pre></div>
</div>
<div id="38efc9b1" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1cc(I)c(O)cc1'</span>)</span>
<span id="cb13-2">r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1CCC1C#C'</span>)</span>
<span id="cb13-3">reactants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (r1,r2)</span>
<span id="cb13-4">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants(reactants)</span>
<span id="cb13-5"></span>
<span id="cb13-6">drawHighlightedReaction(rxn,reactants,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="a06fe58b" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">drawHighlightedReaction(rxn,reactants,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],highlightAllAtoms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Include negative atom map numbers for atoms that were not in the reaction definition;</p>
<div id="cb4fad50" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">drawHighlightedReaction(rxn,reactants,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],mapAllAtoms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="8e789b8a" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">drawHighlightedReaction(rxn,reactants,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],includeAtomMaps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Change the highlighting</p>
<div id="74431e91" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">drawHighlightedReaction(rxn,reactants,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],highlightColors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Provide our own draw options. Here we play with dark mode:</p>
<div id="dc6cd568" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDepictor</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reactants:</span>
<span id="cb18-3">    rdDepictor.Compute2DCoords(r)</span>
<span id="cb18-4">dopts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw.MolDrawOptions()</span>
<span id="cb18-5">Draw.SetDarkMode(dopts)</span>
<span id="cb18-6">dopts.annotationFontScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb18-7">drawHighlightedReaction(rxn,reactants,ps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],drawOptions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dopts,</span>
<span id="cb18-8">                       highlightColors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Do another reaction from the same paper:</p>
<div id="d634a819" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[c:1](-[C;$(C-c1ccccc1):2](=[OD1:3])-[OH1]):[c:4](-[NH2:5]).[N;!H0;!$(N-N);!$(N-C=N);!$(N(-C=O)-C=O):6]-[C;H1,$(C-[#6]):7]=[OD1]&gt;&gt;[c:4]2:[c:1]-[C:2](=[O:3])-[N:6]-[C:7]=[N:5]-2'</span>)</span>
<span id="cb19-2">reactants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1c(C(=O)O)c(N)ccc1'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCC(=O)Nc1ccccc1'</span>)]</span>
<span id="cb19-3">prods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants(reactants)</span>
<span id="cb19-4">drawHighlightedReaction(rxn,reactants,prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>drawing</category>
  <category>tutorial</category>
  <category>reactions</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-10-17-displaying-atom-maps-with-reactions.html</guid>
  <pubDate>Thu, 16 Oct 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/displaying-atom-maps-1.png" medium="image" type="image/png" height="32" width="144"/>
</item>
<item>
  <title>Similarity search time and thresholds</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-10-10-similarity-search-time-and-thresholds-1.html</link>
  <description><![CDATA[ 




<p>This is an updated and modified version of a <a href="https://rdkit.blogspot.com/2015/08/impact-of-threshold-on-similarity.html">post I wrote back in 2015</a>. # Impact of the threshold on similarity search times</p>
<p>A <a href="http://chembl.blogspot.ch/2015/08/lsh-based-similarity-search-in-mongodb.html">ChEMBL blog post</a> included the (to me) somewhat surprising result that similarity search times while using the RDKit cartridge did not show much of a dependency on the similarity threshold being used. I wanted to investigate this a bit more closely.</p>
<p>I’m using a local install of ChEMBL35 for these tests. Since I don’t have the patience to wait for searches to complete with 1000 molecules, I will randomly select just 10:</p>
<pre><code>chembl_35=# select * into temporary table foo from rdk.fps order by random() limit 10;
SELECT 10
chembl_35=# select molregno,m from rdk.mols join foo using (molregno);
molregno |                                                      m                                                      
----------+-------------------------------------------------------------------------------------------------------------
    4111 | C=C1CC2(CCCCCCCCC2)OC1=O
    4131 | CC1Cc2cc3c(cc2C(c2ccc(N)cc2)=NN1C=O)OCO3
    4185 | CCOC(=O)/C=C(C)/C(F)=C/C=C(C)/C=C/c1c(C)cc(OC)c(C)c1C
    4256 | CC(C)(C)c1cc(CCc2cccnc2)cc(C(C)(C)C)c1O
    4292 | O=C(CCCCCCCCCBr)CC(=O)N[C@H]1CCOC1=O
    4334 | CCCC[C@@H](C[C@@H](CCc1ccc(-c2ccc(F)cc2)cc1)C(=O)N[C@H](C(=O)Nc1ccccc1)C(C)(C)C)C(=O)O
    4335 | COc1ccc(/C=C/c2cc(C(C)(C)C)c(O)c(C(C)(C)C)c2)cc1
    4389 | Cc1ccc2c(c1)C(=O)N(CC(C)(C)C[N+](C)(C)CCCCCC[N+](C)(C)CC(C)(C)CN1C(=O)c3cccc4cccc(c34)C1=O)C2=O.[Br-].[Br-]
    4591 | O=C(NCCCn1ccnc1)c1cc2ccccc2[nH]1
    4599 | O=Cc1ccn(-c2cc3c(cc2Cl)nc(O)n2nc(C(=O)O)cc32)c1
(10 rows)</code></pre>
<p>And now look at timing results for a number of threshold values:</p>
<pre><code>chembl_35=# set rdkit.tanimoto_threshold=0.4;select count(*) from rdk.fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.202 ms
count 
-------
3431
(1 row)

Time: 2446.118 ms (00:02.446)
chembl_35=# set rdkit.tanimoto_threshold=0.5;select count(*) from rdk.fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.245 ms
count 
-------
814
(1 row)

Time: 2258.420 ms (00:02.258)
chembl_35=# set rdkit.tanimoto_threshold=0.6;select count(*) from rdk.fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.146 ms
count 
-------
261
(1 row)

Time: 2005.068 ms (00:02.005)
chembl_35=# set rdkit.tanimoto_threshold=0.7;select count(*) from rdk.fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.304 ms
count 
-------
122
(1 row)

Time: 1702.164 ms (00:01.702)
chembl_35=# set rdkit.tanimoto_threshold=0.8;select count(*) from rdk.fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.147 ms
count 
-------
    35
(1 row)

Time: 1272.436 ms (00:01.272)
chembl_35=# set rdkit.tanimoto_threshold=0.9;select count(*) from rdk.fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.207 ms
count 
-------
    21
(1 row)

Time: 645.774 ms
chembl_35=# set rdkit.tanimoto_threshold=0.95;select count(*) from rdk.fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.101 ms
count 
-------
    17
(1 row)

Time: 268.827 ms
chembl_35=# set rdkit.tanimoto_threshold=0.99;select count(*) from rdk.fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.242 ms
count 
-------
    14
(1 row)

Time: 54.065 ms</code></pre>
<p>In the previous version of the post, there were some interesting differences here. That’s no longer the case. this is probably at least partially because both Postgres and the cartridge have seen some improvements in the last ten years (for example, index-only scans are now possible). I guess the bigger part is because I’m using a more capable machine with a bunch more RAM.</p>
<section id="a-larger-test-zinc" class="level2">
<h2 class="anchored" data-anchor-id="a-larger-test-zinc">A larger test: ZINC</h2>
<p>To see if there are any trends for a larger dataset, I grabbed a copy of the <a href="http://zinc.docking.org/subsets/all-clean">ZINC All Clean set</a>. After removing the molecules that the RDKit doesn’t like (there are actually only 14 molecules in the full set that the RDKit rejected), this leaves 16.4 million molecules.</p>
<p>For the record, here’s how I built the database:</p>
<pre><code>(rdkit_build) glandrum@stoat:/scratch/RDKit_git/LocalData$ createdb zinc
(rdkit_build) glandrum@stoat:/scratch/RDKit_git/LocalData$ psql -c 'create table raw_data (id SERIAL, smiles text, zinc_id char(12))' zinc
CREATE TABLE
(rdkit_build) glandrum@stoat:/scratch/RDKit_git/LocalData$ cd Zinc
(rdkit_build) glandrum@stoat:/scratch/RDKit_git/LocalData/Zinc$ zcat zinc_all_clean.smi.gz | sed '1d; s/\\/\\\\/g' |psql -c "copy raw_data (smiles,zinc_id) from stdin with delimiter ' '" zinc
COPY 16403864
(rdkit_build) glandrum@stoat:/scratch/RDKit_git/LocalData/Zinc$ psql zinc
psql (14.19 (Ubuntu 14.19-0ubuntu0.22.04.1))
Type "help" for help.

zinc=# \timing
Timing is on.
zinc=# create extension rdkit;
CREATE EXTENSION
Time: 21.754 ms
zinc=# select * into mols from (select id,mol_from_smiles(smiles::cstring) m from raw_data) tmp where m is not null;
  ... snip ...
SELECT 16403848
Time: 945195.267 ms (15:45.195)
zinc=# select id,morganbv_fp(m) as mfp2 into fps from mols;
SELECT 16403848
Time: 155185.639 ms (02:35.186)
zinc=# create index fps_mfp2_idx on fps using gist(mfp2);
CREATE INDEX
Time: 140542.861 ms (02:20.543)
zinc=# select * into temporary table foo from fps tablesample bernoulli (1) repeatable (123456) limit 10;
SELECT 10
Time: 11.977 ms</code></pre>
<p>Here are the 10 random molecules:</p>
<pre><code>zinc=# select id,m from mols join foo using (id);
id    |                             m                             
------+-----------------------------------------------------------
12317 | CCc1nnc(NC(=O)[C@H](CC)Oc2ccccc2)s1
385   | CCOC(=O)c1ccccc1C(=O)OCC
24317 | CC(C)(C)c1ccc([C@@]23OC(=O)C(C)(C)[C@@H]2OC(=O)C3(C)C)cc1
48    | CC(C)(C)[NH2+]C[C@H](O)COc1cc(Cl)ccc1Cl
225   | CC[C@@]1(CO)CCC[NH+]2CCc3c([nH]c4ccccc34)[C@@H]21
90    | C[NH2+]C[C@@H](OC)c1cccc(C(F)(F)F)c1
24406 | CCOC1(OCC)[NH+]=C(N)[C@@]2(C#N)C3(CCCCC3)[C@@]12C#N
24738 | Cc1ccc(S(=O)(=O)Nc2ccccc2C#N)cc1
356   | CCc1c(O)c(=O)ccn1CC
8     | O=C([O-])[C@@H](O)c1ccccc1
(10 rows)

Time: 5167.539 ms (00:05.168)</code></pre>
<p>Now the searches:</p>
<pre><code>zinc=# set rdkit.tanimoto_threshold=0.4; select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.133 ms
count 
-------
55762
(1 row)

Time: 15931.816 ms (00:15.932)
zinc=# set rdkit.tanimoto_threshold=0.5; select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.183 ms
count 
-------
4486
(1 row)

Time: 13616.273 ms (00:13.616)
zinc=# set rdkit.tanimoto_threshold=0.6; select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.205 ms
count 
-------
623
(1 row)

Time: 11555.706 ms (00:11.556)
zinc=# set rdkit.tanimoto_threshold=0.7; select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.213 ms
count 
-------
165
(1 row)

Time: 8509.171 ms (00:08.509)
zinc=# set rdkit.tanimoto_threshold=0.8; select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.097 ms
count 
-------
    50
(1 row)

Time: 4717.467 ms (00:04.717)
zinc=# set rdkit.tanimoto_threshold=0.9; select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.097 ms
count 
-------
    20
(1 row)

Time: 1026.567 ms (00:01.027)
zinc=# set rdkit.tanimoto_threshold=0.95; select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.103 ms
count 
-------
    20
(1 row)

Time: 195.971 ms
zinc=# set rdkit.tanimoto_threshold=0.99; select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
SET
Time: 0.096 ms
count 
-------
    20
(1 row)

Time: 34.866 ms</code></pre>
<p>I’m going to look at two interesting steps in this data: from a threshold of 0.4 to 0.6, and from 0.6 to 0.99. In the first case, the number of hits goes from 55762 to 623, while the time goes from 15.9s to 11.6s. In the second case, the number of hits goes from 623 to 20, while the time goes from 11.6s to 34.9ms. In the first case the number if hits drops by almost two orders of magnitude while the time only drops by about 25%. In the second case, the number of hits drops by a factor of 30, while the time drops by a factor of almost 39.</p>
<p>Look at the output from <code>EXPLAIN ANALYZE</code> for these queries to see if we can figure out what’s going on:</p>
<pre><code>zinc=# set rdkit.tanimoto_threshold=0.4;
SET
Time: 0.152 ms
zinc=# explain (analyze on, buffers on) select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
                                                                    QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
Aggregate  (cost=1376580.94..1376580.95 rows=1 width=8) (actual time=16239.641..16239.642 rows=1 loops=1)
Buffers: shared hit=9573 read=2374633, local hit=1
-&gt;  Nested Loop  (cost=0.42..1324498.62 rows=20832924 width=0) (actual time=8.908..16236.122 rows=55762 loops=1)
        Buffers: shared hit=9573 read=2374633, local hit=1
        -&gt;  Seq Scan on foo  (cost=0.00..22.70 rows=1270 width=32) (actual time=0.004..0.016 rows=10 loops=1)
            Buffers: local hit=1
        -&gt;  Index Only Scan using fps_mfp2_idx on fps fps1  (cost=0.42..878.85 rows=16404 width=65) (actual time=6.231..1622.310 rows=5576 loops=10)
            Index Cond: (mfp2 % foo.mfp2)
            Heap Fetches: 0
            Buffers: shared hit=9573 read=2374633
Planning Time: 0.052 ms
JIT:
Functions: 5
Options: Inlining true, Optimization true, Expressions true, Deforming true
Timing: Generation 0.126 ms, Inlining 1.992 ms, Optimization 3.165 ms, Emission 3.565 ms, Total 8.848 ms
Execution Time: 16239.872 ms
(16 rows)

Time: 16240.250 ms (00:16.240)
zinc=# set rdkit.tanimoto_threshold=0.6;
SET
Time: 0.114 ms
zinc=# explain (analyze on, buffers on) select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
                                                                    QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
Aggregate  (cost=1376580.94..1376580.95 rows=1 width=8) (actual time=13299.969..13299.970 rows=1 loops=1)
Buffers: shared hit=4685 read=1995775, local hit=1
-&gt;  Nested Loop  (cost=0.42..1324498.62 rows=20832924 width=0) (actual time=112.152..13299.772 rows=758 loops=1)
        Buffers: shared hit=4685 read=1995775, local hit=1
        -&gt;  Seq Scan on foo  (cost=0.00..22.70 rows=1270 width=32) (actual time=0.004..0.013 rows=10 loops=1)
            Buffers: local hit=1
        -&gt;  Index Only Scan using fps_mfp2_idx on fps fps1  (cost=0.42..878.85 rows=16404 width=65) (actual time=112.027..1329.058 rows=76 loops=10)
            Index Cond: (mfp2 % foo.mfp2)
            Heap Fetches: 0
            Buffers: shared hit=4685 read=1995775
Planning Time: 0.052 ms
JIT:
Functions: 5
Options: Inlining true, Optimization true, Expressions true, Deforming true
Timing: Generation 0.126 ms, Inlining 2.130 ms, Optimization 3.170 ms, Emission 3.601 ms, Total 9.027 ms
Execution Time: 13300.146 ms
(16 rows)

Time: 13300.681 ms (00:13.301)
zinc=# set rdkit.tanimoto_threshold=0.99;
SET
Time: 0.253 ms
zinc=# explain (analyze on, buffers on) select count(*) from fps fps1 cross join foo where fps1.mfp2%foo.mfp2;
                                                                QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
Aggregate  (cost=1376580.94..1376580.95 rows=1 width=8) (actual time=50.800..50.801 rows=1 loops=1)
Buffers: shared hit=14558 read=5872, local hit=1
-&gt;  Nested Loop  (cost=0.42..1324498.62 rows=20832924 width=0) (actual time=11.722..50.787 rows=12 loops=1)
        Buffers: shared hit=14558 read=5872, local hit=1
        -&gt;  Seq Scan on foo  (cost=0.00..22.70 rows=1270 width=32) (actual time=0.003..0.010 rows=10 loops=1)
            Buffers: local hit=1
        -&gt;  Index Only Scan using fps_mfp2_idx on fps fps1  (cost=0.42..878.85 rows=16404 width=65) (actual time=2.392..4.188 rows=1 loops=10)
            Index Cond: (mfp2 % foo.mfp2)
            Heap Fetches: 0
            Buffers: shared hit=14558 read=5872
Planning Time: 0.052 ms
JIT:
Functions: 5
Options: Inlining true, Optimization true, Expressions true, Deforming true
Timing: Generation 0.123 ms, Inlining 2.134 ms, Optimization 3.203 ms, Emission 3.554 ms, Total 9.014 ms
Execution Time: 50.972 ms
(16 rows)

Time: 51.323 ms</code></pre>
<p>` The big difference I see here is the number of buffers that actually need to be read when executing the queries. At the 0.4 threshold, we need to read 2.37 million buffers, at 0.7 it’s just under 2 million, and at 0.99 we only need to read 5872. This is presumably because the index is pruning so many rows at the higher thresholds. I’m definitely not an expert at interpreting this output, so if anyone has other ideas or explanations, please let me know!</p>
</section>
<section id="an-aside-chemfp-performance" class="level2">
<h2 class="anchored" data-anchor-id="an-aside-chemfp-performance">An aside: chemfp performance</h2>
<p>The previous version of this post included a performance comparison with <a href="http://chemfp.com/">chemfp</a>. Since I no longer have access to the licensed version of chemfp, I’m going to skip that here. I assume it’s dramatically quicker than the cartridge. :-)</p>


</section>

 ]]></description>
  <category>cartridge</category>
  <category>questions</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-10-10-similarity-search-time-and-thresholds-1.html</guid>
  <pubDate>Thu, 09 Oct 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Rendering intramolecular H bonds in 2D</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds.html</link>
  <description><![CDATA[ 




<p>I had the idea for this short post while working on last week’s post about <a href="https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1.html">drawing simple protein–ligand interaction diagrams</a>. It shows a quick way to force the RDKit’s 2D coordinate generator to put non-bonded atoms close to each other in a drawing. I use the examples of rendering intramolecular H bonds and chelators.</p>
<div id="c54c234f-5563-49a7-afca-db59ed7ade39" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDepictor</span></code></pre></div>
</div>
<div id="070c2de1-feaf-4ac6-a63e-4d54108555be" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">IPythonConsole.drawOptions.addAtomIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-2">IPythonConsole.molSize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span></code></pre></div>
</div>
<p>Let’s start with a simple molecule that forms intramolecular hydrogen bonds, malonaldehyde (I also used this as the example in the blog post on <a href="https://greglandrum.github.io/rdkit-blog/posts/2024-07-28-confgen-and-intramolecular-hbonds.html">generating 3D conformers which include intramolecular H bonds</a>).</p>
<p>The 2D coordinate generation code generates an extended 2D conformer for malonaldehyde:</p>
<div id="5b8b871e-2201-492e-9e90-08c08f7bb7d8" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O=CCCO'</span>)</span>
<span id="cb3-2">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This type of extended conformer looks completely reasonable and is, for most molecules, almost certainly the right way to draw chains, but in this case I want to actually show the H bond.</p>
<p>To do so, I start by adding the H which will be involved in the H bond to the molecule:</p>
<div id="8a40158a-4ba9-442f-b477-3145bddb9926" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RWMol(m)</span>
<span id="cb4-2">aid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.AddAtom(Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-3">m2.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,aid,Chem.BondType.SINGLE)</span>
<span id="cb4-4">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We still have an extended conformer. I can force this to change by doing something non-physical and adding a single bond between the H and O0:</p>
<div id="2bfbe7c9" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">bid1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,aid,Chem.BondType.SINGLE)</span>
<span id="cb5-2">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That has the coordinates I wanted, but having the H bond drawn as a single bond is definitely not desirable.</p>
<p>To solve this I’m going to explicitly generate the coordinates for the molecule with the single bond present (instead of relying up on the notebook code to generate a temporary set of coordinates), then remove the single bond and render the molecule:</p>
<div id="9fdad754" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">rdDepictor.Compute2DCoords(m2)</span>
<span id="cb6-2">m2.RemoveBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,aid)</span>
<span id="cb6-3">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That’s what I was looking for.</p>
<p>If I want to actually include the H bond in the drawing in a way that won’t make chemists cringe, I can add a hydrogen bond:</p>
<div id="d83d7b9a-b770-45b4-b365-8c1efd4cc325" class="cell" data-scrolled="true" data-execution_count="21">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">bid1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,aid,Chem.BondType.HYDROGEN)</span>
<span id="cb7-2">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Note that simply adding the hydrogen bond to start with would not have worked since zero-order bonds are not included in the RDKit’s ring-finding code by default:</p>
<div id="91026155-f773-48ab-ad0e-2445247e0659" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">m3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RWMol(m)</span>
<span id="cb8-2">aid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m3.AddAtom(Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-3">m3.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,aid,Chem.BondType.SINGLE)</span>
<span id="cb8-4">m3.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,aid,Chem.BondType.HYDROGEN)</span>
<span id="cb8-5">m3</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Here’s a more complex molecule where I want to show two intramolecular H bonds:</p>
<div id="91fe8bef-5c53-47de-809b-d5287d498519" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1cccc(C(=O)OC)c1NC(=O)C1CCCCC1(=O)'</span>)</span>
<span id="cb9-2">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>In this case I would like to indicate H bonds between the H on N10 and O6 as well as the H on C0 and O12.</p>
<div id="4e1d8519-acef-4610-ab26-b882036cffc1" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the Hs:</span></span>
<span id="cb10-2">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RWMol(m)</span>
<span id="cb10-3">aid1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.AddAtom(Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb10-4">m2.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,aid1,Chem.BondType.SINGLE)</span>
<span id="cb10-5">aid2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.AddAtom(Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb10-6">m2.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,aid2,Chem.BondType.SINGLE)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add single bonds for the intramolecular H bonds:</span></span>
<span id="cb10-9">bid1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.AddBond(aid1,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,Chem.BondType.SINGLE)</span>
<span id="cb10-10">bid2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.AddBond(aid2,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,Chem.BondType.SINGLE)</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate coordinates:</span></span>
<span id="cb10-13">rdDepictor.Compute2DCoords(m2)</span>
<span id="cb10-14"></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to H bonds:</span></span>
<span id="cb10-16">m2.GetBondWithIdx(bid1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).SetBondType(Chem.BondType.HYDROGEN)</span>
<span id="cb10-17">m2.GetBondWithIdx(bid2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).SetBondType(Chem.BondType.HYDROGEN)</span>
<span id="cb10-18"></span>
<span id="cb10-19">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can use a similar trick to get conformers of chelators that have the chelating atoms in the expected geometry.</p>
<div id="5ebae17a" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NCCN'</span>)</span>
<span id="cb11-2">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This time I’m going to add an extra atom (to stand in for the atom which will eventually be chelated), form bonds to that, and then remove that atom after generating 2D coordinates:</p>
<div id="506c1ba0" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RWMol(m)</span>
<span id="cb12-2">aid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m2.AddAtom(Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb12-3">m2.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,aid,Chem.BondType.SINGLE)</span>
<span id="cb12-4">m2.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,aid,Chem.BondType.SINGLE)</span>
<span id="cb12-5">rdDepictor.Compute2DCoords(m2)</span>
<span id="cb12-6">m2.RemoveAtom(aid)</span>
<span id="cb12-7">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>drawing</category>
  <category>exploration</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-10-04-rendering-intramolecular-h-bonds.html</guid>
  <pubDate>Fri, 03 Oct 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/rendering-intramolecular-h-bonds.png" medium="image" type="image/png" height="123" width="144"/>
</item>
<item>
  <title>Drawing simple protein–ligand interaction diagrams with the RDKit</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1.html</link>
  <description><![CDATA[ 




<p>I’m a big fan of 2D protein–ligand interaction diagrams; when well done these plots can provide an information-dense view of the structure that is still easy to understand.</p>
<p>A really nice example of this is the work on <a href="https://doi.org/10.1021/ml100164p">PoseView</a> from Matthias Rarey’s group in Hamburg. Here’s an example from that publication:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://pubs.acs.org/cms/10.1021/ml100164p/asset/images/medium/ml-2010-00164p_0005.gif" class="img-fluid figure-img"></p>
<figcaption>image</figcaption>
</figure>
</div>
<p>Though I would love to have an RDKit implementation of PoseView, actually implementing something like that is deeply nontrivial, so I’ve never really done anything in that direction. This week I had a random idea for a way to provide basic protein–ligand interaction diagrams using existing RDKit functionality. This post is an exploration of that.</p>
<p>Here’s an example of what you get with this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1_files/figure-html/121dfaf4-1-image-2.png" class="img-fluid figure-img"></p>
<figcaption>image-2.png</figcaption>
</figure>
</div>
<p>To be clear: I am fully aware that this is not nearly as good as what PoseView and similar tools can do, but I think it’s still quite useful. I have a few ideas for straightforward changes to the backend code to improve the plots that I’m also going to take a look at.</p>
<div id="9bb879a5-1a40-40b3-b679-56f84618d0b8" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDepictor</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVG</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-6">IPythonConsole.molSize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.6</code></pre>
</div>
</div>
<section id="initial-exploration" class="level1">
<h1>Initial exploration</h1>
<p>Start with the ligand for a recent PDB structure, 8yqe:</p>
<div id="12f226e6-d0bc-4b2f-a807-30922590055d" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from https://www.ebi.ac.uk/pdbe/entry/pdb/8yqe?activeTab=ligands</span></span>
<span id="cb3-2">lig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCS(=O)(=O)N1CCC(CC1)NC(=O)c2c(cn[nH]2)NC(=O)c3c(ccc(c3F)C4CCOCC4)F'</span>)</span>
<span id="cb3-3">IPythonConsole.drawOptions.addAtomIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-4">lig</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The strategy to draw the interaction diagrams is to add a new dummy atom to the ligand molecule for each residue it’s interacting with and then connect that to the interacting ligand atom with a zero-order bond. The standard RDKit 2D coordinate generation code will then do something sensible with this.</p>
<p>I include <code>hbond</code> interactions that are around 3.0<img src="https://latex.codecogs.com/png.latex?%5CAA"> or less from the list of interactions on the <a href="https://www.ebi.ac.uk/pdbe/entry/pdb/8yqe?activeTab=ligands">ligand page</a></p>
<div id="a620928d-d684-4115-b786-6f934b2c4840" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">lig_with_interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RWMol(lig)</span>
<span id="cb4-2">leu83 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-3">leu83.SetProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atomLabel'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Leu 83'</span>)</span>
<span id="cb4-4">aid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lig_with_interactions.AddAtom(leu83)</span>
<span id="cb4-5">lig_with_interactions.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,aid,Chem.BondType.ZERO)</span>
<span id="cb4-6">lig_with_interactions.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,aid,Chem.BondType.ZERO)</span>
<span id="cb4-7"></span>
<span id="cb4-8">hoh407 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-9">hoh407.SetProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atomLabel'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H2O 407'</span>)</span>
<span id="cb4-10">aid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lig_with_interactions.AddAtom(hoh407)</span>
<span id="cb4-11">lig_with_interactions.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,aid,Chem.BondType.ZERO)</span>
<span id="cb4-12"></span>
<span id="cb4-13">hoh441 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-14">hoh441.SetProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atomLabel'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H2O 441'</span>)</span>
<span id="cb4-15">aid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lig_with_interactions.AddAtom(hoh441)</span>
<span id="cb4-16">lig_with_interactions.AddBond(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,aid,Chem.BondType.ZERO)</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this doesn't work because the ring centroid doesn't get put in the middle of the ring</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ring_center = Chem.Atom(0)</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aid = lig_with_interactions.AddAtom(ring_center)</span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for rid in (22,23,24,25,26,27):</span></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     lig_with_interactions.AddBond(rid,aid,Chem.BondType.ZERO)</span></span>
<span id="cb4-23"></span>
<span id="cb4-24">lig_with_interactions</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="making-it-easier-to-use" class="level1">
<h1>Making it easier to use</h1>
<p>That doesn’t look terrible. Write a function to automate the process and include highlights around the residue pseudo-atoms:</p>
<div id="4b76011f-6f90-41c9-8bb9-dbaeda91e53a" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_ligand_with_interactions(lig,lig_name,interactions,size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)):   </span>
<span id="cb5-2">    lig_with_interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RWMol(lig)</span>
<span id="cb5-3">    </span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add pseudo-atoms (and bonds to them) for the interacting residues:</span></span>
<span id="cb5-5">    pts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-6">    clrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (aname,oaids) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> interactions:</span>
<span id="cb5-8">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Atom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-9">        res.SetProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atomLabel'</span>,aname)</span>
<span id="cb5-10">        aid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lig_with_interactions.AddAtom(res)</span>
<span id="cb5-11">        pts.append(aid)</span>
<span id="cb5-12">        clrs[aid] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>)</span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> oaid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> oaids:</span>
<span id="cb5-14">            lig_with_interactions.AddBond(aid,oaid,Chem.BondType.ZERO)</span>
<span id="cb5-15">   </span>
<span id="cb5-16">    d2d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw.MolDraw2DSVG(size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-17">    </span>
<span id="cb5-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the draw options so that we end up with circles under the pseudo-atoms:</span></span>
<span id="cb5-19">    d2d.drawOptions().circleAtoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-20">    d2d.drawOptions().fillHighlights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-21">    d2d.drawOptions().continuousHighlight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb5-22">    d2d.drawOptions().highlightRadius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb5-23">    </span>
<span id="cb5-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now draw and return the result</span></span>
<span id="cb5-25">    d2d.DrawMolecule(lig_with_interactions,legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lig_name,</span>
<span id="cb5-26">                     highlightAtoms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pts,highlightAtomColors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>clrs)</span>
<span id="cb5-27">    d2d.FinishDrawing()</span>
<span id="cb5-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> SVG(d2d.GetDrawingText())</span>
<span id="cb5-29"></span>
<span id="cb5-30"></span></code></pre></div>
</div>
<div id="3ef3c749-22a9-4e5d-a9a8-a7175a3513cd" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from https://www.ebi.ac.uk/pdbe/entry/pdb/8yqe?activeTab=ligands</span></span>
<span id="cb6-2">lig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCS(=O)(=O)N1CCC(CC1)NC(=O)c2c(cn[nH]2)NC(=O)c3c(ccc(c3F)C4CCOCC4)F'</span>)</span>
<span id="cb6-3">interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-4">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LYS 89'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,)),</span>
<span id="cb6-5">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ASP 86'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,)),</span>
<span id="cb6-6">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HOH 444'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,)),</span>
<span id="cb6-7">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HOH 441'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,)),</span>
<span id="cb6-8">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HOH 407'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,)),</span>
<span id="cb6-9">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LEU 83'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)),</span>
<span id="cb6-10">)</span>
<span id="cb6-11">draw_ligand_with_interactions(lig,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A1D60 from 8yqe'</span>,interactions)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Do a couple more examples using other recent PDB structures:</p>
<div id="88709c52" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from: https://www.ebi.ac.uk/pdbe/entry/pdb/9uhc?activeTab=ligands</span></span>
<span id="cb7-2">lig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCC(=O)Nc1ccc2c(c1)n(cc2c3c[nH]c4c3nc(cn4)c5cnn(c5)CCN6CCOCC6)C'</span>)</span>
<span id="cb7-3">interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb7-4">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ALA 564'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>,)),</span>
<span id="cb7-5">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GLU 562'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,)),</span>
<span id="cb7-6">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ASP 641'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,)),</span>
<span id="cb7-7">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CYS 488'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,)),</span>
<span id="cb7-8">)</span>
<span id="cb7-9">draw_ligand_with_interactions(lig,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A1EPE from 9uhc'</span>,interactions)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1_files/figure-html/cell-7-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="8bc287f8" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from https://www.ebi.ac.uk/pdbe/entry/pdb/9vci?activeTab=ligands</span></span>
<span id="cb8-2">lig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(=O)NCc1cc(c(cc1F)O)Oc2ccc(cc2)N3c4c(ncnc4N(C3=O)C5CCNCC5)N'</span>)</span>
<span id="cb8-3">interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb8-4">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GLY 9'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,)),</span>
<span id="cb8-5">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ASP 135'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,)),</span>
<span id="cb8-6">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'THR 48'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>,)),</span>
<span id="cb8-7">        (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HOH 637'</span>,(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,)),</span>
<span id="cb8-8">)</span>
<span id="cb8-9">draw_ligand_with_interactions(lig,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A1ERR from 9vci'</span>,interactions)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1_files/figure-html/cell-8-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>There’s clearly room for improvement here (and I have a couple of ideas already), but I think this is already useful as-is.</p>


</section>

 ]]></description>
  <category>drawing</category>
  <category>exploration</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-09-26-drawing-interactions-1.html</guid>
  <pubDate>Thu, 25 Sep 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/drawing-interactions-1.png" medium="image" type="image/png" height="123" width="144"/>
</item>
<item>
  <title>2025 RDKit UGM Recap</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-09-14-UGM-recap.html</link>
  <description><![CDATA[ 




<p>The 2025 RDKit UGM took place last week (September 10-12, 2025) in Prague. This year’s installment of the meeting was organized by Martin Šícho at the University of Chemistry and Technology, Prague. From my perspective the meeting went very well: the logistics were smooth, the technology mostly worked - we had some problems with sound on the first day, but got past those (why is it always sound?), and the program had a good balance of talks and breaks. Many thanks to Martin and the Prague group for putting together a great meeting and to the companies that sponsored the meeting (listed in the <a href="https://github.com/rdkit/UGM_2025">github repo</a>) for enabling us to continue to run the meeting without having to charge registration fees.</p>
<p>We had 120 registered attendees; as usual we were at capacity (the limiting factor was the size of the lecture hall). This year we only had a couple of no-shows (a common problem with free meetings). We had the usual good mix of academic and industrial attendees and of people in different stages of their careers. The meeting was live streamed over zoom and there were typically 40-60 people watching the talks remotely and participating via the discord server.</p>
<p>There were 19 standard talks (we did a mix of 20- and 30-minute slots this year and I think that worked pretty well), 10 lightning talks, and 20 posters. On Friday we had the hackathon and three workshops. I haven’t heard much feedback about the workshops yet, but there were a number of pull requests submitted to the RDKit repo during the hackathon and in the next couple of days, so it looks like that was productive.</p>
<p>The github repo is here: <a href="https://github.com/rdkit/UGM_2025">https://github.com/rdkit/UGM_2025</a>. The slides from the presentations will show up in the repo as speakers send them to me or submit PRs themselves. I will be uploading the videos of the talks to <a href="https://www.youtube.com/playlist?list=PLugOo5eIVY3GDYcuR5kKIXwHIKKP8Vj0B">the YouTube playlist</a> over the next few weeks as I have time to process them.</p>
<p>I, unsurprisingly, really enjoyed the meeting. I was exhausted at the end of each day, and totally wiped out on Friday, but that’s 100 percent expected. Some personal thoughts/impressions:</p>
<ul>
<li>I had never been to Prague before and very much enjoyed the bits of it I saw. The UGM itself kept me busy during the days, but the area around the campus was quite lively and I did get to see some other parts while running (pro tip: don’t try and run along the river in the afternoon… there are way too many people out and about! Early mornings were a lot more runnable).</li>
<li>As always, it was great to see old friends and meet new people. My tendency, particularly during meetings like this, is to spend most of my time talking to people I already know, but I think I did a decent job this year of tempering that.</li>
<li>It was really nice to have all four RDKit maintainers (Brian, Paolo, Ricardo, and myself) together in one place. I’m not sure when the last time that happened was.</li>
<li>The quality of the talks was good. We had a couple that were more marketing-heavy than I would of liked, but they were definitely the exception. As usual, there was a nice mix of academic and industrial, method-development and application, deeply technical and high-level.</li>
<li>One recurring theme this year was the handling of sequence-based entities and/or polymers. There were several talks that touched on this topic from different angles and I’m really curious to see how this will evolve in the RDKit. This is an area where I don’t have a lot of personal experience, so it’s going to be fun for me to see how the RDKit community tackles this.</li>
</ul>
<p>I came back from the meeting with a long list of things I want to work on in the RDKit, and that’s a really good sign. I hope that other attendees came away similarly inspired!</p>
<p>I will announce the dates and locations of the 2026 European UGM as soon as they are finalized. If you are interested in hosting a future UGM, please get in touch with me.</p>



 ]]></description>
  <category>general</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-09-14-UGM-recap.html</guid>
  <pubDate>Sat, 13 Sep 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>The 2025 RDKit UGM is next week</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-09-07-UGM-upcoming.html</link>
  <description><![CDATA[ 




<p>The 2025 RDKit UGM takes place next week (September 10-12, 2025) in Prague. The github repo is here: <a href="https://github.com/rdkit/UGM_2025">https://github.com/rdkit/UGM_2025</a>.</p>
<p>The UGM is “sold out”, so we can’t accept any last-minute registrations, but we will be live streaming it over zoom. I will be posting the links to the zoom sessions in the repo as well as in the <a href="https://discord.gg/5cAr6x66Ug">UGM discord server</a>.</p>
<p>The upcoming meeting is my official excuse for why there is no real blog post this week (I also took a few days off to run an ultra-marathon, but I’m not allowed to use that as an excuse for skipping a blog post. ;-)). Hopefully I’ll manage to put something real together next week after the UGM.</p>



 ]]></description>
  <category>general</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-09-07-UGM-upcoming.html</guid>
  <pubDate>Sat, 06 Sep 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Scaling conformer generation</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-08-30-confgen-scaling.html</link>
  <description><![CDATA[ 




<p>This week the question came up in the lab of how well the conformer generation code scales with the number of threads used. Since generating conformers is embarassingly parallel - the conformers don’t depend on each other (this isn’t quite true if you are doing RMS pruning) - in a perfect world you’d expect more or less linear scaling. So theoretically using 4 times as many threads should take 1/4 as much time as long as the number of threads is less than the number of conformers being generated. In reality, things don’t quite work out this way since the individual conformers can take different amounts of time to generate due to the stochastic nature of the RDKit’s distance-geometry-based algorithm.</p>
<p>I decided to do a quick test to see how well things scale on my machine.</p>
<blockquote class="blockquote">
<p>Aside: this post is looking at runtimes of conformer generation for individual molecules. We can further increase the speed of conformer generation for large sets of molecules by splitting the work across multiple machines. That’s a topic for a different post</p>
</blockquote>
<div id="2f30cd5b" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDistGeom</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-10">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tableau-colorblind10'</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.5</code></pre>
</div>
</div>
<p>Start by loading some molecules. This is a set of 370 molecules that are present in both the <a href="https://www.crystallography.net/cod/">COD</a> and <a href="https://www.ebi.ac.uk/chembl/">ChEMBL</a>. I use these (as well as some other COD subsets) a lot for confgen testing:</p>
<div id="44b269e5" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Chem.ForwardSDMolSupplier(gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../data/COD_2025Jan13.organic.chembl_selected.sdf.gz'</span>),</span>
<span id="cb3-2">                                          removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ms)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>370</code></pre>
</div>
</div>
<p>For the purposes of this post we’ll just use 100 of the COD molecules. Add Hs to the mols and create the subset:</p>
<div id="7e2cac99" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.AddHs(m) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ms]</span>
<span id="cb5-2">ms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ms[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]</span></code></pre></div>
</div>
<p>My linux box has 8 performance cores (each of which can run two hyperthreads) and 8 “efficient” cores, so python thinks I have 24 CPUs available:</p>
<div id="6aec1e72" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb6-2">multiprocessing.cpu_count()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>24</code></pre>
</div>
</div>
<p>I will try thread counts up to 10 to check scaling; a bit beyond the number of physical performance cores on my machine.</p>
<p>Now try generating both 100 conformer and 400 conformer sets for each molecule using different thread counts and track how long it takes:</p>
<div id="3ab047dd" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">threadCounts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb8-2"></span>
<span id="cb8-3">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.ETKDGv3()</span>
<span id="cb8-4">params.randomSeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xa100f</span></span>
<span id="cb8-5"></span>
<span id="cb8-6">tgtConfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb8-7">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tgt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tgtConfs:</span>
<span id="cb8-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Doing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tgt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> conformers"</span>)</span>
<span id="cb8-10">    accum[tgt] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tc <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> threadCounts:</span>
<span id="cb8-12">        params.numThreads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tc</span>
<span id="cb8-13">        accum[tgt][tc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Doing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> threads"</span>)</span>
<span id="cb8-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(ms):</span>
<span id="cb8-16">            t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb8-17">            rdDistGeom.EmbedMultipleConfs(m,tgt,params)</span>
<span id="cb8-18">            t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb8-19">            accum[tgt][tc].append(t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1)</span>
<span id="cb8-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(accum[tgt][tc])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Doing 100 conformers
Doing 1 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [02:25&lt;00:28,  1.65s/it][16:37:31] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [02:37&lt;00:00,  2.19it/s][16:37:43] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [02:39&lt;00:00,  1.59s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    159.0
Doing 2 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [01:17&lt;00:14,  1.15it/s][16:39:02] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [01:24&lt;00:00,  3.86it/s][16:39:08] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [01:25&lt;00:00,  1.18it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    85.0
Doing 4 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [00:42&lt;00:08,  2.12it/s][16:39:51] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [00:45&lt;00:00,  6.30it/s][16:39:55] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:46&lt;00:00,  2.17it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    46.1
Doing 6 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [00:29&lt;00:05,  2.93it/s][16:40:25] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [00:32&lt;00:00,  9.02it/s][16:40:27] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:32&lt;00:00,  3.09it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    32.3
Doing 8 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [00:24&lt;00:04,  3.57it/s][16:40:52] UFFTYPER: Unrecognized charge state for atom: 0
 96%|██████████████████████████████████████████████████████████████████████████████████████████████    | 96/100 [00:26&lt;00:00,  8.34it/s][16:40:54] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:26&lt;00:00,  3.74it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    26.7
Doing 10 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [00:25&lt;00:04,  3.44it/s][16:41:19] UFFTYPER: Unrecognized charge state for atom: 0
 96%|██████████████████████████████████████████████████████████████████████████████████████████████    | 96/100 [00:26&lt;00:00,  7.85it/s][16:41:21] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:27&lt;00:00,  3.67it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    27.2
Doing 400 conformers
Doing 1 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [09:37&lt;01:48,  6.40s/it][16:50:59] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [10:25&lt;00:03,  1.82s/it][16:51:47] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [10:29&lt;00:00,  6.30s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    629.9
Doing 2 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [05:04&lt;00:57,  3.37s/it][16:56:56] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [05:29&lt;00:01,  1.04it/s][16:57:21] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [05:32&lt;00:00,  3.32s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    332.1
Doing 4 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [02:38&lt;00:29,  1.76s/it][17:00:02] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [02:51&lt;00:00,  2.01it/s][17:00:15] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [02:52&lt;00:00,  1.72s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    172.4
Doing 6 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [01:48&lt;00:20,  1.22s/it][17:02:04] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [01:57&lt;00:00,  2.87it/s][17:02:14] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [01:58&lt;00:00,  1.18s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    118.4
Doing 8 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [01:30&lt;00:17,  1.01s/it][17:03:44] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [01:37&lt;00:00,  3.39it/s][17:03:52] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [01:38&lt;00:00,  1.02it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    98.1
Doing 10 threads</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code> 83%|█████████████████████████████████████████████████████████████████████████████████▎                | 83/100 [01:36&lt;00:18,  1.10s/it][17:05:29] UFFTYPER: Unrecognized charge state for atom: 0
 98%|████████████████████████████████████████████████████████████████████████████████████████████████  | 98/100 [01:44&lt;00:00,  3.17it/s][17:05:37] UFFTYPER: Unrecognized charge state for atom: 8
100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [01:45&lt;00:00,  1.05s/it]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>    105.4</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
</div>
<p>Calculate the relative runtime for each molecule with each threadcount. If everything is scaling perfectly, we’d expect doubling the number of threads to cut the runtime in half.</p>
<div id="89efa499" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">factors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb35-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nc <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb35-3">    factors[nc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb35-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tc <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum[nc]:</span>
<span id="cb35-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb35-6">            factors[nc][tc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ms)</span>
<span id="cb35-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb35-8">            factors[nc][tc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb35-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ms):</span>
<span id="cb35-10">                factors[nc][tc].append(accum[nc][tc][i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>accum[nc][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][i])</span>
<span id="cb35-11">            </span></code></pre></div>
</div>
<p>Now plot the results.</p>
<div id="f66fba4d" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb36-2">xp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(threadCounts))]</span>
<span id="cb36-3">widths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(threadCounts))]</span>
<span id="cb36-4">plt.boxplot([factors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>][tc] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tc <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> threadCounts],positions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xp,widths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>widths,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'100 conformers'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-5">xp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(threadCounts))]</span>
<span id="cb36-6">plt.boxplot([factors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>][tc] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tc <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> threadCounts],positions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xp,widths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>widths,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'400 conformers'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-7">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(threadCounts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> threadCounts])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of threads'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scaling factor'</span>)</span>
<span id="cb36-10">plt.plot((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.3</span>),(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k--'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-11">plt.plot((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.3</span>),(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k--'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-12">plt.plot((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.3</span>),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k--'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-13">plt.plot((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.3</span>),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k--'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-14">plt.plot((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.3</span>),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k--'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-30-confgen-scaling_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The left-hand boxplot in each column is the results for 100 conformers, the right-hand boxplot is for 400 conformers. The dashed line in each column shows what you would expect for perfect scaling.</p>
<p>We can see that on my machine with these molecules the scaling is pretty good up to about 6 threads but that by the time we get to 10 threads we’re deviating pretty strongly from perfect scaling. In fact, the runtime for 10 threads isn’t massively better than it is for 8 (the number of physical performance cores in my machine). Unsurprisingly, the scaling is better for 400 conformers than it is for 100, but even with 400 conformers it’s not really worth increasing from 8 to 10 threads on my machine.</p>
<p>Based on this analysis, I’d probably go with using either 6 or 8 threads for future confgen work on this machine.</p>



 ]]></description>
  <category>conformers</category>
  <category>questions</category>
  <category>technical</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-08-30-confgen-scaling.html</guid>
  <pubDate>Fri, 29 Aug 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/confgen-scaling-1.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>How the 2D/3D flag in Mol blocks is used</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-08-22-interpreting-the-2d3d-flag.html</link>
  <description><![CDATA[ 




<p>[This is an expanded version of a section which will be added to the RDKit documentation to clarify an important detail about the way Mol and SD files are parsed.]</p>
<section id="background" class="level1">
<h1>Background</h1>
<p>Mol blocks, Mol files, and SD files can describe 2D or 3D molecules and include a flag (called “dimensional code” in the spec) to indicate whether the coordinates are 2D or 3D. The flag shows up in the second line of the Mol block, and is present in both V2000:</p>
<pre><code>nitrogen
     RDKit          2D

  2  1  0  0  0  0  0  0  0  0999 V2000
    0.0000    0.0000    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
   -0.0000   -1.5000    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
  1  2  3  0
M  END</code></pre>
<p>and V3000 mol blocks:</p>
<pre><code>nitrogen
     RDKit          2D

  0  0  0  0  0  0  0  0  0  0999 V3000
M  V30 BEGIN CTAB
M  V30 COUNTS 2 1 0 0 0
M  V30 BEGIN ATOM
M  V30 1 N 0.000000 0.000000 0.000000 0
M  V30 2 N -0.000000 -1.500000 0.000000 0
M  V30 END ATOM
M  V30 BEGIN BOND
M  V30 1 3 1 2
M  V30 END BOND
M  V30 END CTAB
M  END</code></pre>
<p>The CTFile specification says the following about this flag: &gt; The “dimensional code” is maintained explicitly. Thus “3D” really means 3D, &gt; although “2D” will be interpreted as 3D if any non-zero Z-coordinates are &gt; found</p>
<p>That’s simple (and logical) enough, but of course in the real world things are more complicated. Files found “in the wild” include every possible combination of 2D/3D flag and 2D/3D coordinates, so we need to decide how to interpret these combinations. Things are made more complicated by the possible presence of wedged bonds in the Mol block. Wedged bonds are typically a signal that something is known about the stereochemistry of the molecule; how do we combine this information with the coordinates?</p>
<blockquote class="blockquote">
<p><em>Aside on 2D vs 3D coordinates</em>: in Mol blocks X, Y, and Z coordinates are always provided (if any of them are missing, they are set to zero). It’s also possible to have 3D coordinates for planar molecules. For the purposes of this discussion, “2D” coordinates means that all Z coordinates are zero, and a “2D” RDKit molecule is one where the (default) conformer is marked as being 2D (i.e.&nbsp;the conformer’s <code>Is3D()</code> method returns <code>False</code>).</p>
</blockquote>
</section>
<section id="what-the-rdkit-does" class="level1">
<h1>What the RDKit does</h1>
<p>The following table describes how the RDKit interprets all possible combinations of dimensionality flag, coordinate dimensionality, and the presence or absence of wedged bonds:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>flag</th>
<th>coords</th>
<th>wedging</th>
<th>result</th>
<th>notes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2D</td>
<td>2D</td>
<td>no</td>
<td>2D</td>
<td>no chirality</td>
</tr>
<tr class="even">
<td>3D</td>
<td>2D</td>
<td>no</td>
<td>3D</td>
<td>no chirality</td>
</tr>
<tr class="odd">
<td>3D</td>
<td>3D</td>
<td>no</td>
<td>3D</td>
<td>chirality from coords</td>
</tr>
<tr class="even">
<td>2D</td>
<td>3D</td>
<td>no</td>
<td>3D</td>
<td>chirality from coords</td>
</tr>
<tr class="odd">
<td>2D</td>
<td>2D</td>
<td>yes</td>
<td>2D</td>
<td>chirality from wedging</td>
</tr>
<tr class="even">
<td>3D</td>
<td>2D</td>
<td>yes</td>
<td>2D</td>
<td>chirality from wedging</td>
</tr>
<tr class="odd">
<td>3D</td>
<td>3D</td>
<td>yes</td>
<td>3D</td>
<td>chirality from coords</td>
</tr>
<tr class="even">
<td>2D</td>
<td>3D</td>
<td>yes</td>
<td>3D</td>
<td>chirality from coords</td>
</tr>
</tbody>
</table>
<p>This is consistent with what the specification says except for the case where the 3D flag is set for 2D coordinates and a wedge is present, in which case we ignore the 3D flag, mark the conformer as 2D, and set the stereochemistry based on the wedging.</p>
<p>In cases where no 2D/3D flag is provided, the default value of the flag is 2D.</p>
<p>In a 2D structure, wedging is interpreted as a signal to indicate that stereochemistry is present and to indicate what the stereochemistry is (i.e.&nbsp;the stereochemistry is determined based on the 2D coordinates and the direction of the wedge).</p>
<p>When 3D coordinates are provided, stereochemistry is perceived from the coordinates themselves. If wedging is also present it will be ignored; the 3D signal is “stronger” than the wedging signal. The exception to this rule is <a href="https://www.rdkit.org/docs/RDKit_Book.html#atropisomeric-bonds">atropisomeric bonds</a>, where the wedged bond indicates that atropisomerism should be perceived, but the direction of the wedge is ignored.</p>


</section>

 ]]></description>
  <category>documentation</category>
  <category>technical</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-08-22-interpreting-the-2d3d-flag.html</guid>
  <pubDate>Thu, 21 Aug 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>A BRICS tutorial</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial.html</link>
  <description><![CDATA[ 




<p>This post is a short tutorial on using the RDKit’s BRICS implementation, expanding a bit on <a href="https://www.rdkit.org/docs/GettingStartedInPython.html#brics-implementation">what’s in the documentation</a>.</p>
<p>BRICS is a method for fragmenting molecules into smaller pieces along bonds which are likely to be synthetically accessible. The original paper describing the method is:</p>
<blockquote class="blockquote">
<p>Degen, J.; Wegscheid-Gerlach, C.; Zaliani, A.; Rarey, M. On the Art of Compiling and Using “Drug-Like” Chemical Fragment Spaces. ChemMedChem 2008, 3 (10), 1503–1507. https://chemistry-europe.onlinelibrary.wiley.com/doi/full/10.1002/cmdc.200800178</p>
</blockquote>
<div id="e84077fe" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDepictor</span>
<span id="cb1-3">rdDepictor.SetPreferCoordGen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BRICS</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.5</code></pre>
</div>
</div>
<section id="brics-basics" class="level1">
<h1>BRICS basics</h1>
<div id="3c89a385" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">esomeprazole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(OC)c3C)nc2c1'</span>)</span>
<span id="cb3-2">rdDepictor.Compute2DCoords(esomeprazole)</span>
<span id="cb3-3">esomeprazole</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="0aa07efd" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pieces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BRICS.BRICSDecompose(esomeprazole)</span>
<span id="cb4-2">pieces</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>{'[14*]c1ncc(C)c([16*])c1C',
 '[3*]OC',
 '[8*]C[S+]([O-])c1nc2cc([16*])ccc2[nH]1'}</code></pre>
</div>
</div>
<div id="2a2071ea" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">Draw.MolsToGridImage([Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pieces])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The atom environments and connection rules can be found in Scheme 2 of the BRICS paper:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chemistry-europe.onlinelibrary.wiley.com/cms/asset/797b1262-e8d9-42ad-b6b1-ba85878a35de/msch002.gif" class="img-fluid figure-img"></p>
<figcaption>BRICS connection rules</figcaption>
</figure>
</div>
<p>Note that the RDKit BRICS implementation does not contain a definition of L2, a three connected N with a lone pair. We incorporated that with L5 in a more general definition of amine. In the RDKit implementation L5 can connect with L1, L4, L12, L13, L14, L15, and L16. We also added a few additional connection definitions. The actual SMARTS used in the RDKit can be found in <a href="https://github.com/rdkit/rdkit-orig/blob/57058c886a49cc597b0c40641a28697ee3a57aee/Code/GraphMol/ChemTransforms/MolFragmenter.cpp#L104">MolFragmenter.cpp</a> along with the and the <a href="https://github.com/rdkit/rdkit-orig/blob/57058c886a49cc597b0c40641a28697ee3a57aee/Code/GraphMol/ChemTransforms/MolFragmenter.cpp#L205">connection rules</a>. There is also a Python version of the definitions in <a href="https://github.com/rdkit/rdkit-orig/blob/master/rdkit/Chem/BRICS.py">BRICS.py</a>, but this is no longer used and may not exactly the match the C++ implementation.</p>
<p>The RDKit’s BRICS implementation includes the ability to create new molecules by stitching fragments together according to the connection rules above. Here’s an illustration of that showing all the molecules that can be formed by combining the three fragments from esomeprazole using the BRICS connection rules with a maximum enumeration depth of 2:</p>
<div id="d872b9b6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">piecems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(smi) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pieces]</span>
<span id="cb7-2">builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BRICS.BRICSBuild(piecems, maxDepth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scrambleReagents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-3">ms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(builder)</span>
<span id="cb7-4">Draw.MolsToGridImage(ms)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="enumerating-a-larger-set-of-molecules" class="level1">
<h1>Enumerating a larger set of molecules</h1>
<p>Here I grab the ChEMBL molecules that were most similar to esomeprazole, fragment them together with esomeprazole, and then explore some of the resulting molecules.</p>
<section id="aside-grabbing-similar-molecules-from-chembl" class="level2">
<h2 class="anchored" data-anchor-id="aside-grabbing-similar-molecules-from-chembl">Aside: grabbing similar molecules from ChEMBL</h2>
<p>Here’s the query I executed and the results returned:</p>
<pre><code>chembl_35=# select chembl_id,m,similarity from get_mfp2_neighbors('COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(OC)c3C)nc2c1') join chembl_id_lookup on (molregno=entity_id and entity_type='COMPOUND') join molecule_hierarchy using (molregno) where molregno=parent_molregno and similarity&lt;1 order by similarity desc limit 20;
   chembl_id   |                              m                              |     similarity     
---------------+-------------------------------------------------------------+--------------------
 CHEMBL9890    | COc1c(C)cnc(C[S+]([O-])c2nc3cc(OC(F)F)ccc3[nH]2)c1C         | 0.8333333333333334
 CHEMBL5089043 | COc1c(C)cnc(C[S@@+]([O-])c2nc3cc(OC(F)F)ccc3[nH]2)c1C       | 0.8333333333333334
 CHEMBL5076667 | COc1c(C)cnc(C[S@+]([O-])c2nc3cc(OC(F)F)ccc3[nH]2)c1C        | 0.8333333333333334
 CHEMBL3527071 | COc1ccc2[nH]c([S+]([O-])Cc3ncc(CO)c(OC)c3C)nc2c1            | 0.8148148148148148
 CHEMBL4525760 | COc1ccc2[nH]c([S+]([O-])Cc3ncc(C(=O)O)c(OC)c3C)nc2c1        |                0.8
 CHEMBL10184   | COc1c(C)cnc(C[S+]([O-])c2nc3ccccc3[nH]2)c1C                 | 0.7692307692307693
 CHEMBL9430    | COc1cnc(C[S+]([O-])c2nc3cc(OC(F)F)ccc3[nH]2)c(C)c1OC        | 0.7288135593220338
 CHEMBL59068   | COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(N(C)C)c3Cl)nc2c1         | 0.7192982456140351
 CHEMBL138250  | COc1c(C)cnc(C[S+]([O-])c2nc3cscc3[nH]2)c1C                  | 0.7169811320754716
 CHEMBL5070031 | COc1ccc2[nH]c([S@@+]([O-])Cc3nccc(OC)c3C)nc2c1              | 0.7090909090909091
 CHEMBL10061   | COc1cnc(C[S+]([O-])c2nc3cc(OC(F)(F)C(F)F)ccc3[nH]2)c(C)c1OC | 0.6935483870967742
 CHEMBL1475252 | COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(OC)c3C)nc2n1             | 0.6909090909090909
 CHEMBL9992    | COc1cnc(C[S+]([O-])c2nc3cc(OCC(F)(F)F)ccc3[nH]2)c(C)c1OC    | 0.6885245901639344
 CHEMBL440676  | COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(N4CCCC4)c3Cl)nc2c1       | 0.6721311475409836
 CHEMBL20315   | COc1ccc2[nH]c([S+]([O-])Cc3c(N)cc(C)c(OC)c3C)nc2c1          | 0.6666666666666666
 CHEMBL59784   | COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(N4CCCCC4)c3Cl)nc2c1      | 0.6612903225806451
 CHEMBL144285  | COc1ccc2[nH]c([S+]([O-])Cc3nccc(OC(C)C)c3C)nc2c1            |               0.65
 CHEMBL341550  | COc1ccc(-c2scc3[nH]c([S+]([O-])Cc4ncc(C)c(OC)c4C)nc23)cc1   |               0.65
 CHEMBL1796802 | COc1cc2nc([S+]([O-])Cc3ncc(C)c(OC)c3C)[nH]c2cc1NC(C)=O      | 0.6451612903225806
 CHEMBL58833   | COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(N4CCOCC4)c3Cl)nc2c1      |           0.640625
(20 rows)
</code></pre>
<p>the very useful <code>get_mfp2_neighbors()</code> function is from <a href="https://www.rdkit.org/docs/Cartridge.html#loading-chembl">the cartridge documentation</a>.</p>
<p>Here’s the set of molecules we’ll use:</p>
<div id="cb134904" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">smis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(OC)c3C)nc2c1</span></span>
<span id="cb9-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1c(C)cnc(C[S+]([O-])c2nc3cc(OC(F)F)ccc3[nH]2)c1C</span></span>
<span id="cb9-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3ncc(CO)c(OC)c3C)nc2c1</span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3ncc(C(=O)O)c(OC)c3C)nc2c1</span></span>
<span id="cb9-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1c(C)cnc(C[S+]([O-])c2nc3ccccc3[nH]2)c1C</span></span>
<span id="cb9-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1cnc(C[S+]([O-])c2nc3cc(OC(F)F)ccc3[nH]2)c(C)c1OC</span></span>
<span id="cb9-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(N(C)C)c3Cl)nc2c1</span></span>
<span id="cb9-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1c(C)cnc(C[S+]([O-])c2nc3cscc3[nH]2)c1C</span></span>
<span id="cb9-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3nccc(OC)c3C)nc2c1</span></span>
<span id="cb9-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1cnc(C[S+]([O-])c2nc3cc(OC(F)(F)C(F)F)ccc3[nH]2)c(C)c1OC</span></span>
<span id="cb9-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(OC)c3C)nc2n1</span></span>
<span id="cb9-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1cnc(C[S+]([O-])c2nc3cc(OCC(F)(F)F)ccc3[nH]2)c(C)c1OC</span></span>
<span id="cb9-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(N4CCCC4)c3Cl)nc2c1</span></span>
<span id="cb9-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3c(N)cc(C)c(OC)c3C)nc2c1</span></span>
<span id="cb9-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(N4CCCCC4)c3Cl)nc2c1</span></span>
<span id="cb9-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3nccc(OC(C)C)c3C)nc2c1</span></span>
<span id="cb9-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc(-c2scc3[nH]c([S+]([O-])Cc4ncc(C)c(OC)c4C)nc23)cc1</span></span>
<span id="cb9-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1cc2nc([S+]([O-])Cc3ncc(C)c(OC)c3C)[nH]c2cc1NC(C)=O</span></span>
<span id="cb9-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">COc1ccc2[nH]c([S+]([O-])Cc3ncc(C)c(N4CCOCC4)c3Cl)nc2c1'''</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-20">mols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(smi) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smis]</span>
<span id="cb9-21">Draw.MolsToGridImage(mols,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Fragment all the molecules and keep the unique fragments:</p>
<div id="dd009376" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">allfrags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mols:</span>
<span id="cb10-3">    pieces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BRICS.BRICSDecompose(m)</span>
<span id="cb10-4">    allfrags.update(pieces)</span>
<span id="cb10-5">allfrags</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>{'[1*]C(C)=O',
 '[14*]c1ncc(C)c([16*])c1C',
 '[14*]c1ncc(C)c([16*])c1Cl',
 '[14*]c1ncc([16*])c([16*])c1C',
 '[14*]c1nccc([16*])c1C',
 '[16*]c1c(C)cc(N)c([16*])c1C',
 '[16*]c1ccc([16*])cc1',
 '[3*]OC',
 '[3*]OC(F)F',
 '[3*]O[3*]',
 '[4*]C(C)C',
 '[4*]C(F)(F)C(F)F',
 '[4*]CC(F)(F)F',
 '[5*]N(C)C',
 '[5*]N1CCCC1',
 '[5*]N1CCCCC1',
 '[5*]N1CCOCC1',
 '[5*]N[5*]',
 '[6*]C(=O)O',
 '[8*]CO',
 '[8*]C[S+]([O-])c1nc2c([14*])scc2[nH]1',
 '[8*]C[S+]([O-])c1nc2cc([16*])c([16*])cc2[nH]1',
 '[8*]C[S+]([O-])c1nc2cc([16*])ccc2[nH]1',
 '[8*]C[S+]([O-])c1nc2ccccc2[nH]1',
 '[8*]C[S+]([O-])c1nc2cscc2[nH]1',
 '[8*]C[S+]([O-])c1nc2nc([14*])ccc2[nH]1'}</code></pre>
</div>
</div>
<p>We can then recombine fragments to produce new molecules using <code>BRICS.BRICSBuild</code>:</p>
<div id="477d859f" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb12-2">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4">fragms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> allfrags]</span>
<span id="cb12-5">builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BRICS.BRICSBuild(fragms)</span></code></pre></div>
</div>
<p>The result is a generator:</p>
<div id="0d3da57a" class="cell" data-scrolled="true" data-execution_count="20">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">builder</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>&lt;generator object BRICSBuild at 0x785401fb8040&gt;</code></pre>
</div>
</div>
<p>Here’s what the first 16 results look like:</p>
<div id="0edec122" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">newMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(builder) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)]</span>
<span id="cb15-2">Draw.MolsToGridImage(newMols,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s filter out the everything that doesn’t have exactly one sulfoxide:</p>
<div id="73db0750" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">qry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'S-O'</span>)</span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(gen):</span>
<span id="cb16-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> gen:</span>
<span id="cb16-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(res.GetSubstructMatches(qry)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb16-5">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> res</span>
<span id="cb16-6"></span>
<span id="cb16-7">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>)</span>
<span id="cb16-8">builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BRICS.BRICSBuild(fragms)</span>
<span id="cb16-9">newMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(builder)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)]</span>
<span id="cb16-10">Draw.MolsToGridImage(newMols,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)    </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="ef9652c3" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb17-2">builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BRICS.BRICSBuild(fragms)</span>
<span id="cb17-3">newMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(builder)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)]</span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># order by number of atoms;</span></span>
<span id="cb17-5">newMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [newMols[y] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (x,y) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(m.GetNumAtoms(),i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(newMols)])]</span>
<span id="cb17-6">Draw.MolsToGridImage(newMols[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>],molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)    </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="providing-a-seed-to-the-enumeration" class="level2">
<h2 class="anchored" data-anchor-id="providing-a-seed-to-the-enumeration">Providing a seed to the enumeration</h2>
<p>Another option in the BRICS builder is to provide one or more seeds that must be present in every output molecule. Here’s an example of how to do that using the scaffold of esomeprazole along with a version of the scaffold where the N in the second ring is replaced by a C:</p>
<div id="cf14da7f" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">seeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c19ncc(C)c([16*])c1C.C9[S+]([O-])c1nc2cc([16*])ccc2[nH]1'</span>,</span>
<span id="cb18-2">                                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c19ccc(C)c([16*])c1C.C9[S+]([O-])c1nc2cc([16*])ccc2[nH]1'</span>,)]</span>
<span id="cb18-3"></span>
<span id="cb18-4">Draw.MolsToGridImage(seeds)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now do the enumeration using those seeds:</p>
<div id="0f9a5128" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">127</span>)</span>
<span id="cb19-2">builder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BRICS.BRICSBuild(fragms,seeds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seeds)</span>
<span id="cb19-3">newMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(builder)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)]</span>
<span id="cb19-4">Draw.MolsToGridImage(newMols,molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)    </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Doing enumeration providing seeds that are this specific is similar in ways to doing enumeration using the <a href="https://greglandrum.github.io/rdkit-blog/posts/2022-03-14-rgd-and-molzip.html">results of R-group decomposition</a></p>


</section>
</section>

 ]]></description>
  <category>documentation</category>
  <category>tutorial</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-08-15-BRICS-tutorial.html</guid>
  <pubDate>Thu, 14 Aug 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/brics-tutorial-1.png" medium="image" type="image/png" height="115" width="144"/>
</item>
<item>
  <title>Controlling the RDKit’s logging behavior</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-08-10-controlling-logging.html</link>
  <description><![CDATA[ 




<p>One reasonably frequently asked question is how to disable (easy) or capture (a bit trickier) the log messages that the RDKit sends to the console. There are a few ways to do this, so it seemed worthwhile to do a blog post, particularl since I tend to forget how to do the part where the logs are actually captured.</p>
<p>Here are a couple of other sources of information on the topic: - Earlier blog post: <a href="https://greglandrum.github.io/rdkit-blog/posts/2024-02-23-custom-transformations-and-logging.html">https://greglandrum.github.io/rdkit-blog/posts/2024-02-23-custom-transformations-and-logging.html</a> - A discussion topic: <a href="https://github.com/rdkit/rdkit/discussions/8299">https://github.com/rdkit/rdkit/discussions/8299</a></p>
<p>There’s considerably more information on how to use Python’s logging module in the <a href="https://docs.python.org/3/howto/logging.html">Python docs</a>.</p>
<div id="61850596" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.5</code></pre>
</div>
</div>
<div id="14c781ea" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CO(C)C'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[05:47:43] Explicit valence for atom # 1 O, 3, is greater than permitted</code></pre>
</div>
</div>
<p>The easiest thing to do is just disable all logging output:</p>
<div id="5b656d12" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">rdBase.DisableLog(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdApp.*'</span>)</span>
<span id="cb5-2">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CO(C)C'</span>)</span></code></pre></div>
</div>
<p>You can re-enable it later:</p>
<div id="9c8290a8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">rdBase.EnableLog(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdApp.*'</span>)</span>
<span id="cb6-2">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CO(C)C'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[05:47:43] Explicit valence for atom # 1 O, 3, is greater than permitted</code></pre>
</div>
</div>
<p>It’s easier (and perhaps safer) to disable the logging output using a context manager:</p>
<div id="144ff8df" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rdBase.BlockLogs() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> blk:</span>
<span id="cb8-2">    Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CO(C)C'</span>)</span></code></pre></div>
</div>
<p>Outside of the context manager, the logging is still active:</p>
<div id="db0889a8" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CO(C)C'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[05:47:43] Explicit valence for atom # 1 O, 3, is greater than permitted</code></pre>
</div>
</div>
<p>Capturing the log messages requires a bit more work, but isn’t hard.</p>
<p>We start by telling the RDKit to use Python’s logging framework:</p>
<div id="5c1df2ab" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">rdBase.LogToPythonLogger()</span></code></pre></div>
</div>
<p>And now configure the logging using standard Python logging features:</p>
<div id="d72a0e8e" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StringIO</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here we will capture the log output in a StringIO object</span></span>
<span id="cb12-5">sio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StringIO()</span>
<span id="cb12-6">hdlr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.StreamHandler(sio)</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and change the way the messages are formatted:</span></span>
<span id="cb12-9">fmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.Formatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(name)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(levelname)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(message)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-10">hdlr.setFormatter(fmt)</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove any existing handlers from the RDKit logger. This is important if we are working in the notebook:</span></span>
<span id="cb12-13">rdkit.logger.handlers.clear()</span>
<span id="cb12-14">rdkit.logger.addHandler(hdlr)</span></code></pre></div>
</div>
<p>Now errors no longer go to the console:</p>
<div id="93ed700e" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CO(C)C'</span>)</span></code></pre></div>
</div>
<p>But we can access them from the StringIO object:</p>
<div id="e1e66e86" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sio.getvalue())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>rdkit - ERROR - [05:47:43] Explicit valence for atom # 1 O, 3, is greater than permitted
</code></pre>
</div>
</div>
<p>It’s also easy to log to a file:</p>
<div id="e2acaf68" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tempfile</span>
<span id="cb16-2">tf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tempfile.NamedTemporaryFile()</span>
<span id="cb16-3">tf.close() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&lt;- close the file or we will get an error on Windows</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">hdlr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.FileHandler(tf.name)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and change the way the messages are formatted:</span></span>
<span id="cb16-8">fmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.Formatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(name)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(levelname)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(message)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-9">hdlr.setFormatter(fmt)</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove any existing handlers from the RDKit logger. This is important if we are working in the notebook:</span></span>
<span id="cb16-12">rdkit.logger.handlers.clear()</span>
<span id="cb16-13">rdkit.logger.addHandler(hdlr)</span></code></pre></div>
</div>
<div id="1ade2b3c" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CO(C)C'</span>)</span></code></pre></div>
</div>
<div id="0ff908ee" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(tf.name,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb18-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(inf.read())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>rdkit - ERROR - [05:47:43] Explicit valence for atom # 1 O, 3, is greater than permitted
</code></pre>
</div>
</div>
<p>It’s definitely worth taking a look through Python’s <a href="https://docs.python.org/3/howto/logging.html">logging HowTo</a> for more info on working with logging.</p>



 ]]></description>
  <category>documentation</category>
  <category>technical</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-08-10-controlling-logging.html</guid>
  <pubDate>Sat, 09 Aug 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>An LLM experiment</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-31-an-llm-experiment-1.html</link>
  <description><![CDATA[ 




<section id="what-is-this-post" class="level1">
<h1>What is this post?</h1>
<p>On the bus to the CADD GRC, Nadine suggested that I try using Copilot to generate ideas for an RDKit blog post. It seemed like an interesting experiment and I’m heading out for a couple of weeks of vacation, so I thought I’d go ahead and give it a try. This post is the result.</p>
<p>What’s below is the result of a chat session with Copilot, using Claude Sonnet 4. The initial prompt was: <code>suggest a topic for a new RDKit blog post</code>. I made a couple of small edits at the very end, but otherwise the text is exactly as generated by the LLM. I hope to come back to this at some point in the future and dig into the code and content in detail, but right now I need to go pack my gear to head to the mountains for a couple of weeks of climbing and mountaineering.</p>
<p>The actual chat session is <a href="https://raw.githubusercontent.com/greglandrum/rdkit_blog/refs/heads/master/notebooks/results/chat_20250726.json">available here</a>.</p>
<p>I’m going to go ahead and upload this and post it sometime around July 31st (or whenever I have decent internet access). There won’t be a new blog post next week, but I will be back the week of August 11th.</p>
</section>
<section id="rdkit-and-large-language-models-chemical-structure-text-integration-in-the-ai-era" class="level1">
<h1>RDKit and Large Language Models: Chemical Structure-Text Integration in the AI Era</h1>
<p>The landscape of artificial intelligence has been dramatically transformed by the rise of large language models (LLMs), and the field of chemistry is no exception. From GPT-4’s ability to reason about molecular structures to specialized chemistry-focused models like ChemCrow and Galactica, we’re witnessing an unprecedented convergence of natural language processing and chemical informatics. This presents both exciting opportunities and unique challenges for computational chemists and cheminformatics practitioners.</p>
<p>The RDKit, as one of the most widely-used open-source cheminformatics toolkits, finds itself at a fascinating intersection in this new landscape. While LLMs excel at processing and generating text-based representations of chemical knowledge, they often struggle with the precise, structure-based reasoning that is second nature to dedicated cheminformatics tools. Conversely, traditional cheminformatics approaches excel at molecular manipulation and property calculation but have limited ability to understand and generate natural language descriptions of chemical concepts.</p>
<p>This complementary relationship suggests powerful synergies. LLMs can help democratize access to chemical knowledge by translating between technical chemical representations and human-readable explanations. Meanwhile, tools like RDKit provide the essential chemical “reality check” - validating molecular structures, calculating properties, and ensuring that AI-generated chemistry actually makes sense from a chemical perspective.</p>
<p>In this post, we’ll explore practical approaches for integrating RDKit with modern LLM workflows. We’ll cover how to:</p>
<ul>
<li>Use RDKit to validate and process chemical structures generated by LLMs</li>
<li>Convert RDKit molecular representations into rich text descriptions suitable for training or prompting LLMs</li>
<li>Build robust pipelines that combine the strengths of both approaches</li>
<li>Handle the unique challenges that arise when bridging symbolic chemical representations with statistical language models</li>
</ul>
<p>The goal is not to replace either approach, but rather to show how they can work together to create more powerful, reliable, and accessible chemical AI systems. Whether you’re building a chemical chatbot, curating training data for a chemistry-focused LLM, or simply trying to make your chemical data more searchable and interpretable, the patterns we’ll explore should provide a solid foundation.</p>
<p>Let’s start by setting up our environment and exploring some basic integration patterns.</p>
<div id="1759d6cc" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard RDKit imports</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw, Descriptors, rdMolDescriptors</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"RDKit version: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rdBase<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>rdkitVersion<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Generated: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>asctime()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RDKit version: 2025.03.4
Generated: Sat Jul 26 09:53:54 2025</code></pre>
</div>
</div>
<div id="168a2f03" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Additional imports for LLM integration examples</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List, Dict, Optional, Tuple</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb3-7">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</div>
</section>
<section id="structure-validation-rdkit-as-the-chemical-reality-check" class="level1">
<h1>Structure Validation: RDKit as the Chemical Reality Check</h1>
<p>One of the most immediate and practical applications of RDKit in LLM workflows is structure validation. LLMs, while impressive at generating chemical-looking text, often produce invalid SMILES strings, impossible molecular structures, or chemically nonsensical compounds. RDKit provides robust validation capabilities that can catch these errors and provide meaningful feedback.</p>
<p>Let’s explore some common validation scenarios and how to handle them systematically.</p>
<div id="bb7a2e15" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_smiles_with_details(smiles: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>]:</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Comprehensive SMILES validation with detailed feedback.</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns a dictionary with validation results and diagnostic information.</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-6">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: smiles,</span>
<span id="cb4-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb4-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mol'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb4-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb4-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>: [],</span>
<span id="cb4-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>: [],</span>
<span id="cb4-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>: {}</span>
<span id="cb4-14">    }</span>
<span id="cb4-15">    </span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic parsing</span></span>
<span id="cb4-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-18">        mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-20">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>].append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid SMILES: Could not parse structure"</span>)</span>
<span id="cb4-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-22">        </span>
<span id="cb4-23">        result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mol'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol</span>
<span id="cb4-24">        result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-25">        </span>
<span id="cb4-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get canonical SMILES</span></span>
<span id="cb4-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-28">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolToSmiles(mol)</span>
<span id="cb4-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb4-30">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>].append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Could not generate canonical SMILES"</span>)</span>
<span id="cb4-31">        </span>
<span id="cb4-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic chemical checks</span></span>
<span id="cb4-33">        num_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol.GetNumAtoms()</span>
<span id="cb4-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-35">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>].append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empty molecule"</span>)</span>
<span id="cb4-36">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> num_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb4-38">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>].append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Very large molecule (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_atoms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> atoms)"</span>)</span>
<span id="cb4-39">        </span>
<span id="cb4-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for unusual valences</span></span>
<span id="cb4-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-42">            Chem.SanitizeMol(mol)</span>
<span id="cb4-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-44">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>].append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sanitization failed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-45">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-46">        </span>
<span id="cb4-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate basic properties if valid</span></span>
<span id="cb4-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>]:</span>
<span id="cb4-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-50">                result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-51">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>: num_atoms,</span>
<span id="cb4-52">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_bonds'</span>: mol.GetNumBonds(),</span>
<span id="cb4-53">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>: Descriptors.MolWt(mol),</span>
<span id="cb4-54">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>: rdMolDescriptors.CalcNumRings(mol),</span>
<span id="cb4-55">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>: rdMolDescriptors.CalcNumAromaticRings(mol)</span>
<span id="cb4-56">                }</span>
<span id="cb4-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-58">                result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>].append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Property calculation failed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-59">        </span>
<span id="cb4-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb4-61">        result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>].append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Parsing error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-62">    </span>
<span id="cb4-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-64"></span>
<span id="cb4-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function with some examples</span></span>
<span id="cb4-66">test_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-67">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCO"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ethanol - valid</span></span>
<span id="cb4-68">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1ccccc1"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># benzene - valid</span></span>
<span id="cb4-69">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C[C@H](N)C(=O)O"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alanine - valid with stereochemistry</span></span>
<span id="cb4-70">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCO[invalid]"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invalid SMILES</span></span>
<span id="cb4-71">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1CCC"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invalid - unclosed ring</span></span>
<span id="cb4-72">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C(C)(C)(C)(C)C"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># carbon with too many bonds</span></span>
<span id="cb4-73">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># empty string</span></span>
<span id="cb4-74">]</span>
<span id="cb4-75"></span>
<span id="cb4-76"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SMILES Validation Examples:"</span>)</span>
<span id="cb4-77"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb4-78"></span>
<span id="cb4-79"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_smiles:</span>
<span id="cb4-80">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validate_smiles_with_details(smiles)</span>
<span id="cb4-81">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">SMILES: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-82">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Valid: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]:</span>
<span id="cb4-84">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Canonical: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>]:</span>
<span id="cb4-86">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Errors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>]:</span>
<span id="cb4-88">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Warnings: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-89">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>]:</span>
<span id="cb4-90">        props <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>]</span>
<span id="cb4-91">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Properties: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> atoms, MW=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>SMILES Validation Examples:
==================================================

SMILES: CCO
Valid: True
Canonical: CCO
Properties: 3 atoms, MW=46.1

SMILES: c1ccccc1
Valid: True
Canonical: c1ccccc1
Properties: 6 atoms, MW=78.1

SMILES: C[C@H](N)C(=O)O
Valid: True
Canonical: C[C@H](N)C(=O)O
Properties: 6 atoms, MW=89.1

SMILES: CCO[invalid]
Valid: False
Errors: Invalid SMILES: Could not parse structure

SMILES: C1CCC
Valid: False
Errors: Invalid SMILES: Could not parse structure

SMILES: C(C)(C)(C)(C)C
Valid: False
Errors: Invalid SMILES: Could not parse structure

SMILES: 
Valid: False
Errors: Empty molecule</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[09:53:54] SMILES Parse Error: syntax error while parsing: CCO[invalid]
[09:53:54] SMILES Parse Error: check for mistakes around position 5:
[09:53:54] CCO[invalid]
[09:53:54] ~~~~^
[09:53:54] SMILES Parse Error: Failed parsing SMILES 'CCO[invalid]' for input: 'CCO[invalid]'
[09:53:54] SMILES Parse Error: unclosed ring for input: 'C1CCC'
[09:53:54] Explicit valence for atom # 0 C, 5, is greater than permitted</code></pre>
</div>
</div>
<section id="batch-validation-for-llm-outputs" class="level2">
<h2 class="anchored" data-anchor-id="batch-validation-for-llm-outputs">Batch Validation for LLM Outputs</h2>
<p>When working with LLMs that generate multiple chemical structures, you’ll often need to validate batches of SMILES strings. Here’s a more robust approach that can handle large datasets efficiently:</p>
<div id="3bab073e" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> batch_validate_structures(smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>], </span>
<span id="cb7-2">                             include_properties: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb7-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Validate a batch of SMILES strings and return results as a DataFrame.</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Useful for processing LLM outputs or curating chemical datasets.</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb7-7">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-8">    </span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(smiles_list):</span>
<span id="cb7-10">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validate_smiles_with_details(smiles)</span>
<span id="cb7-11">        </span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the result for DataFrame storage</span></span>
<span id="cb7-13">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>: i,</span>
<span id="cb7-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_smiles'</span>: smiles,</span>
<span id="cb7-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>: result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>],</span>
<span id="cb7-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>: result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>],</span>
<span id="cb7-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_errors'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>]),</span>
<span id="cb7-19">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warnings'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>]),</span>
<span id="cb7-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error_messages'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; '</span>.join(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb7-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warning_messages'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; '</span>.join(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb7-22">        }</span>
<span id="cb7-23">        </span>
<span id="cb7-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add properties if requested and available</span></span>
<span id="cb7-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> include_properties <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>]:</span>
<span id="cb7-26">            row.update(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>])</span>
<span id="cb7-27">        </span>
<span id="cb7-28">        results.append(row)</span>
<span id="cb7-29">    </span>
<span id="cb7-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.DataFrame(results)</span>
<span id="cb7-31"></span>
<span id="cb7-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate some LLM-generated SMILES (mix of valid and invalid)</span></span>
<span id="cb7-33">llm_generated_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ibuprofen-like</span></span>
<span id="cb7-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1=CC=C(C=C1)C(=O)O"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># benzoic acid</span></span>
<span id="cb7-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"invalidsmiles123"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clearly invalid</span></span>
<span id="cb7-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1=CC=CC=C1"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># benzene</span></span>
<span id="cb7-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCO"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ethanol</span></span>
<span id="cb7-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C[C@H](N)C(=O)O"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># L-alanine</span></span>
<span id="cb7-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1CCC1C"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># methylcyclopropane</span></span>
<span id="cb7-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1ccccc1c2ccccc2"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># biphenyl</span></span>
<span id="cb7-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCCCCCCCCCCCCCCCO"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># long-chain alcohol</span></span>
<span id="cb7-43">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1=CC=C2C(=C1)C=CC=C2"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># naphthalene</span></span>
<span id="cb7-44">]</span>
<span id="cb7-45"></span>
<span id="cb7-46"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing batch of LLM-generated SMILES..."</span>)</span>
<span id="cb7-47">df_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_validate_structures(llm_generated_smiles)</span>
<span id="cb7-48"></span>
<span id="cb7-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display summary statistics</span></span>
<span id="cb7-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Batch Validation Summary:"</span>)</span>
<span id="cb7-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Total structures: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_results)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Valid structures: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Invalid structures: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>df_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Structures with warnings: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(df_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_warnings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-55"></span>
<span id="cb7-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the results table</span></span>
<span id="cb7-57"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Detailed Results:"</span>)</span>
<span id="cb7-58">display_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_smiles'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>]</span>
<span id="cb7-59">available_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> display_cols <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_results.columns]</span>
<span id="cb7-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df_results[available_cols].to_string(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span>
<span id="cb7-61"></span>
<span id="cb7-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show error details for invalid structures</span></span>
<span id="cb7-63">invalid_structures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_results[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>df_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>]]</span>
<span id="cb7-64"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(invalid_structures) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-65">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Error Details for Invalid Structures:"</span>)</span>
<span id="cb7-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> invalid_structures.iterrows():</span>
<span id="cb7-67">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_smiles'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">': </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error_messages'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processing batch of LLM-generated SMILES...

Batch Validation Summary:
Total structures: 10
Valid structures: 9
Invalid structures: 1
Structures with warnings: 0

Detailed Results:
                 input_smiles  is_valid           canonical_smiles  molecular_weight  num_atoms
CC(C)CC1=CC=C(C=C1)C(C)C(=O)O      True CC(C)Cc1ccc(C(C)C(=O)O)cc1           206.285       15.0
          C1=CC=C(C=C1)C(=O)O      True             O=C(O)c1ccccc1           122.123        9.0
             invalidsmiles123     False                       None               NaN        NaN
                  C1=CC=CC=C1      True                   c1ccccc1            78.114        6.0
                          CCO      True                        CCO            46.069        3.0
              C[C@H](N)C(=O)O      True            C[C@H](N)C(=O)O            89.094        6.0
                      C1CCC1C      True                    CC1CCC1            70.135        5.0
             c1ccccc1c2ccccc2      True        c1ccc(-c2ccccc2)cc1           154.212       12.0
            CCCCCCCCCCCCCCCCO      True          CCCCCCCCCCCCCCCCO           242.447       17.0
        C1=CC=C2C(=C1)C=CC=C2      True             c1ccc2ccccc2c1           128.174       10.0

Error Details for Invalid Structures:
'invalidsmiles123': Invalid SMILES: Could not parse structure</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[09:53:54] SMILES Parse Error: syntax error while parsing: invalidsmiles123
[09:53:54] SMILES Parse Error: check for mistakes around position 1:
[09:53:54] invalidsmiles123
[09:53:54] ^
[09:53:54] SMILES Parse Error: Failed parsing SMILES 'invalidsmiles123' for input: 'invalidsmiles123'</code></pre>
</div>
</div>
</section>
<section id="chemical-plausibility-checks" class="level2">
<h2 class="anchored" data-anchor-id="chemical-plausibility-checks">Chemical Plausibility Checks</h2>
<p>Beyond basic SMILES validation, we can implement more sophisticated checks to assess whether LLM-generated structures are chemically reasonable. This is particularly important because LLMs might generate syntactically valid but chemically implausible structures:</p>
<div id="deaf8036" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> assess_chemical_plausibility(mol: Chem.Mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>]:</span>
<span id="cb10-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Assess the chemical plausibility of a molecule beyond basic validation.</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns flags for potential issues that might indicate AI-generated artifacts.</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb10-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plausible'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Invalid molecule'</span>]}</span>
<span id="cb10-8">    </span>
<span id="cb10-9">    issues <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-10">    warnings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-11">    </span>
<span id="cb10-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Molecular weight checks</span></span>
<span id="cb10-13">    mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Descriptors.MolWt(mol)</span>
<span id="cb10-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lighter than methane</span></span>
<span id="cb10-15">        issues.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Extremely low molecular weight: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very large for small molecule</span></span>
<span id="cb10-17">        warnings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Very high molecular weight: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-18">    </span>
<span id="cb10-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Atom count checks</span></span>
<span id="cb10-20">    num_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol.GetNumAtoms()</span>
<span id="cb10-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unusually large for typical organic molecules</span></span>
<span id="cb10-22">        warnings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Very large molecule: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_atoms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> atoms"</span>)</span>
<span id="cb10-23">    </span>
<span id="cb10-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for unusual atom types in organic chemistry context</span></span>
<span id="cb10-25">    unusual_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol.GetAtoms():</span>
<span id="cb10-27">        symbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> atom.GetSymbol()</span>
<span id="cb10-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> symbol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'S'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cl'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Br'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H'</span>]:</span>
<span id="cb10-29">            unusual_atoms.append(symbol)</span>
<span id="cb10-30">    </span>
<span id="cb10-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> unusual_atoms:</span>
<span id="cb10-32">        warnings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unusual atoms present: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(unusual_atoms)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-33">    </span>
<span id="cb10-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check carbon-to-heteroatom ratio</span></span>
<span id="cb10-35">    carbon_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol.GetAtoms() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> atom.GetSymbol() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>)</span>
<span id="cb10-36">    heteroatom_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol.GetAtoms() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> atom.GetSymbol() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H'</span>])</span>
<span id="cb10-37">    </span>
<span id="cb10-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> heteroatom_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-39">        c_to_hetero_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> carbon_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> heteroatom_count</span>
<span id="cb10-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> c_to_hetero_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Too many heteroatoms</span></span>
<span id="cb10-41">            warnings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unusual C:heteroatom ratio: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c_to_hetero_ratio<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-42">    </span>
<span id="cb10-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for overly complex ring systems</span></span>
<span id="cb10-44">    ring_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol.GetRingInfo()</span>
<span id="cb10-45">    num_rings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ring_info.NumRings()</span>
<span id="cb10-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num_rings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Many fused rings might be suspicious</span></span>
<span id="cb10-47">        warnings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Complex ring system: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_rings<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> rings"</span>)</span>
<span id="cb10-48">    </span>
<span id="cb10-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for extremely high or low LogP (rough estimate)</span></span>
<span id="cb10-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb10-51">        logp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Descriptors.MolLogP(mol)</span>
<span id="cb10-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> logp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:</span>
<span id="cb10-53">            warnings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Very high LogP: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>logp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> logp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb10-55">            warnings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Very low LogP: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>logp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb10-57">        warnings.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Could not calculate LogP"</span>)</span>
<span id="cb10-58">    </span>
<span id="cb10-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for drug-likeness violations (Lipinski's Rule of Five)</span></span>
<span id="cb10-60">    violations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>:</span>
<span id="cb10-62">        violations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MW &gt; 500"</span>)</span>
<span id="cb10-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> Descriptors.MolLogP(mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb10-64">        violations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LogP &gt; 5"</span>)</span>
<span id="cb10-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> Descriptors.NumHDonors(mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb10-66">        violations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H-donors &gt; 5"</span>)</span>
<span id="cb10-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> Descriptors.NumHAcceptors(mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb10-68">        violations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"H-acceptors &gt; 10"</span>)</span>
<span id="cb10-69">    </span>
<span id="cb10-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(violations) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Allow one violation</span></span>
<span id="cb10-71">        warnings.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Multiple Lipinski violations: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>violations<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-72">    </span>
<span id="cb10-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb10-74">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plausible'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(issues) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb10-75">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>: issues,</span>
<span id="cb10-76">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>: warnings,</span>
<span id="cb10-77">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>: {</span>
<span id="cb10-78">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>: mw,</span>
<span id="cb10-79">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>: num_atoms,</span>
<span id="cb10-80">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>: num_rings,</span>
<span id="cb10-81">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>: Descriptors.MolLogP(mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb10-82">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(violations)</span>
<span id="cb10-83">        }</span>
<span id="cb10-84">    }</span>
<span id="cb10-85"></span>
<span id="cb10-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test with some examples</span></span>
<span id="cb10-87">test_molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-88">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCO"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simple alcohol"</span>),</span>
<span id="cb10-89">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ibuprofen"</span>),</span>
<span id="cb10-90">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Very long alkyl chain"</span>),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unusual but valid</span></span>
<span id="cb10-91">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Long fatty acid"</span>),</span>
<span id="cb10-92">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1ccc2c(c1)c3ccccc3c4ccccc24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anthracene (PAH)"</span>),</span>
<span id="cb10-93">]</span>
<span id="cb10-94"></span>
<span id="cb10-95"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chemical Plausibility Assessment:"</span>)</span>
<span id="cb10-96"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb10-97"></span>
<span id="cb10-98"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles, description <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_molecules:</span>
<span id="cb10-99">    mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb10-100">    assessment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> assess_chemical_plausibility(mol)</span>
<span id="cb10-101">    </span>
<span id="cb10-102">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Molecule: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-103">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SMILES: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-104">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Plausible: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>assessment[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plausible'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-105">    </span>
<span id="cb10-106">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> assessment[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>]:</span>
<span id="cb10-107">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Issues: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(assessment[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-108">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> assessment[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>]:</span>
<span id="cb10-109">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Warnings: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(assessment[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-110">    </span>
<span id="cb10-111">    props <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> assessment[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>]</span>
<span id="cb10-112">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Properties: MW=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, "</span></span>
<span id="cb10-113">          <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Rings=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, "</span></span>
<span id="cb10-114">          <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"LogP=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, "</span></span>
<span id="cb10-115">          <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Lipinski violations=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chemical Plausibility Assessment:
==================================================

Molecule: Simple alcohol
SMILES: CCO
Plausible: True
Properties: MW=46.1, Rings=0, LogP=-0.00, Lipinski violations=0

Molecule: Ibuprofen
SMILES: CC(C)CC1=CC=C(C=C1)C(C)C(=O)O
Plausible: True
Properties: MW=206.3, Rings=1, LogP=3.07, Lipinski violations=0

Molecule: Very long alkyl chain
SMILES: CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
Plausible: True
Warnings: Very high LogP: 19.75; Multiple Lipinski violations: ['MW &gt; 500', 'LogP &gt; 5']
Properties: MW=703.4, Rings=0, LogP=19.75, Lipinski violations=2

Molecule: Long fatty acid
SMILES: CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC(=O)O
Plausible: True
Warnings: Very high LogP: 11.40
Properties: MW=466.8, Rings=0, LogP=11.40, Lipinski violations=1

Molecule: Anthracene (PAH)
SMILES: c1ccc2c(c1)c3ccccc3c4ccccc24
Plausible: True
Properties: MW=228.3, Rings=4, LogP=5.15, Lipinski violations=1</code></pre>
</div>
</div>
</section>
<section id="putting-it-together-a-complete-validation-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="putting-it-together-a-complete-validation-pipeline">Putting It Together: A Complete Validation Pipeline</h2>
<p>Here’s how you might integrate these validation functions into a complete pipeline for processing LLM-generated chemical structures:</p>
<div id="091dc7fa" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LLMChemicalValidator:</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A comprehensive validator for LLM-generated chemical structures.</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Combines SMILES validation, chemical plausibility checks, and filtering.</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb12-6">    </span>
<span id="cb12-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, strict_mode: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb12-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strict_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> strict_mode</span>
<span id="cb12-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validation_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_processed'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb12-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_smiles'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb12-12">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chemically_plausible'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb12-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passed_filters'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-14">        }</span>
<span id="cb12-15">    </span>
<span id="cb12-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_structure(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>]:</span>
<span id="cb12-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Validate a single SMILES string with full analysis."""</span></span>
<span id="cb12-18">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validate_smiles_with_details(smiles)</span>
<span id="cb12-19">        </span>
<span id="cb12-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mol'</span>]:</span>
<span id="cb12-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add plausibility assessment</span></span>
<span id="cb12-22">            plausibility <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> assess_chemical_plausibility(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mol'</span>])</span>
<span id="cb12-23">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plausibility'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plausibility</span>
<span id="cb12-24">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chemically_plausible'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plausibility[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plausible'</span>]</span>
<span id="cb12-25">            </span>
<span id="cb12-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply filters based on mode</span></span>
<span id="cb12-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.strict_mode:</span>
<span id="cb12-28">                result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_filters'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (plausibility[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plausible'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> </span>
<span id="cb12-29">                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(plausibility[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warnings'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb12-31">                result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_filters'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plausibility[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plausible'</span>]</span>
<span id="cb12-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb12-33">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chemically_plausible'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb12-34">            result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_filters'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb12-35">        </span>
<span id="cb12-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update stats</span></span>
<span id="cb12-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validation_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_processed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>]:</span>
<span id="cb12-39">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validation_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_smiles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chemically_plausible'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb12-41">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validation_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chemically_plausible'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_filters'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb12-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validation_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passed_filters'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-44">        </span>
<span id="cb12-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb12-46">    </span>
<span id="cb12-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>]]:</span>
<span id="cb12-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Validate a batch of SMILES strings."""</span></span>
<span id="cb12-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validate_structure(smiles) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles_list]</span>
<span id="cb12-50">    </span>
<span id="cb12-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_filtered_structures(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb12-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return only the structures that pass all validation checks."""</span></span>
<span id="cb12-53">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validate_batch(smiles_list)</span>
<span id="cb12-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results </span>
<span id="cb12-55">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passes_filters'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]]</span>
<span id="cb12-56">    </span>
<span id="cb12-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_validation_report(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb12-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate a summary report of validation statistics."""</span></span>
<span id="cb12-59">        stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.validation_stats</span>
<span id="cb12-60">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_processed'</span>]</span>
<span id="cb12-61">        </span>
<span id="cb12-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb12-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No structures processed yet."</span></span>
<span id="cb12-64">        </span>
<span id="cb12-65">        report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb12-66"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Validation Report:</span></span>
<span id="cb12-67"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">==================</span></span>
<span id="cb12-68"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Total structures processed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-69"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Valid SMILES: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_smiles'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_smiles'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%)</span></span>
<span id="cb12-70"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Chemically plausible: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chemically_plausible'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chemically_plausible'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%)</span></span>
<span id="cb12-71"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Passed all filters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passed_filters'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passed_filters'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%)</span></span>
<span id="cb12-72"></span>
<span id="cb12-73"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Success rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'passed_filters'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%</span></span>
<span id="cb12-74"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> report.strip()</span>
<span id="cb12-76"></span>
<span id="cb12-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Demonstration with simulated LLM output</span></span>
<span id="cb12-78"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LLM Chemical Validator Demo"</span>)</span>
<span id="cb12-79"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb12-80"></span>
<span id="cb12-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate a mix of good and problematic LLM-generated structures</span></span>
<span id="cb12-82">llm_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-83">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCO"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ethanol - should pass</span></span>
<span id="cb12-84">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ibuprofen - should pass</span></span>
<span id="cb12-85">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1ccccc1"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># benzene - should pass</span></span>
<span id="cb12-86">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"invalidsmiles"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invalid SMILES</span></span>
<span id="cb12-87">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># very long chain</span></span>
<span id="cb12-88">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1=CC=C(C=C1)C(=O)O"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># benzoic acid - should pass</span></span>
<span id="cb12-89">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C[C@H](N)C(=O)O"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alanine - should pass</span></span>
<span id="cb12-90">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1CCC"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invalid - unclosed ring</span></span>
<span id="cb12-91">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(C)(C)(C)(C)C"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># too many bonds</span></span>
<span id="cb12-92">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extremely long</span></span>
<span id="cb12-93">]</span>
<span id="cb12-94"></span>
<span id="cb12-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test with normal mode</span></span>
<span id="cb12-96"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing with Normal Mode:"</span>)</span>
<span id="cb12-97">validator_normal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LLMChemicalValidator(strict_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb12-98">filtered_normal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validator_normal.get_filtered_structures(llm_output)</span>
<span id="cb12-99"></span>
<span id="cb12-100"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Input structures: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(llm_output)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-101"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Structures passing validation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(filtered_normal)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-102"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Passed structures:"</span>)</span>
<span id="cb12-103"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(filtered_normal, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb12-104">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-105"></span>
<span id="cb12-106"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validator_normal.get_validation_report())</span>
<span id="cb12-107"></span>
<span id="cb12-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test with strict mode</span></span>
<span id="cb12-109"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb12-110"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing with Strict Mode:"</span>)</span>
<span id="cb12-111">validator_strict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LLMChemicalValidator(strict_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-112">filtered_strict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validator_strict.get_filtered_structures(llm_output)</span>
<span id="cb12-113"></span>
<span id="cb12-114"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Structures passing strict validation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(filtered_strict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-115"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validator_strict.get_validation_report())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>LLM Chemical Validator Demo
========================================
Testing with Normal Mode:
Input structures: 10
Structures passing validation: 7

Passed structures:
1. CCO
2. CC(C)Cc1ccc(C(C)C(=O)O)cc1
3. c1ccccc1
4. CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
5. O=C(O)c1ccccc1
6. C[C@H](N)C(=O)O
7. CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
Validation Report:
==================
Total structures processed: 10
Valid SMILES: 7 (70.0%)
Chemically plausible: 7 (70.0%)
Passed all filters: 7 (70.0%)

Success rate: 70.0%

========================================
Testing with Strict Mode:
Structures passing strict validation: 5
Validation Report:
==================
Total structures processed: 10
Valid SMILES: 7 (70.0%)
Chemically plausible: 7 (70.0%)
Passed all filters: 5 (50.0%)

Success rate: 50.0%</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[09:53:54] SMILES Parse Error: syntax error while parsing: invalidsmiles
[09:53:54] SMILES Parse Error: check for mistakes around position 1:
[09:53:54] invalidsmiles
[09:53:54] ^
[09:53:54] SMILES Parse Error: Failed parsing SMILES 'invalidsmiles' for input: 'invalidsmiles'
[09:53:54] SMILES Parse Error: unclosed ring for input: 'C1CCC'
[09:53:54] Explicit valence for atom # 1 C, 6, is greater than permitted
[09:53:54] SMILES Parse Error: syntax error while parsing: invalidsmiles
[09:53:54] SMILES Parse Error: check for mistakes around position 1:
[09:53:54] invalidsmiles
[09:53:54] ^
[09:53:54] SMILES Parse Error: Failed parsing SMILES 'invalidsmiles' for input: 'invalidsmiles'
[09:53:54] SMILES Parse Error: unclosed ring for input: 'C1CCC'
[09:53:54] Explicit valence for atom # 1 C, 6, is greater than permitted</code></pre>
</div>
</div>
</section>
</section>
<section id="from-molecules-to-text-generating-rich-descriptions-for-llm-training" class="level1">
<h1>From Molecules to Text: Generating Rich Descriptions for LLM Training</h1>
<p>While validation is crucial for processing LLM outputs, the reverse direction - converting molecular structures into natural language descriptions - is equally important for training chemical AI systems and creating meaningful prompts. RDKit’s rich chemical analysis capabilities make it possible to generate detailed, chemically-informed text descriptions of molecules.</p>
<p>This approach is valuable for: - Creating training data for chemistry-focused LLMs - Building chemical chatbots with rich molecular knowledge - Making chemical databases more searchable with natural language - Generating explanatory text for chemical education applications</p>
<div id="75bff299" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> extract_molecular_features(mol: Chem.Mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>]:</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Extract comprehensive molecular features suitable for text generation.</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This creates a rich feature dictionary that can be converted to natural language.</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb15-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb15-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {}</span>
<span id="cb15-8">    </span>
<span id="cb15-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb15-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic molecular properties</span></span>
<span id="cb15-11">        features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb15-12">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: Chem.MolToSmiles(mol),</span>
<span id="cb15-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_formula'</span>: rdMolDescriptors.CalcMolFormula(mol),</span>
<span id="cb15-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(Descriptors.MolWt(mol), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb15-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>: mol.GetNumAtoms(),</span>
<span id="cb15-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_heavy_atoms'</span>: mol.GetNumHeavyAtoms(),</span>
<span id="cb15-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_bonds'</span>: mol.GetNumBonds(),</span>
<span id="cb15-18">        }</span>
<span id="cb15-19">        </span>
<span id="cb15-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ring and aromaticity information</span></span>
<span id="cb15-21">        features.update({</span>
<span id="cb15-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>: rdMolDescriptors.CalcNumRings(mol),</span>
<span id="cb15-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>: rdMolDescriptors.CalcNumAromaticRings(mol),</span>
<span id="cb15-24">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_saturated_rings'</span>: rdMolDescriptors.CalcNumSaturatedRings(mol),</span>
<span id="cb15-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aliphatic_rings'</span>: rdMolDescriptors.CalcNumAliphaticRings(mol),</span>
<span id="cb15-26">        })</span>
<span id="cb15-27">        </span>
<span id="cb15-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Physicochemical properties</span></span>
<span id="cb15-29">        features.update({</span>
<span id="cb15-30">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(Descriptors.MolLogP(mol), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb15-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tpsa'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(Descriptors.TPSA(mol), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb15-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_donors'</span>: Descriptors.NumHDonors(mol),</span>
<span id="cb15-33">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_acceptors'</span>: Descriptors.NumHAcceptors(mol),</span>
<span id="cb15-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rotatable_bonds'</span>: Descriptors.NumRotatableBonds(mol),</span>
<span id="cb15-35">        })</span>
<span id="cb15-36">        </span>
<span id="cb15-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Atom type counts</span></span>
<span id="cb15-38">        atom_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb15-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol.GetAtoms():</span>
<span id="cb15-40">            symbol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> atom.GetSymbol()</span>
<span id="cb15-41">            atom_counts[symbol] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> atom_counts.get(symbol, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-42">        features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom_composition'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> atom_counts</span>
<span id="cb15-43">        </span>
<span id="cb15-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functional group analysis (simplified)</span></span>
<span id="cb15-45">        functional_groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-46">        </span>
<span id="cb15-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for common functional groups using SMARTS</span></span>
<span id="cb15-48">        fg_patterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb15-49">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'carboxylic_acid'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[CX3](=O)[OX2H1]'</span>,</span>
<span id="cb15-50">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ester'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[#6][CX3](=O)[OX2H0][#6]'</span>,</span>
<span id="cb15-51">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amide'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[CX3](=[OX1])[NX3H2]'</span>,</span>
<span id="cb15-52">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alcohol'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[OX2H]'</span>,</span>
<span id="cb15-53">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amine'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[NX3;H2,H1;!$(NC=O)]'</span>,</span>
<span id="cb15-54">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ketone'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[#6][CX3](=O)[#6]'</span>,</span>
<span id="cb15-55">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aldehyde'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[CX3H1](=O)[#6]'</span>,</span>
<span id="cb15-56">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ether'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[OD2]([#6])[#6]'</span>,</span>
<span id="cb15-57">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'phenol'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[OX2H][cX3]:[c]'</span>,</span>
<span id="cb15-58">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nitro'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[NX3+](=O)[O-]'</span>,</span>
<span id="cb15-59">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aromatic_ring'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1ccccc1'</span>,</span>
<span id="cb15-60">        }</span>
<span id="cb15-61">        </span>
<span id="cb15-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fg_name, smarts <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fg_patterns.items():</span>
<span id="cb15-63">            pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmarts(smarts)</span>
<span id="cb15-64">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> mol.HasSubstructMatch(pattern):</span>
<span id="cb15-65">                matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol.GetSubstructMatches(pattern)</span>
<span id="cb15-66">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> matches:</span>
<span id="cb15-67">                    functional_groups.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fg_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(matches)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb15-68">        </span>
<span id="cb15-69">        features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> functional_groups</span>
<span id="cb15-70">        </span>
<span id="cb15-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drug-likeness assessment</span></span>
<span id="cb15-72">        lipinski_violations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>:</span>
<span id="cb15-74">            lipinski_violations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MW &gt; 500'</span>)</span>
<span id="cb15-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb15-76">            lipinski_violations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogP &gt; 5'</span>)</span>
<span id="cb15-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_donors'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb15-78">            lipinski_violations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H-donors &gt; 5'</span>)</span>
<span id="cb15-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_acceptors'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb15-80">            lipinski_violations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H-acceptors &gt; 10'</span>)</span>
<span id="cb15-81">        </span>
<span id="cb15-82">        features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lipinski_violations</span>
<span id="cb15-83">        features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lipinski_violations) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-84">        </span>
<span id="cb15-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> features</span>
<span id="cb15-86">        </span>
<span id="cb15-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb15-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Feature extraction failed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>}</span>
<span id="cb15-89"></span>
<span id="cb15-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function with some example molecules</span></span>
<span id="cb15-91">test_molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb15-92">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCO"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ethanol"</span>),</span>
<span id="cb15-93">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ibuprofen"</span>),</span>
<span id="cb15-94">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1=CC=C(C=C1)C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Benzoic acid"</span>),</span>
<span id="cb15-95">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(=O)OC1=CC=CC=C1C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aspirin"</span>),</span>
<span id="cb15-96">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN1C=NC2=C1C(=O)N(C(=O)N2C)C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Caffeine"</span>),</span>
<span id="cb15-97">]</span>
<span id="cb15-98"></span>
<span id="cb15-99"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Molecular Feature Extraction Examples:"</span>)</span>
<span id="cb15-100"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb15-101"></span>
<span id="cb15-102"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles, name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_molecules:</span>
<span id="cb15-103">    mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb15-104">    features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_molecular_features(mol)</span>
<span id="cb15-105">    </span>
<span id="cb15-106">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">):"</span>)</span>
<span id="cb15-107">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Formula: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_formula'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N/A'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-108">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  MW: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N/A'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Da"</span>)</span>
<span id="cb15-109">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  LogP: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N/A'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-110">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  TPSA: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tpsa'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N/A'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Ų"</span>)</span>
<span id="cb15-111">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Rings: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (aromatic: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb15-112">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  H-bond donors/acceptors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_donors'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_acceptors'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-113">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Functional groups: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(features.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>, [])) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'None detected'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-114">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Drug-like: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-115">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>):</span>
<span id="cb15-116">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Lipinski violations: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Molecular Feature Extraction Examples:
==================================================

Ethanol (CCO):
  Formula: C2H6O
  MW: 46.07 Da
  LogP: -0.0
  TPSA: 20.23 Ų
  Rings: 0 (aromatic: 0)
  H-bond donors/acceptors: 1/1
  Functional groups: alcohol(1)
  Drug-like: True

Ibuprofen (CC(C)CC1=CC=C(C=C1)C(C)C(=O)O):
  Formula: C13H18O2
  MW: 206.28 Da
  LogP: 3.07
  TPSA: 37.3 Ų
  Rings: 1 (aromatic: 1)
  H-bond donors/acceptors: 1/1
  Functional groups: carboxylic_acid(1), alcohol(1), aromatic_ring(1)
  Drug-like: True

Benzoic acid (C1=CC=C(C=C1)C(=O)O):
  Formula: C7H6O2
  MW: 122.12 Da
  LogP: 1.38
  TPSA: 37.3 Ų
  Rings: 1 (aromatic: 1)
  H-bond donors/acceptors: 1/1
  Functional groups: carboxylic_acid(1), alcohol(1), aromatic_ring(1)
  Drug-like: True

Aspirin (CC(=O)OC1=CC=CC=C1C(=O)O):
  Formula: C9H8O4
  MW: 180.16 Da
  LogP: 1.31
  TPSA: 63.6 Ų
  Rings: 1 (aromatic: 1)
  H-bond donors/acceptors: 1/3
  Functional groups: carboxylic_acid(1), ester(1), alcohol(1), ether(1), aromatic_ring(1)
  Drug-like: True

Caffeine (CN1C=NC2=C1C(=O)N(C(=O)N2C)C):
  Formula: C8H10N4O2
  MW: 194.19 Da
  LogP: -1.03
  TPSA: 61.82 Ų
  Rings: 2 (aromatic: 2)
  H-bond donors/acceptors: 0/6
  Functional groups: None detected
  Drug-like: True</code></pre>
</div>
</div>
<section id="converting-features-to-natural-language" class="level2">
<h2 class="anchored" data-anchor-id="converting-features-to-natural-language">Converting Features to Natural Language</h2>
<p>Now let’s create functions that transform these molecular features into natural language descriptions suitable for LLM training:</p>
<div id="b6d004af" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_molecular_description(mol: Chem.Mol, style: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detailed'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate natural language descriptions of molecules in different styles.</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        mol: RDKit molecule object</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        style: 'detailed', 'concise', 'technical', or 'educational'</span></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Natural language description of the molecule</span></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb17-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb17-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid molecule structure."</span></span>
<span id="cb17-14">    </span>
<span id="cb17-15">    features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_molecular_features(mol)</span>
<span id="cb17-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> features:</span>
<span id="cb17-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Could not analyze molecule: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb17-18">    </span>
<span id="cb17-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'concise'</span>:</span>
<span id="cb17-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> _generate_concise_description(features)</span>
<span id="cb17-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'technical'</span>:</span>
<span id="cb17-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> _generate_technical_description(features)</span>
<span id="cb17-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'educational'</span>:</span>
<span id="cb17-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> _generate_educational_description(features)</span>
<span id="cb17-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># detailed</span></span>
<span id="cb17-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> _generate_detailed_description(features)</span>
<span id="cb17-27"></span>
<span id="cb17-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _generate_concise_description(features: Dict) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb17-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate a brief, factual description."""</span></span>
<span id="cb17-30">    desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_formula'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> with molecular weight </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Da."</span></span>
<span id="cb17-31">    </span>
<span id="cb17-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>]:</span>
<span id="cb17-33">        fg_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>.join([fg.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>]])</span>
<span id="cb17-34">        desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" Contains </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fg_text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> functional groups."</span></span>
<span id="cb17-35">    </span>
<span id="cb17-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> desc</span>
<span id="cb17-37"></span>
<span id="cb17-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _generate_technical_description(features: Dict) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb17-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate a technical description with precise chemical language."""</span></span>
<span id="cb17-40">    parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-41">    </span>
<span id="cb17-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic structure</span></span>
<span id="cb17-43">    parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Molecular formula </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_formula'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (MW: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Da)"</span>)</span>
<span id="cb17-44">    </span>
<span id="cb17-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ring systems</span></span>
<span id="cb17-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-47">        ring_desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ring(s)"</span></span>
<span id="cb17-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-49">            ring_desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" including </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> aromatic ring(s)"</span></span>
<span id="cb17-50">        parts.append(ring_desc)</span>
<span id="cb17-51">    </span>
<span id="cb17-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Physicochemical properties</span></span>
<span id="cb17-53">    parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"LogP: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, TPSA: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tpsa'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Ų"</span>)</span>
<span id="cb17-54">    </span>
<span id="cb17-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hydrogen bonding</span></span>
<span id="cb17-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_donors'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_acceptors'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-57">        parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"H-bond donors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_donors'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, acceptors: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_acceptors'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-58">    </span>
<span id="cb17-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drug-likeness</span></span>
<span id="cb17-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>]:</span>
<span id="cb17-61">        parts.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Complies with Lipinski's Rule of Five"</span>)</span>
<span id="cb17-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>]:</span>
<span id="cb17-63">        parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Violates Lipinski's Rule: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-64">    </span>
<span id="cb17-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">". "</span>.join(parts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span>
<span id="cb17-66"></span>
<span id="cb17-67"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _generate_detailed_description(features: Dict) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb17-68">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate a comprehensive description suitable for training data."""</span></span>
<span id="cb17-69">    parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-70">    </span>
<span id="cb17-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Introduction</span></span>
<span id="cb17-72">    parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This compound has the molecular formula </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_formula'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and a molecular weight of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> daltons."</span>)</span>
<span id="cb17-73">    </span>
<span id="cb17-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Structural features</span></span>
<span id="cb17-75">    structure_parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_heavy_atoms'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-77">        structure_parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_heavy_atoms'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> heavy atoms"</span>)</span>
<span id="cb17-78">    </span>
<span id="cb17-79">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_saturated_rings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-81">            structure_parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> rings (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> aromatic, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_saturated_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> saturated)"</span>)</span>
<span id="cb17-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-83">            structure_parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> aromatic ring(s)"</span>)</span>
<span id="cb17-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-85">            structure_parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> saturated ring(s)"</span>)</span>
<span id="cb17-86">    </span>
<span id="cb17-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> structure_parts:</span>
<span id="cb17-88">        parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The structure contains </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(structure_parts)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb17-89">    </span>
<span id="cb17-90">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Atom composition</span></span>
<span id="cb17-91">    atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom_composition'</span>]</span>
<span id="cb17-92">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(atoms) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb17-93">        atom_desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom, count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(atoms.items()):</span>
<span id="cb17-95">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> atom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H'</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Skip hydrogen for brevity</span></span>
<span id="cb17-96">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb17-97">                    atom_desc.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"one </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>atom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-98">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-99">                    atom_desc.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>atom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> atoms"</span>)</span>
<span id="cb17-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> atom_desc:</span>
<span id="cb17-101">            parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"It is composed of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(atom_desc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb17-102">    </span>
<span id="cb17-103">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functional groups</span></span>
<span id="cb17-104">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>]:</span>
<span id="cb17-105">        fg_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fg.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>]]</span>
<span id="cb17-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fg_names) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb17-107">            parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The molecule contains a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fg_names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> functional group."</span>)</span>
<span id="cb17-108">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-109">            parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Functional groups present include </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(fg_names[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fg_names[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb17-110">    </span>
<span id="cb17-111">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Physicochemical properties</span></span>
<span id="cb17-112">    prop_desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-113">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb17-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb17-115">            prop_desc.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lipophilic character"</span>)</span>
<span id="cb17-116">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-117">            prop_desc.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hydrophilic nature"</span>)</span>
<span id="cb17-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-119">            prop_desc.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moderate lipophilicity"</span>)</span>
<span id="cb17-120">    </span>
<span id="cb17-121">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tpsa'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>:</span>
<span id="cb17-122">        prop_desc.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high polar surface area"</span>)</span>
<span id="cb17-123">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tpsa'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>:</span>
<span id="cb17-124">        prop_desc.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low polar surface area"</span>)</span>
<span id="cb17-125">    </span>
<span id="cb17-126">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prop_desc:</span>
<span id="cb17-127">        parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The compound exhibits </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' and '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(prop_desc)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb17-128">    </span>
<span id="cb17-129">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drug-likeness assessment</span></span>
<span id="cb17-130">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>]:</span>
<span id="cb17-131">        parts.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This molecule satisfies Lipinski's Rule of Five, suggesting good oral bioavailability potential."</span>)</span>
<span id="cb17-132">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>]:</span>
<span id="cb17-133">        parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The compound violates Lipinski's Rule of Five due to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, which may affect its drug-like properties."</span>)</span>
<span id="cb17-134">    </span>
<span id="cb17-135">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join(parts)</span>
<span id="cb17-136"></span>
<span id="cb17-137"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _generate_educational_description(features: Dict) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb17-138">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate an educational description explaining chemical concepts."""</span></span>
<span id="cb17-139">    parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-140">    </span>
<span id="cb17-141">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start with basics</span></span>
<span id="cb17-142">    parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This molecule, with formula </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_formula'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, is an organic compound weighing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> daltons."</span>)</span>
<span id="cb17-143">    </span>
<span id="cb17-144">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explain ring systems in educational terms</span></span>
<span id="cb17-145">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-146">        parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"It contains </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_aromatic_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> aromatic ring(s), which are stable ring structures with delocalized electrons that give the molecule special stability and chemical properties."</span>)</span>
<span id="cb17-147">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb17-148">        parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The molecule has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> ring structure(s), which can affect its shape and biological activity."</span>)</span>
<span id="cb17-149">    </span>
<span id="cb17-150">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explain functional groups</span></span>
<span id="cb17-151">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>]:</span>
<span id="cb17-152">        parts.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Functional groups are specific arrangements of atoms that give molecules their chemical reactivity."</span>)</span>
<span id="cb17-153">        fg_explanations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb17-154">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'carboxylic_acid'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"carboxylic acid groups (which can donate protons and are often acidic)"</span>,</span>
<span id="cb17-155">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alcohol'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alcohol groups (which can form hydrogen bonds)"</span>,</span>
<span id="cb17-156">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amine'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amine groups (which are basic and can accept protons)"</span>,</span>
<span id="cb17-157">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ketone'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ketone groups (which are reactive carbonyl groups)"</span>,</span>
<span id="cb17-158">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ester'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ester groups (often found in fats and can be hydrolyzed)"</span>,</span>
<span id="cb17-159">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ether'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ether groups (which are generally unreactive)"</span></span>
<span id="cb17-160">        }</span>
<span id="cb17-161">        </span>
<span id="cb17-162">        explained_groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-163">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>]:</span>
<span id="cb17-164">            fg_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fg.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb17-165">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> fg_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fg_explanations:</span>
<span id="cb17-166">                explained_groups.append(fg_explanations[fg_name])</span>
<span id="cb17-167">        </span>
<span id="cb17-168">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> explained_groups:</span>
<span id="cb17-169">            parts.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This molecule contains </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(explained_groups)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb17-170">    </span>
<span id="cb17-171">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explain drug-likeness in simple terms</span></span>
<span id="cb17-172">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>]:</span>
<span id="cb17-173">        parts.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The molecule's size and properties suggest it could potentially be developed as an oral medication."</span>)</span>
<span id="cb17-174">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lipinski_violations'</span>]:</span>
<span id="cb17-175">        parts.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The molecule is quite large or has properties that might make it challenging to develop as an oral drug."</span>)</span>
<span id="cb17-176">    </span>
<span id="cb17-177">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join(parts)</span>
<span id="cb17-178"></span>
<span id="cb17-179"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the different description styles</span></span>
<span id="cb17-180">test_molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb17-181">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ibuprofen"</span>),</span>
<span id="cb17-182">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(=O)OC1=CC=CC=C1C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aspirin"</span>),</span>
<span id="cb17-183">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN1C=NC2=C1C(=O)N(C(=O)N2C)C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Caffeine"</span>),</span>
<span id="cb17-184">]</span>
<span id="cb17-185"></span>
<span id="cb17-186">styles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'concise'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'technical'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detailed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'educational'</span>]</span>
<span id="cb17-187"></span>
<span id="cb17-188"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Natural Language Description Examples:"</span>)</span>
<span id="cb17-189"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb17-190"></span>
<span id="cb17-191"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles, name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_molecules:</span>
<span id="cb17-192">    mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb17-193">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">):"</span>)</span>
<span id="cb17-194">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb17-195">    </span>
<span id="cb17-196">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> style <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> styles:</span>
<span id="cb17-197">        description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_molecular_description(mol, style)</span>
<span id="cb17-198">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>title()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> style:"</span>)</span>
<span id="cb17-199">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(description)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Natural Language Description Examples:
============================================================

Ibuprofen (CC(C)CC1=CC=C(C=C1)C(C)C(=O)O):
------------------------------------------

Concise style:
This is C13H18O2 with molecular weight 206.28 Da. Contains carboxylic acid, alcohol, aromatic ring functional groups.

Technical style:
Molecular formula C13H18O2 (MW: 206.28 Da). 1 ring(s) including 1 aromatic ring(s). LogP: 3.07, TPSA: 37.3 Ų. H-bond donors: 1, acceptors: 1. Complies with Lipinski's Rule of Five.

Detailed style:
This compound has the molecular formula C13H18O2 and a molecular weight of 206.28 daltons. The structure contains 15 heavy atoms, 1 aromatic ring(s). It is composed of 13 C atoms, 2 O atoms. Functional groups present include carboxylic acid, alcohol and aromatic ring. The compound exhibits lipophilic character. This molecule satisfies Lipinski's Rule of Five, suggesting good oral bioavailability potential.

Educational style:
This molecule, with formula C13H18O2, is an organic compound weighing 206.28 daltons. It contains 1 aromatic ring(s), which are stable ring structures with delocalized electrons that give the molecule special stability and chemical properties. Functional groups are specific arrangements of atoms that give molecules their chemical reactivity. This molecule contains carboxylic acid groups (which can donate protons and are often acidic), alcohol groups (which can form hydrogen bonds). The molecule's size and properties suggest it could potentially be developed as an oral medication.

Aspirin (CC(=O)OC1=CC=CC=C1C(=O)O):
-----------------------------------

Concise style:
This is C9H8O4 with molecular weight 180.16 Da. Contains carboxylic acid, ester, alcohol, ether, aromatic ring functional groups.

Technical style:
Molecular formula C9H8O4 (MW: 180.16 Da). 1 ring(s) including 1 aromatic ring(s). LogP: 1.31, TPSA: 63.6 Ų. H-bond donors: 1, acceptors: 3. Complies with Lipinski's Rule of Five.

Detailed style:
This compound has the molecular formula C9H8O4 and a molecular weight of 180.16 daltons. The structure contains 13 heavy atoms, 1 aromatic ring(s). It is composed of 9 C atoms, 4 O atoms. Functional groups present include carboxylic acid, ester, alcohol, ether and aromatic ring. The compound exhibits moderate lipophilicity. This molecule satisfies Lipinski's Rule of Five, suggesting good oral bioavailability potential.

Educational style:
This molecule, with formula C9H8O4, is an organic compound weighing 180.16 daltons. It contains 1 aromatic ring(s), which are stable ring structures with delocalized electrons that give the molecule special stability and chemical properties. Functional groups are specific arrangements of atoms that give molecules their chemical reactivity. This molecule contains carboxylic acid groups (which can donate protons and are often acidic), ester groups (often found in fats and can be hydrolyzed), alcohol groups (which can form hydrogen bonds), ether groups (which are generally unreactive). The molecule's size and properties suggest it could potentially be developed as an oral medication.

Caffeine (CN1C=NC2=C1C(=O)N(C(=O)N2C)C):
----------------------------------------

Concise style:
This is C8H10N4O2 with molecular weight 194.19 Da.

Technical style:
Molecular formula C8H10N4O2 (MW: 194.19 Da). 2 ring(s) including 2 aromatic ring(s). LogP: -1.03, TPSA: 61.82 Ų. H-bond donors: 0, acceptors: 6. Complies with Lipinski's Rule of Five.

Detailed style:
This compound has the molecular formula C8H10N4O2 and a molecular weight of 194.19 daltons. The structure contains 14 heavy atoms, 2 aromatic ring(s). It is composed of 8 C atoms, 4 N atoms, 2 O atoms. The compound exhibits hydrophilic nature. This molecule satisfies Lipinski's Rule of Five, suggesting good oral bioavailability potential.

Educational style:
This molecule, with formula C8H10N4O2, is an organic compound weighing 194.19 daltons. It contains 2 aromatic ring(s), which are stable ring structures with delocalized electrons that give the molecule special stability and chemical properties. The molecule's size and properties suggest it could potentially be developed as an oral medication.</code></pre>
</div>
</div>
</section>
<section id="creating-structured-training-data" class="level2">
<h2 class="anchored" data-anchor-id="creating-structured-training-data">Creating Structured Training Data</h2>
<p>For training LLMs, you often need structured datasets that pair chemical structures with their descriptions. Here’s how to create such datasets systematically:</p>
<div id="c7546d06" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_molecule_text_dataset(smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>], </span>
<span id="cb19-2">                                names: Optional[List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb19-3">                                include_multiple_styles: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]]:</span>
<span id="cb19-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a structured dataset pairing molecules with text descriptions.</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Suitable for fine-tuning LLMs on chemical tasks.</span></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        smiles_list: List of SMILES strings</span></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        names: Optional list of molecule names</span></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        include_multiple_styles: Whether to generate multiple description styles</span></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of dictionaries with 'structure', 'description', and metadata</span></span>
<span id="cb19-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb19-16">    dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-17">    </span>
<span id="cb19-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(smiles_list):</span>
<span id="cb19-19">        mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb19-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb19-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Skip invalid molecules</span></span>
<span id="cb19-22">        </span>
<span id="cb19-23">        name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> names[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> names <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(names) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Compound_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb19-24">        canonical_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolToSmiles(mol)</span>
<span id="cb19-25">        </span>
<span id="cb19-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> include_multiple_styles:</span>
<span id="cb19-27">            styles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'concise'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'technical'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detailed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'educational'</span>]</span>
<span id="cb19-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb19-29">            styles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detailed'</span>]</span>
<span id="cb19-30">        </span>
<span id="cb19-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> style <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> styles:</span>
<span id="cb19-32">            description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_molecular_description(mol, style)</span>
<span id="cb19-33">            </span>
<span id="cb19-34">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create training example in various formats</span></span>
<span id="cb19-35">            </span>
<span id="cb19-36">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format 1: Direct description</span></span>
<span id="cb19-37">            dataset.append({</span>
<span id="cb19-38">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_description'</span>,</span>
<span id="cb19-39">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'style'</span>: style,</span>
<span id="cb19-40">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_smiles'</span>: smiles,</span>
<span id="cb19-41">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>: canonical_smiles,</span>
<span id="cb19-42">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_name'</span>: name,</span>
<span id="cb19-43">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: description,</span>
<span id="cb19-44">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Describe the chemical structure </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>canonical_smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>,</span>
<span id="cb19-45">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>: description</span>
<span id="cb19-46">            })</span>
<span id="cb19-47">            </span>
<span id="cb19-48">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format 2: Question-answer format</span></span>
<span id="cb19-49">            dataset.append({</span>
<span id="cb19-50">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chemical_qa'</span>,</span>
<span id="cb19-51">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'style'</span>: style,</span>
<span id="cb19-52">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_smiles'</span>: smiles,</span>
<span id="cb19-53">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>: canonical_smiles,</span>
<span id="cb19-54">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_name'</span>: name,</span>
<span id="cb19-55">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: description,</span>
<span id="cb19-56">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"What can you tell me about the molecule with SMILES </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>canonical_smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?"</span>,</span>
<span id="cb19-57">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>: description</span>
<span id="cb19-58">            })</span>
<span id="cb19-59">            </span>
<span id="cb19-60">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format 3: Named molecule description</span></span>
<span id="cb19-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Compound_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>:</span>
<span id="cb19-62">                dataset.append({</span>
<span id="cb19-63">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'named_molecule_description'</span>,</span>
<span id="cb19-64">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'style'</span>: style,</span>
<span id="cb19-65">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_smiles'</span>: smiles,</span>
<span id="cb19-66">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>: canonical_smiles,</span>
<span id="cb19-67">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_name'</span>: name,</span>
<span id="cb19-68">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: description,</span>
<span id="cb19-69">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Describe the chemical structure and properties of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>,</span>
<span id="cb19-70">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>canonical_smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) is a compound where </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>description<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>lower()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb19-71">                })</span>
<span id="cb19-72">    </span>
<span id="cb19-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dataset</span>
<span id="cb19-74"></span>
<span id="cb19-75"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_property_prediction_dataset(smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>], </span>
<span id="cb19-76">                                     target_properties: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]]:</span>
<span id="cb19-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb19-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a dataset for training property prediction with natural language explanations.</span></span>
<span id="cb19-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb19-80">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> target_properties <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb19-81">        target_properties <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_donors'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_acceptors'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>]</span>
<span id="cb19-82">    </span>
<span id="cb19-83">    dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-84">    </span>
<span id="cb19-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles_list:</span>
<span id="cb19-86">        mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb19-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb19-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb19-89">        </span>
<span id="cb19-90">        features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_molecular_features(mol)</span>
<span id="cb19-91">        canonical_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolToSmiles(mol)</span>
<span id="cb19-92">        </span>
<span id="cb19-93">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prop <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> target_properties:</span>
<span id="cb19-94">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prop <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> features:</span>
<span id="cb19-95">                value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[prop]</span>
<span id="cb19-96">                </span>
<span id="cb19-97">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create natural language explanations for properties</span></span>
<span id="cb19-98">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>:</span>
<span id="cb19-99">                    explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The molecular weight is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> daltons, which "</span></span>
<span id="cb19-100">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb19-101">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"indicates a relatively small molecule."</span></span>
<span id="cb19-102">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>:</span>
<span id="cb19-103">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"suggests a large molecule that may have bioavailability issues."</span></span>
<span id="cb19-104">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb19-105">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is in a reasonable range for drug-like compounds."</span></span>
<span id="cb19-106">                        </span>
<span id="cb19-107">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>:</span>
<span id="cb19-108">                    explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The LogP value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, indicating "</span></span>
<span id="cb19-109">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb19-110">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high lipophilicity and potential membrane permeability."</span></span>
<span id="cb19-111">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb19-112">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hydrophilic character and good water solubility."</span></span>
<span id="cb19-113">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb19-114">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced lipophilicity suitable for oral drugs."</span></span>
<span id="cb19-115">                        </span>
<span id="cb19-116">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_donors'</span>:</span>
<span id="cb19-117">                    explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This molecule has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> hydrogen bond donor(s), which "</span></span>
<span id="cb19-118">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb19-119">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"means it cannot donate hydrogen bonds."</span></span>
<span id="cb19-120">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb19-121">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is within the acceptable range for drug-like molecules."</span></span>
<span id="cb19-122">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb19-123">                        explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"may limit its ability to cross biological membranes."</span></span>
<span id="cb19-124">                        </span>
<span id="cb19-125">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>:</span>
<span id="cb19-126">                    explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"This molecule </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> value <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is not'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> drug-like according to Lipinski's Rule of Five."</span></span>
<span id="cb19-127">                    </span>
<span id="cb19-128">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb19-129">                    explanation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> value is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb19-130">                </span>
<span id="cb19-131">                dataset.append({</span>
<span id="cb19-132">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'property_prediction'</span>,</span>
<span id="cb19-133">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'property'</span>: prop,</span>
<span id="cb19-134">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input_smiles'</span>: smiles,</span>
<span id="cb19-135">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>: canonical_smiles,</span>
<span id="cb19-136">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'property_value'</span>: value,</span>
<span id="cb19-137">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"What is the </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>canonical_smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?"</span>,</span>
<span id="cb19-138">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb19-139">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'explanation'</span>: explanation,</span>
<span id="cb19-140">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detailed_response'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>canonical_smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>explanation<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb19-141">                })</span>
<span id="cb19-142">    </span>
<span id="cb19-143">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dataset</span>
<span id="cb19-144"></span>
<span id="cb19-145"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example: Create training datasets</span></span>
<span id="cb19-146">example_molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb19-147">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCO"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ethanol"</span>),</span>
<span id="cb19-148">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ibuprofen"</span>),</span>
<span id="cb19-149">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(=O)OC1=CC=CC=C1C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aspirin"</span>),</span>
<span id="cb19-150">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN1C=NC2=C1C(=O)N(C(=O)N2C)C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Caffeine"</span>),</span>
<span id="cb19-151">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC1=CC=C(C=C1)C(C)C(=O)O"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2-(4-methylphenyl)propanoic acid"</span>),</span>
<span id="cb19-152">]</span>
<span id="cb19-153"></span>
<span id="cb19-154">smiles_only <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mol[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> example_molecules]</span>
<span id="cb19-155">names_only <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mol[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> example_molecules]</span>
<span id="cb19-156"></span>
<span id="cb19-157"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Creating Molecule-Text Dataset..."</span>)</span>
<span id="cb19-158">mol_text_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_molecule_text_dataset(smiles_only, names_only, include_multiple_styles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb19-159"></span>
<span id="cb19-160"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Generated </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mol_text_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> training examples"</span>)</span>
<span id="cb19-161"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Example training entries:"</span>)</span>
<span id="cb19-162"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb19-163"></span>
<span id="cb19-164"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show a few examples</span></span>
<span id="cb19-165"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(mol_text_data[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]):</span>
<span id="cb19-166">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Example </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="cb19-167">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Task: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_type'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-168">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Molecule: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-169">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prompt: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-170">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'...'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-171"></span>
<span id="cb19-172"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb19-173"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Creating Property Prediction Dataset..."</span>)</span>
<span id="cb19-174">prop_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_property_prediction_dataset(smiles_only[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb19-175"></span>
<span id="cb19-176"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Generated </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(prop_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> property prediction examples"</span>)</span>
<span id="cb19-177"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Example property prediction entries:"</span>)</span>
<span id="cb19-178"></span>
<span id="cb19-179"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(prop_data[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]):</span>
<span id="cb19-180">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Example </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="cb19-181">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Property: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'property'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-182">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Molecule: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-183">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prompt: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-184">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detailed_response'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Creating Molecule-Text Dataset...
Generated 15 training examples

Example training entries:
==================================================

Example 1:
Task: molecule_description
Molecule: Ethanol
Prompt: Describe the chemical structure CCO:
Response: This compound has the molecular formula C2H6O and a molecular weight of 46.07 daltons. The structure...

Example 2:
Task: chemical_qa
Molecule: Ethanol
Prompt: What can you tell me about the molecule with SMILES CCO?
Response: This compound has the molecular formula C2H6O and a molecular weight of 46.07 daltons. The structure...

Example 3:
Task: named_molecule_description
Molecule: Ethanol
Prompt: Describe the chemical structure and properties of Ethanol:
Response: Ethanol (CCO) is a compound where this compound has the molecular formula c2h6o and a molecular weig...

==================================================
Creating Property Prediction Dataset...
Generated 15 property prediction examples

Example property prediction entries:

Example 1:
Property: molecular_weight
Molecule: CCO
Prompt: What is the molecular weight of CCO?
Response: The molecular weight of CCO is 46.07. The molecular weight is 46.07 daltons, which indicates a relatively small molecule.

Example 2:
Property: logp
Molecule: CCO
Prompt: What is the logp of CCO?
Response: The logp of CCO is -0.0. The LogP value is -0.0, indicating balanced lipophilicity suitable for oral drugs.

Example 3:
Property: h_bond_donors
Molecule: CCO
Prompt: What is the h bond donors of CCO?
Response: The h bond donors of CCO is 1. This molecule has 1 hydrogen bond donor(s), which is within the acceptable range for drug-like molecules.</code></pre>
</div>
</div>
</section>
<section id="exporting-data-for-different-llm-platforms" class="level2">
<h2 class="anchored" data-anchor-id="exporting-data-for-different-llm-platforms">Exporting Data for Different LLM Platforms</h2>
<p>Different LLM training platforms expect different data formats. Here are functions to export your chemical training data in common formats:</p>
<div id="9dfb0c05" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> export_for_huggingface(dataset: List[Dict], output_file: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chemical_training_data.jsonl"</span>):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Export dataset in HuggingFace datasets format (JSONL).</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each line is a JSON object with 'text' field for language modeling</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    or 'input'/'output' fields for instruction tuning.</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb21-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(output_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb21-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dataset:</span>
<span id="cb21-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format for instruction tuning</span></span>
<span id="cb21-10">            hf_entry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb21-11">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instruction'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>],</span>
<span id="cb21-12">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>),</span>
<span id="cb21-13">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>],</span>
<span id="cb21-14">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'metadata'</span>: {</span>
<span id="cb21-15">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_type'</span>: entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>),</span>
<span id="cb21-16">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_name'</span>: entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>),</span>
<span id="cb21-17">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'style'</span>: entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'style'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb21-18">                }</span>
<span id="cb21-19">            }</span>
<span id="cb21-20">            f.write(json.dumps(hf_entry) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb21-21">    </span>
<span id="cb21-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Exported </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> entries to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (HuggingFace format)"</span>)</span>
<span id="cb21-23"></span>
<span id="cb21-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> export_for_openai(dataset: List[Dict], output_file: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chemical_training_data_openai.jsonl"</span>):</span>
<span id="cb21-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb21-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Export dataset in OpenAI fine-tuning format.</span></span>
<span id="cb21-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each line has 'messages' with system/user/assistant format.</span></span>
<span id="cb21-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb21-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(output_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb21-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dataset:</span>
<span id="cb21-31">            openai_entry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb21-32">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'messages'</span>: [</span>
<span id="cb21-33">                    {</span>
<span id="cb21-34">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'system'</span>,</span>
<span id="cb21-35">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You are a helpful chemistry assistant that can analyze and describe chemical structures.'</span></span>
<span id="cb21-36">                    },</span>
<span id="cb21-37">                    {</span>
<span id="cb21-38">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>, </span>
<span id="cb21-39">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>]</span>
<span id="cb21-40">                    },</span>
<span id="cb21-41">                    {</span>
<span id="cb21-42">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assistant'</span>,</span>
<span id="cb21-43">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>]</span>
<span id="cb21-44">                    }</span>
<span id="cb21-45">                ]</span>
<span id="cb21-46">            }</span>
<span id="cb21-47">            f.write(json.dumps(openai_entry) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb21-48">    </span>
<span id="cb21-49">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Exported </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> entries to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (OpenAI format)"</span>)</span>
<span id="cb21-50"></span>
<span id="cb21-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> export_for_llama(dataset: List[Dict], output_file: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chemical_training_data_llama.json"</span>):</span>
<span id="cb21-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb21-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Export dataset in LLaMA/Alpaca instruction format.</span></span>
<span id="cb21-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb21-55">    llama_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-56">    </span>
<span id="cb21-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dataset:</span>
<span id="cb21-58">        llama_entry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb21-59">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'instruction'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>],</span>
<span id="cb21-60">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>),</span>
<span id="cb21-61">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>]</span>
<span id="cb21-62">        }</span>
<span id="cb21-63">        llama_data.append(llama_entry)</span>
<span id="cb21-64">    </span>
<span id="cb21-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(output_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb21-66">        json.dump(llama_data, f, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb21-67">    </span>
<span id="cb21-68">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Exported </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> entries to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (LLaMA/Alpaca format)"</span>)</span>
<span id="cb21-69"></span>
<span id="cb21-70"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_conversational_dataset(smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>], names: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb21-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb21-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a conversational dataset simulating a chemistry chatbot interaction.</span></span>
<span id="cb21-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb21-74">    conversations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-75">    </span>
<span id="cb21-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(smiles_list):</span>
<span id="cb21-77">        mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb21-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb21-79">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb21-80">        </span>
<span id="cb21-81">        name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> names[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> names <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(names) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Compound_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb21-82">        features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_molecular_features(mol)</span>
<span id="cb21-83">        </span>
<span id="cb21-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a multi-turn conversation</span></span>
<span id="cb21-85">        conversation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb21-86">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'conversation_id'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chem_chat_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb21-87">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_smiles'</span>: smiles,</span>
<span id="cb21-88">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecule_name'</span>: name,</span>
<span id="cb21-89">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'turns'</span>: []</span>
<span id="cb21-90">        }</span>
<span id="cb21-91">        </span>
<span id="cb21-92">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn 1: Initial structure inquiry</span></span>
<span id="cb21-93">        conversation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'turns'</span>].append({</span>
<span id="cb21-94">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Can you analyze the structure </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smiles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?"</span>,</span>
<span id="cb21-95">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assistant'</span>: generate_molecular_description(mol, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detailed'</span>)</span>
<span id="cb21-96">        })</span>
<span id="cb21-97">        </span>
<span id="cb21-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn 2: Property question</span></span>
<span id="cb21-99">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>):</span>
<span id="cb21-100">            conversation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'turns'</span>].append({</span>
<span id="cb21-101">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What's its molecular weight?"</span>,</span>
<span id="cb21-102">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assistant'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The molecular weight is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> daltons."</span></span>
<span id="cb21-103">            })</span>
<span id="cb21-104">        </span>
<span id="cb21-105">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn 3: Drug-likeness question</span></span>
<span id="cb21-106">        conversation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'turns'</span>].append({</span>
<span id="cb21-107">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Would this be a good drug candidate?"</span>,</span>
<span id="cb21-108">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assistant'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yes'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'It may face challenges'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, this molecule </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'complies with'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drug_like'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'violates'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Lipinski's Rule of Five. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>generate_molecular_description(mol, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'educational'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb21-109">        })</span>
<span id="cb21-110">        </span>
<span id="cb21-111">        conversations.append(conversation)</span>
<span id="cb21-112">    </span>
<span id="cb21-113">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> conversations</span>
<span id="cb21-114"></span>
<span id="cb21-115"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Demonstrate the export functions</span></span>
<span id="cb21-116"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exporting Training Data in Different Formats:"</span>)</span>
<span id="cb21-117"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb21-118"></span>
<span id="cb21-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the previously created dataset</span></span>
<span id="cb21-120">sample_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol_text_data[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use a small sample for demonstration</span></span>
<span id="cb21-121"></span>
<span id="cb21-122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export in different formats</span></span>
<span id="cb21-123">export_for_huggingface(sample_dataset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo_huggingface.jsonl"</span>)</span>
<span id="cb21-124">export_for_openai(sample_dataset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo_openai.jsonl"</span>) </span>
<span id="cb21-125">export_for_llama(sample_dataset, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo_llama.json"</span>)</span>
<span id="cb21-126"></span>
<span id="cb21-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and show conversational dataset</span></span>
<span id="cb21-128"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Creating Conversational Dataset:"</span>)</span>
<span id="cb21-129">conv_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_conversational_dataset(smiles_only[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], names_only[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb21-130"></span>
<span id="cb21-131"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Generated </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(conv_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> conversations"</span>)</span>
<span id="cb21-132"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Example conversation:"</span>)</span>
<span id="cb21-133"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb21-134"></span>
<span id="cb21-135"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, turn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(conv_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'turns'</span>]):</span>
<span id="cb21-136">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Turn </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="cb21-137">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"User: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>turn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-138">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Assistant: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>turn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assistant'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'...'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(turn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assistant'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-139">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb21-140"></span>
<span id="cb21-141"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show file contents (first few lines)</span></span>
<span id="cb21-142"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample exported data:"</span>)</span>
<span id="cb21-143"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb21-144"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb21-145">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo_huggingface.jsonl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb21-146">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.readlines()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb21-147">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(lines):</span>
<span id="cb21-148">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Entry </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>line[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="cb21-149"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileNotFoundError</span>:</span>
<span id="cb21-150">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Demo files not created (running in demo mode)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Exporting Training Data in Different Formats:
==================================================
Exported 5 entries to demo_huggingface.jsonl (HuggingFace format)
Exported 5 entries to demo_openai.jsonl (OpenAI format)
Exported 5 entries to demo_llama.json (LLaMA/Alpaca format)

Creating Conversational Dataset:
Generated 2 conversations

Example conversation:
==============================
Turn 1:
User: Can you analyze the structure CCO?
Assistant: This compound has the molecular formula C2H6O and a molecular weight of 46.07 daltons. The structure...

Turn 2:
User: What's its molecular weight?
Assistant: The molecular weight is 46.07 daltons.

Turn 3:
User: Would this be a good drug candidate?
Assistant: Yes, this molecule complies with Lipinski's Rule of Five.  The molecule's size and properties sugges...

Sample exported data:
------------------------------
Entry 1: {"instruction": "Describe the chemical structure CCO:", "input": "CCO", "output": "This compound has...
Entry 2: {"instruction": "What can you tell me about the molecule with SMILES CCO?", "input": "CCO", "output"...</code></pre>
</div>
</div>
</section>
</section>
<section id="real-world-challenges-and-solutions" class="level1">
<h1>Real-World Challenges and Solutions</h1>
<p>While the integration of RDKit and LLMs offers exciting possibilities, real-world implementations face several challenges. This section addresses common issues and provides practical solutions based on experience with production systems.</p>
<section id="challenge-1-performance-and-scalability" class="level2">
<h2 class="anchored" data-anchor-id="challenge-1-performance-and-scalability">Challenge 1: Performance and Scalability</h2>
<p>When processing large datasets or building real-time applications, performance becomes critical. Let’s explore strategies for optimization:</p>
<div id="d4ba7253" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mp</span>
<span id="cb23-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> concurrent.futures <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ProcessPoolExecutor, ThreadPoolExecutor</span>
<span id="cb23-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb23-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lru_cache</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> OptimizedChemicalProcessor:</span>
<span id="cb23-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    An optimized processor for handling large-scale chemical data processing</span></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with RDKit and LLM integration.</span></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb23-11">    </span>
<span id="cb23-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, max_workers: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, use_caching: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb23-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_workers <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> mp.cpu_count()</span>
<span id="cb23-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.use_caching <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> use_caching</span>
<span id="cb23-15">        </span>
<span id="cb23-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-compile common SMARTS patterns for efficiency</span></span>
<span id="cb23-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.functional_group_patterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb23-18">            name: Chem.MolFromSmarts(smarts) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, smarts <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> {</span>
<span id="cb23-19">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'carboxylic_acid'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[CX3](=O)[OX2H1]'</span>,</span>
<span id="cb23-20">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ester'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[#6][CX3](=O)[OX2H0][#6]'</span>,</span>
<span id="cb23-21">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alcohol'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[OX2H]'</span>,</span>
<span id="cb23-22">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amine'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[NX3;H2,H1;!$(NC=O)]'</span>,</span>
<span id="cb23-23">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ketone'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[#6][CX3](=O)[#6]'</span>,</span>
<span id="cb23-24">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aromatic_ring'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1ccccc1'</span>,</span>
<span id="cb23-25">            }.items()</span>
<span id="cb23-26">        }</span>
<span id="cb23-27">    </span>
<span id="cb23-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@lru_cache</span>(maxsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb23-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cached_mol_from_smiles(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb23-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Cached molecule parsing to avoid repeated work."""</span></span>
<span id="cb23-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb23-32">    </span>
<span id="cb23-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_smiles_batch_parallel(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb23-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Process a batch of SMILES in parallel for better performance.</span></span>
<span id="cb23-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb23-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use ProcessPoolExecutor for CPU-bound tasks</span></span>
<span id="cb23-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> ProcessPoolExecutor(max_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_workers) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> executor:</span>
<span id="cb23-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split into chunks to reduce overhead</span></span>
<span id="cb23-40">            chunk_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles_list) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb23-41">            chunks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [smiles_list[i:i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chunk_size] </span>
<span id="cb23-42">                     <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles_list), chunk_size)]</span>
<span id="cb23-43">            </span>
<span id="cb23-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process chunks in parallel</span></span>
<span id="cb23-45">            futures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [executor.submit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._process_chunk, chunk) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> chunks]</span>
<span id="cb23-46">            results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> future <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> futures:</span>
<span id="cb23-48">                results.extend(future.result())</span>
<span id="cb23-49">        </span>
<span id="cb23-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span>
<span id="cb23-51">    </span>
<span id="cb23-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _process_chunk(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles_chunk: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb23-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Process a chunk of SMILES strings."""</span></span>
<span id="cb23-54">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles_chunk:</span>
<span id="cb23-56">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb23-57">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.use_caching:</span>
<span id="cb23-58">                    mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cached_mol_from_smiles(smiles)</span>
<span id="cb23-59">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb23-60">                    mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb23-61">                </span>
<span id="cb23-62">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb23-63">                    features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_features_optimized(mol)</span>
<span id="cb23-64">                    features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smiles</span>
<span id="cb23-65">                    results.append(features)</span>
<span id="cb23-66">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb23-67">                    results.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: smiles, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Invalid SMILES'</span>})</span>
<span id="cb23-68">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb23-69">                results.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: smiles, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)})</span>
<span id="cb23-70">        </span>
<span id="cb23-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span>
<span id="cb23-72">    </span>
<span id="cb23-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _extract_features_optimized(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, mol: Chem.Mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict:</span>
<span id="cb23-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Optimized feature extraction focusing on essential properties."""</span></span>
<span id="cb23-75">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only calculate the most important features to save time</span></span>
<span id="cb23-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb23-77">            features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb23-78">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(Descriptors.MolWt(mol), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb23-79">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(Descriptors.MolLogP(mol), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb23-80">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>: mol.GetNumAtoms(),</span>
<span id="cb23-81">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>: rdMolDescriptors.CalcNumRings(mol),</span>
<span id="cb23-82">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_donors'</span>: Descriptors.NumHDonors(mol),</span>
<span id="cb23-83">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h_bond_acceptors'</span>: Descriptors.NumHAcceptors(mol),</span>
<span id="cb23-84">            }</span>
<span id="cb23-85">            </span>
<span id="cb23-86">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fast functional group detection using pre-compiled patterns</span></span>
<span id="cb23-87">            functional_groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fg_name, pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.functional_group_patterns.items():</span>
<span id="cb23-89">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol.HasSubstructMatch(pattern):</span>
<span id="cb23-90">                    functional_groups.append(fg_name)</span>
<span id="cb23-91">            </span>
<span id="cb23-92">            features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> functional_groups</span>
<span id="cb23-93">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> features</span>
<span id="cb23-94">            </span>
<span id="cb23-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb23-96">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Feature extraction failed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>}</span>
<span id="cb23-97"></span>
<span id="cb23-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Performance comparison demonstration</span></span>
<span id="cb23-99"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> benchmark_processing_methods():</span>
<span id="cb23-100">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Compare different processing approaches for performance."""</span></span>
<span id="cb23-101">    </span>
<span id="cb23-102">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate test data</span></span>
<span id="cb23-103">    test_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb23-104">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CCO"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1ccccc1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(C)CC1=CC=C(C=C1)C(C)C(=O)O"</span>,</span>
<span id="cb23-105">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CN1C=NC2=C1C(=O)N(C(=O)N2C)C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CC(=O)OC1=CC=CC=C1C(=O)O"</span></span>
<span id="cb23-106">    ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1000 molecules for testing</span></span>
<span id="cb23-107">    </span>
<span id="cb23-108">    processor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OptimizedChemicalProcessor()</span>
<span id="cb23-109">    </span>
<span id="cb23-110">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Performance Benchmark:"</span>)</span>
<span id="cb23-111">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb23-112">    </span>
<span id="cb23-113">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 1: Sequential processing</span></span>
<span id="cb23-114">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb23-115">    sequential_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-116">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_smiles:</span>
<span id="cb23-117">        mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb23-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb23-119">            features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_molecular_features(mol)</span>
<span id="cb23-120">            sequential_results.append(features)</span>
<span id="cb23-121">    sequential_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb23-122">    </span>
<span id="cb23-123">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2: Parallel processing</span></span>
<span id="cb23-124">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb23-125">    parallel_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor.process_smiles_batch_parallel(test_smiles)</span>
<span id="cb23-126">    parallel_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb23-127">    </span>
<span id="cb23-128">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 3: Cached processing</span></span>
<span id="cb23-129">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb23-130">    cached_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb23-131">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_smiles:</span>
<span id="cb23-132">        mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor.cached_mol_from_smiles(smiles)</span>
<span id="cb23-133">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb23-134">            features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processor._extract_features_optimized(mol)</span>
<span id="cb23-135">            cached_results.append(features)</span>
<span id="cb23-136">    cached_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb23-137">    </span>
<span id="cb23-138">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sequential processing: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sequential_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb23-139">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Parallel processing: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>parallel_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb23-140">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cached processing: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cached_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>)</span>
<span id="cb23-141">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Speedup (parallel): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sequential_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>parallel_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">x"</span>)</span>
<span id="cb23-142">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Speedup (cached): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sequential_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cached_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">x"</span>)</span>
<span id="cb23-143">    </span>
<span id="cb23-144">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify results are consistent</span></span>
<span id="cb23-145">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Results consistency check:"</span>)</span>
<span id="cb23-146">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sequential results: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sequential_results)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> molecules processed"</span>)</span>
<span id="cb23-147">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Parallel results: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([r <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> parallel_results <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> r])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> molecules processed"</span>)</span>
<span id="cb23-148">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cached results: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cached_results)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> molecules processed"</span>)</span>
<span id="cb23-149"></span>
<span id="cb23-150"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the benchmark</span></span>
<span id="cb23-151">benchmark_processing_methods()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Performance Benchmark:
========================================
Sequential processing: 0.32 seconds
Parallel processing: 0.09 seconds
Cached processing: 0.02 seconds
Speedup (parallel): 3.7x
Speedup (cached): 13.3x

Results consistency check:
Sequential results: 1000 molecules processed
Parallel results: 1000 molecules processed
Cached results: 1000 molecules processed</code></pre>
</div>
</div>
</section>
<section id="challenge-2-handling-inconsistent-llm-outputs" class="level2">
<h2 class="anchored" data-anchor-id="challenge-2-handling-inconsistent-llm-outputs">Challenge 2: Handling Inconsistent LLM Outputs</h2>
<p>LLMs can produce inconsistent or partially correct chemical information. Here’s how to build robust systems that handle these issues:</p>
<div id="1ca9a67b" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RobustChemicalParser:</span>
<span id="cb25-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A parser that can handle messy, inconsistent LLM outputs and extract</span></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    useful chemical information with confidence scoring.</span></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb25-6">    </span>
<span id="cb25-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb25-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Common patterns for extracting chemical information from text</span></span>
<span id="cb25-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smiles_patterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb25-10">            <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\b([A-Za-z0-9@+\-\[\]\(\)=#$:%\\\/\.]+)\b'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># General SMILES pattern</span></span>
<span id="cb25-11">            <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'SMILES[:\s]*([A-Za-z0-9@+\-\[\]\(\)=#$:%\\\/\.]+)'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SMILES: prefix</span></span>
<span id="cb25-12">            <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'structure[:\s]*([A-Za-z0-9@+\-\[\]\(\)=#$:%\\\/\.]+)'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># structure: prefix</span></span>
<span id="cb25-13">        ]</span>
<span id="cb25-14">        </span>
<span id="cb25-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.molecular_weight_patterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb25-16">            <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'molecular weight[:\s]*(\d+\.?\d*)\s*(?:Da|daltons?|g/mol)?'</span>,</span>
<span id="cb25-17">            <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'MW[:\s]*(\d+\.?\d*)'</span>,</span>
<span id="cb25-18">            <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'(\d+\.?\d*)\s*(?:Da|daltons?|g/mol)'</span>,</span>
<span id="cb25-19">        ]</span>
<span id="cb25-20">        </span>
<span id="cb25-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.property_patterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb25-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>: [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'LogP[:\s]*(-?\d+\.?\d*)'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'log\s*P[:\s]*(-?\d+\.?\d*)'</span>],</span>
<span id="cb25-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tpsa'</span>: [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'TPSA[:\s]*(\d+\.?\d*)'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'polar surface area[:\s]*(\d+\.?\d*)'</span>],</span>
<span id="cb25-24">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hbd'</span>: [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'H-bond donors?[:\s]*(\d+)'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'hydrogen bond donors?[:\s]*(\d+)'</span>],</span>
<span id="cb25-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hba'</span>: [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'H-bond acceptors?[:\s]*(\d+)'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'hydrogen bond acceptors?[:\s]*(\d+)'</span>],</span>
<span id="cb25-26">        }</span>
<span id="cb25-27">    </span>
<span id="cb25-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> extract_chemical_entities(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>]:</span>
<span id="cb25-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb25-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Extract chemical entities from potentially messy LLM text output.</span></span>
<span id="cb25-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns results with confidence scores.</span></span>
<span id="cb25-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb25-33">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb25-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extracted_smiles'</span>: [],</span>
<span id="cb25-35">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb25-36">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>: {},</span>
<span id="cb25-37">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence_scores'</span>: {},</span>
<span id="cb25-38">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'raw_text'</span>: text</span>
<span id="cb25-39">        }</span>
<span id="cb25-40">        </span>
<span id="cb25-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract SMILES candidates</span></span>
<span id="cb25-42">        smiles_candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_smiles_candidates(text)</span>
<span id="cb25-43">        validated_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb25-44">        </span>
<span id="cb25-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> candidate, confidence <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles_candidates:</span>
<span id="cb25-46">            validation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validate_smiles_with_details(candidate)</span>
<span id="cb25-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> validation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>]:</span>
<span id="cb25-48">                validated_smiles.append({</span>
<span id="cb25-49">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: candidate,</span>
<span id="cb25-50">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>: validation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>],</span>
<span id="cb25-51">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence'</span>: confidence,</span>
<span id="cb25-52">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>: validation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>]</span>
<span id="cb25-53">                })</span>
<span id="cb25-54">        </span>
<span id="cb25-55">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extracted_smiles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validated_smiles</span>
<span id="cb25-56">        </span>
<span id="cb25-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract molecular weight</span></span>
<span id="cb25-58">        mw_match <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_molecular_weight(text)</span>
<span id="cb25-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mw_match:</span>
<span id="cb25-60">            results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mw_match[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>]</span>
<span id="cb25-61">            results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence_scores'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mw_match[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence'</span>]</span>
<span id="cb25-62">        </span>
<span id="cb25-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract other properties</span></span>
<span id="cb25-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prop_name, patterns <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.property_patterns.items():</span>
<span id="cb25-65">            prop_match <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_property(text, patterns)</span>
<span id="cb25-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prop_match:</span>
<span id="cb25-67">                results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>][prop_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prop_match[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>]</span>
<span id="cb25-68">                results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence_scores'</span>][prop_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prop_match[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence'</span>]</span>
<span id="cb25-69">        </span>
<span id="cb25-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span>
<span id="cb25-71">    </span>
<span id="cb25-72">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _extract_smiles_candidates(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Tuple[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>]]:</span>
<span id="cb25-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Extract SMILES candidates with confidence scores."""</span></span>
<span id="cb25-74">        candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb25-75">        </span>
<span id="cb25-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smiles_patterns):</span>
<span id="cb25-77">            matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, text, re.IGNORECASE)</span>
<span id="cb25-78">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> match <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> matches:</span>
<span id="cb25-79">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic heuristics for SMILES likelihood</span></span>
<span id="cb25-80">                confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._calculate_smiles_confidence(match, pattern_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)</span>
<span id="cb25-81">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Minimum confidence threshold</span></span>
<span id="cb25-82">                    candidates.append((match, confidence))</span>
<span id="cb25-83">        </span>
<span id="cb25-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove duplicates and sort by confidence</span></span>
<span id="cb25-85">        seen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb25-86">        unique_candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb25-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles, conf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(candidates, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb25-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> seen:</span>
<span id="cb25-89">                seen.add(smiles)</span>
<span id="cb25-90">                unique_candidates.append((smiles, conf))</span>
<span id="cb25-91">        </span>
<span id="cb25-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> unique_candidates[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return top 5 candidates</span></span>
<span id="cb25-93">    </span>
<span id="cb25-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _calculate_smiles_confidence(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, pattern_index: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb25-95">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate confidence score for a SMILES candidate."""</span></span>
<span id="cb25-96">        confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base confidence</span></span>
<span id="cb25-97">        </span>
<span id="cb25-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pattern-based confidence adjustment</span></span>
<span id="cb25-99">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pattern_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explicit SMILES: prefix</span></span>
<span id="cb25-100">            confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span></span>
<span id="cb25-101">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> pattern_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># structure: prefix</span></span>
<span id="cb25-102">            confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb25-103">        </span>
<span id="cb25-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Length-based heuristics</span></span>
<span id="cb25-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb25-106">            confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb25-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>:</span>
<span id="cb25-108">            confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span></span>
<span id="cb25-109">        </span>
<span id="cb25-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Character composition heuristics</span></span>
<span id="cb25-111">        valid_chars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CNOSPFClBrIH[]()=@+-.0123456789#</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/%$'</span>)</span>
<span id="cb25-112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid_chars <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles):</span>
<span id="cb25-113">            confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb25-114">        </span>
<span id="cb25-115">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Common SMILES patterns</span></span>
<span id="cb25-116">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1ccccc1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CO'</span>]):</span>
<span id="cb25-117">            confidence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb25-118">        </span>
<span id="cb25-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, confidence))</span>
<span id="cb25-120">    </span>
<span id="cb25-121">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _extract_molecular_weight(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Optional[Dict]:</span>
<span id="cb25-122">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Extract molecular weight with confidence."""</span></span>
<span id="cb25-123">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.molecular_weight_patterns:</span>
<span id="cb25-124">            matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, text, re.IGNORECASE)</span>
<span id="cb25-125">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> matches:</span>
<span id="cb25-126">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb25-127">                    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(matches[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb25-128">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reasonable MW range</span></span>
<span id="cb25-129">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb25-130">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: value,</span>
<span id="cb25-131">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular weight'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pattern <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span></span>
<span id="cb25-132">                        }</span>
<span id="cb25-133">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb25-134">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb25-135">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb25-136">    </span>
<span id="cb25-137">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _extract_property(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, patterns: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Optional[Dict]:</span>
<span id="cb25-138">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Extract a property value with confidence."""</span></span>
<span id="cb25-139">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> patterns:</span>
<span id="cb25-140">            matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, text, re.IGNORECASE)</span>
<span id="cb25-141">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> matches:</span>
<span id="cb25-142">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb25-143">                    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(matches[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb25-144">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>}</span>
<span id="cb25-145">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb25-146">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb25-147">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb25-148">    </span>
<span id="cb25-149">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_validate_extractions(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>]:</span>
<span id="cb25-150">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb25-151"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Cross-validate extracted information against RDKit calculations.</span></span>
<span id="cb25-152"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb25-153">        extraction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.extract_chemical_entities(text)</span>
<span id="cb25-154">        validation_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb25-155">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extraction'</span>: extraction,</span>
<span id="cb25-156">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'validation'</span>: {},</span>
<span id="cb25-157">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discrepancies'</span>: [],</span>
<span id="cb25-158">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'overall_confidence'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb25-159">        }</span>
<span id="cb25-160">        </span>
<span id="cb25-161">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extracted_smiles'</span>]:</span>
<span id="cb25-162">            best_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extracted_smiles'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb25-163">            mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(best_smiles[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>])</span>
<span id="cb25-164">            </span>
<span id="cb25-165">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb25-166">                rdkit_props <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_molecular_features(mol)</span>
<span id="cb25-167">                </span>
<span id="cb25-168">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-validate molecular weight</span></span>
<span id="cb25-169">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]:</span>
<span id="cb25-170">                    rdkit_mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdkit_props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]</span>
<span id="cb25-171">                    extracted_mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]</span>
<span id="cb25-172">                    mw_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(rdkit_mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> extracted_mw)</span>
<span id="cb25-173">                    </span>
<span id="cb25-174">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mw_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>:</span>
<span id="cb25-175">                        validation_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'validation'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MATCH'</span></span>
<span id="cb25-176">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> mw_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>:</span>
<span id="cb25-177">                        validation_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'validation'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CLOSE'</span></span>
<span id="cb25-178">                        validation_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discrepancies'</span>].append(</span>
<span id="cb25-179">                            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MW discrepancy: extracted=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>extracted_mw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, calculated=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rdkit_mw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb25-180">                        )</span>
<span id="cb25-181">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb25-182">                        validation_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'validation'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MISMATCH'</span></span>
<span id="cb25-183">                        validation_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discrepancies'</span>].append(</span>
<span id="cb25-184">                            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Major MW discrepancy: extracted=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>extracted_mw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, calculated=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rdkit_mw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb25-185">                        )</span>
<span id="cb25-186">                </span>
<span id="cb25-187">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cross-validate other properties</span></span>
<span id="cb25-188">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prop <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hbd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hba'</span>]:</span>
<span id="cb25-189">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prop <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'properties'</span>]:</span>
<span id="cb25-190">                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add property validation logic here</span></span>
<span id="cb25-191">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb25-192">                </span>
<span id="cb25-193">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate overall confidence</span></span>
<span id="cb25-194">                confidence_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence_scores'</span>].values())</span>
<span id="cb25-195">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> confidence_scores:</span>
<span id="cb25-196">                    validation_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'overall_confidence'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(confidence_scores) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(confidence_scores)</span>
<span id="cb25-197">        </span>
<span id="cb25-198">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> validation_results</span>
<span id="cb25-199"></span>
<span id="cb25-200"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Demonstration with messy LLM outputs</span></span>
<span id="cb25-201">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RobustChemicalParser()</span>
<span id="cb25-202"></span>
<span id="cb25-203"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate various types of messy LLM outputs</span></span>
<span id="cb25-204">messy_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb25-205">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The compound has SMILES: CC(C)CC1=CC=C(C=C1)C(C)C(=O)O and molecular weight 206.3 Da"</span>,</span>
<span id="cb25-206">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This molecule (c1ccccc1) is benzene, MW: 78.11 g/mol, LogP: 2.13"</span>,</span>
<span id="cb25-207">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Structure: CCO, ethanol, with 2 H-bond donors and 1 H-bond acceptor"</span>,</span>
<span id="cb25-208">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The SMILES string is probably C1=CC=C(C=C1)C(=O)O but I'm not completely sure about the molecular weight being around 122"</span>,</span>
<span id="cb25-209">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid SMILES: XYZ123ABC and some random text with molecular weight 999999 Da"</span>,</span>
<span id="cb25-210">]</span>
<span id="cb25-211"></span>
<span id="cb25-212"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Robust Chemical Information Extraction:"</span>)</span>
<span id="cb25-213"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb25-214"></span>
<span id="cb25-215"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, text <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(messy_outputs):</span>
<span id="cb25-216">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Example </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>)</span>
<span id="cb25-217">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Input: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-218">    </span>
<span id="cb25-219">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and validate</span></span>
<span id="cb25-220">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.cross_validate_extractions(text)</span>
<span id="cb25-221">    extraction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extraction'</span>]</span>
<span id="cb25-222">    </span>
<span id="cb25-223">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Extracted SMILES: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extracted_smiles'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> candidates"</span>)</span>
<span id="cb25-224">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extracted_smiles'</span>]:</span>
<span id="cb25-225">        best <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'extracted_smiles'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb25-226">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Best: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (confidence: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb25-227">    </span>
<span id="cb25-228">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]:</span>
<span id="cb25-229">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Molecular Weight: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (confidence: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>extraction[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'confidence_scores'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb25-230">    </span>
<span id="cb25-231">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discrepancies'</span>]:</span>
<span id="cb25-232">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Discrepancies: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'; '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discrepancies'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-233">    </span>
<span id="cb25-234">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Overall confidence: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'overall_confidence'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-235">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Robust Chemical Information Extraction:
==================================================

Example 1:
Input: The compound has SMILES: CC(C)CC1=CC=C(C=C1)C(C)C(=O)O and molecular weight 206.3 Da
Extracted SMILES: 1 candidates
  Best: CC(C)Cc1ccc(C(C)C(=O)O)cc1 (confidence: 1.00)
Molecular Weight: 206.3 (confidence: 0.80)
Overall confidence: 0.80
------------------------------

Example 2:
Input: This molecule (c1ccccc1) is benzene, MW: 78.11 g/mol, LogP: 2.13
Extracted SMILES: 1 candidates
  Best: c1ccccc1 (confidence: 0.80)
Molecular Weight: 78.11 (confidence: 0.60)
Overall confidence: 0.65
------------------------------

Example 3:
Input: Structure: CCO, ethanol, with 2 H-bond donors and 1 H-bond acceptor
Extracted SMILES: 1 candidates
  Best: CCO (confidence: 1.00)
Overall confidence: 0.00
------------------------------

Example 4:
Input: The SMILES string is probably C1=CC=C(C=C1)C(=O)O but I'm not completely sure about the molecular weight being around 122
Extracted SMILES: 1 candidates
  Best: O=C(O)c1ccccc1 (confidence: 1.00)
Overall confidence: 0.00
------------------------------

Example 5:
Input: Invalid SMILES: XYZ123ABC and some random text with molecular weight 999999 Da
Extracted SMILES: 0 candidates
Overall confidence: 0.00
------------------------------</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[09:53:55] SMILES Parse Error: syntax error while parsing: 206.3
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] 206.3
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES '206.3' for input: '206.3'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'compound' for input: 'compound'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'SMILES' for input: 'SMILES'
[09:53:55] SMILES Parse Error: syntax error while parsing: molecular
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] molecular
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'molecular' for input: 'molecular'
[09:53:55] SMILES Parse Error: syntax error while parsing: 78.11
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] 78.11
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES '78.11' for input: '78.11'
[09:53:55] SMILES Parse Error: syntax error while parsing: molecule
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] molecule
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'molecule' for input: 'molecule'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'benzene' for input: 'benzene'
[09:53:55] SMILES Parse Error: syntax error while parsing: g/mol
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] g/mol
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'g/mol' for input: 'g/mol'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'Structure' for input: 'Structure'
[09:53:55] SMILES Parse Error: syntax error while parsing: ethanol
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] ethanol
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'ethanol' for input: 'ethanol'
[09:53:55] SMILES Parse Error: syntax error while parsing: H-bond
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] H-bond
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'H-bond' for input: 'H-bond'
[09:53:55] SMILES Parse Error: syntax error while parsing: donors
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] donors
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'donors' for input: 'donors'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'string' for input: 'string'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'SMILES' for input: 'SMILES'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'probably' for input: 'probably'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'completely' for input: 'completely'
[09:53:55] SMILES Parse Error: syntax error while parsing: XYZ123ABC
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] XYZ123ABC
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'XYZ123ABC' for input: 'XYZ123ABC'
[09:53:55] SMILES Parse Error: syntax error while parsing: 999999
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] 999999
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES '999999' for input: '999999'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'Invalid' for input: 'Invalid'
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'SMILES' for input: 'SMILES'
[09:53:55] SMILES Parse Error: syntax error while parsing: random
[09:53:55] SMILES Parse Error: check for mistakes around position 1:
[09:53:55] random
[09:53:55] ^
[09:53:55] SMILES Parse Error: Failed parsing SMILES 'random' for input: 'random'</code></pre>
</div>
</div>
</section>
<section id="challenge-3-data-quality-and-contamination" class="level2">
<h2 class="anchored" data-anchor-id="challenge-3-data-quality-and-contamination">Challenge 3: Data Quality and Contamination</h2>
<p>Chemical datasets often contain errors, duplicates, and inconsistencies. Here’s how to build quality control systems:</p>
<blockquote class="blockquote">
<p><strong>NOTE FROM GREG</strong>: I needed to add an import to the following block</p>
</blockquote>
<div id="fb13eead" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># EDIT BY GREG: add missing import</span></span>
<span id="cb28-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ChemicalDataQualityController:</span>
<span id="cb28-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A comprehensive system for detecting and handling data quality issues</span></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    in chemical datasets used for LLM training.</span></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb28-9">    </span>
<span id="cb28-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, similarity_threshold: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.85</span>):</span>
<span id="cb28-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.similarity_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> similarity_threshold</span>
<span id="cb28-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.quality_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb28-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_processed'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb28-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duplicates_found'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb28-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'invalid_structures'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb28-16">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'outliers_detected'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb28-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cleaned_structures'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb28-18">        }</span>
<span id="cb28-19">    </span>
<span id="cb28-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> comprehensive_quality_check(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data: List[Dict]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>]:</span>
<span id="cb28-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Perform comprehensive quality checks on chemical dataset.</span></span>
<span id="cb28-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb28-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb28-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            data: List of dictionaries with 'smiles' and optional 'name', 'description' keys</span></span>
<span id="cb28-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb28-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb28-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Quality report with flagged issues and cleaned data</span></span>
<span id="cb28-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb28-30">        report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb28-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_size'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data),</span>
<span id="cb28-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>: {</span>
<span id="cb28-33">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duplicates'</span>: [],</span>
<span id="cb28-34">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'invalid_smiles'</span>: [],</span>
<span id="cb28-35">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'structural_outliers'</span>: [],</span>
<span id="cb28-36">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text_inconsistencies'</span>: [],</span>
<span id="cb28-37">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suspicious_patterns'</span>: []</span>
<span id="cb28-38">            },</span>
<span id="cb28-39">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cleaned_data'</span>: [],</span>
<span id="cb28-40">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recommendations'</span>: []</span>
<span id="cb28-41">        }</span>
<span id="cb28-42">        </span>
<span id="cb28-43">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running comprehensive data quality checks..."</span>)</span>
<span id="cb28-44">        </span>
<span id="cb28-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Basic validation and cleaning</span></span>
<span id="cb28-46">        valid_entries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data):</span>
<span id="cb28-48">            smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb28-49">            validation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validate_smiles_with_details(smiles)</span>
<span id="cb28-50">            </span>
<span id="cb28-51">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> validation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid'</span>]:</span>
<span id="cb28-52">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store canonical SMILES for consistency</span></span>
<span id="cb28-53">                entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]</span>
<span id="cb28-54">                entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb28-55">                valid_entries.append(entry)</span>
<span id="cb28-56">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb28-57">                report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'invalid_smiles'</span>].append({</span>
<span id="cb28-58">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>: i,</span>
<span id="cb28-59">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: smiles,</span>
<span id="cb28-60">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>: validation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'errors'</span>]</span>
<span id="cb28-61">                })</span>
<span id="cb28-62">        </span>
<span id="cb28-63">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  Valid structures: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_entries)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-64">        </span>
<span id="cb28-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Duplicate detection</span></span>
<span id="cb28-66">        duplicates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._find_duplicates(valid_entries)</span>
<span id="cb28-67">        report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duplicates'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duplicates</span>
<span id="cb28-68">        </span>
<span id="cb28-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Structural outlier detection</span></span>
<span id="cb28-70">        outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._detect_structural_outliers(valid_entries)</span>
<span id="cb28-71">        report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'structural_outliers'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outliers</span>
<span id="cb28-72">        </span>
<span id="cb28-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Text-structure consistency checks</span></span>
<span id="cb28-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entry <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid_entries):</span>
<span id="cb28-75">            inconsistencies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._check_text_structure_consistency(valid_entries)</span>
<span id="cb28-76">            report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text_inconsistencies'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inconsistencies</span>
<span id="cb28-77">        </span>
<span id="cb28-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 5: Suspicious pattern detection</span></span>
<span id="cb28-79">        suspicious <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._detect_suspicious_patterns(valid_entries)</span>
<span id="cb28-80">        report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suspicious_patterns'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> suspicious</span>
<span id="cb28-81">        </span>
<span id="cb28-82">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 6: Create cleaned dataset</span></span>
<span id="cb28-83">        cleaned_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._create_cleaned_dataset(valid_entries, report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>])</span>
<span id="cb28-84">        report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cleaned_data'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cleaned_data</span>
<span id="cb28-85">        report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'final_size'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cleaned_data)</span>
<span id="cb28-86">        </span>
<span id="cb28-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 7: Generate recommendations</span></span>
<span id="cb28-88">        report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recommendations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._generate_recommendations(report)</span>
<span id="cb28-89">        </span>
<span id="cb28-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> report</span>
<span id="cb28-91">    </span>
<span id="cb28-92">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _find_duplicates(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, entries: List[Dict]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb28-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Find duplicate structures using canonical SMILES and similarity."""</span></span>
<span id="cb28-94">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Checking for duplicates..."</span>)</span>
<span id="cb28-95">        </span>
<span id="cb28-96">        duplicates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-97">        seen_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb28-98">        </span>
<span id="cb28-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exact duplicates (same canonical SMILES)</span></span>
<span id="cb28-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entries:</span>
<span id="cb28-101">            canonical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]</span>
<span id="cb28-102">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> canonical <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> seen_smiles:</span>
<span id="cb28-103">                duplicates.append({</span>
<span id="cb28-104">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_duplicate'</span>,</span>
<span id="cb28-105">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'indices'</span>: [seen_smiles[canonical][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>], entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>]],</span>
<span id="cb28-106">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: canonical,</span>
<span id="cb28-107">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'names'</span>: [seen_smiles[canonical].get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unknown'</span>), </span>
<span id="cb28-108">                             entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unknown'</span>)]</span>
<span id="cb28-109">                })</span>
<span id="cb28-110">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb28-111">                seen_smiles[canonical] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entry</span>
<span id="cb28-112">        </span>
<span id="cb28-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Near-duplicates (high structural similarity)</span></span>
<span id="cb28-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(entries) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only for smaller datasets due to O(n²) complexity</span></span>
<span id="cb28-115">            fingerprints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-116">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entries:</span>
<span id="cb28-117">                mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>])</span>
<span id="cb28-118">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb28-119">                    fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RDKFingerprint(mol)</span>
<span id="cb28-120">                    fingerprints.append((entry, fp))</span>
<span id="cb28-121">            </span>
<span id="cb28-122">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (entry1, fp1) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(fingerprints):</span>
<span id="cb28-123">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j, (entry2, fp2) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(fingerprints[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb28-124">                    similarity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataStructs.TanimotoSimilarity(fp1, fp2)</span>
<span id="cb28-125">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> similarity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.similarity_threshold:</span>
<span id="cb28-126">                        duplicates.append({</span>
<span id="cb28-127">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'near_duplicate'</span>,</span>
<span id="cb28-128">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity'</span>: similarity,</span>
<span id="cb28-129">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'indices'</span>: [entry1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>], entry2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>]],</span>
<span id="cb28-130">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: [entry1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>], entry2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]],</span>
<span id="cb28-131">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'names'</span>: [entry1.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unknown'</span>), entry2.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unknown'</span>)]</span>
<span id="cb28-132">                        })</span>
<span id="cb28-133">        </span>
<span id="cb28-134">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> duplicates</span>
<span id="cb28-135">    </span>
<span id="cb28-136">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _detect_structural_outliers(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, entries: List[Dict]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb28-137">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Detect structural outliers that might indicate data quality issues."""</span></span>
<span id="cb28-138">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Detecting structural outliers..."</span>)</span>
<span id="cb28-139">        </span>
<span id="cb28-140">        outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-141">        properties <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-142">        </span>
<span id="cb28-143">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate properties for all molecules</span></span>
<span id="cb28-144">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entries:</span>
<span id="cb28-145">            mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>])</span>
<span id="cb28-146">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb28-147">                props <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb28-148">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mw'</span>: Descriptors.MolWt(mol),</span>
<span id="cb28-149">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>: Descriptors.MolLogP(mol),</span>
<span id="cb28-150">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>: mol.GetNumAtoms(),</span>
<span id="cb28-151">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>: rdMolDescriptors.CalcNumRings(mol),</span>
<span id="cb28-152">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entry'</span>: entry</span>
<span id="cb28-153">                }</span>
<span id="cb28-154">                properties.append(props)</span>
<span id="cb28-155">        </span>
<span id="cb28-156">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> properties:</span>
<span id="cb28-157">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outliers</span>
<span id="cb28-158">        </span>
<span id="cb28-159">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Statistical outlier detection using IQR method</span></span>
<span id="cb28-160">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prop_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mw'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_rings'</span>]:</span>
<span id="cb28-161">            values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [p[prop_name] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> properties]</span>
<span id="cb28-162">            q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(values).quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb28-163">            q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(values).quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb28-164">            iqr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> q1</span>
<span id="cb28-165">            </span>
<span id="cb28-166">            lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> iqr  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More permissive than standard 1.5*IQR</span></span>
<span id="cb28-167">            upper_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> iqr</span>
<span id="cb28-168">            </span>
<span id="cb28-169">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> props <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> properties:</span>
<span id="cb28-170">                value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> props[prop_name]</span>
<span id="cb28-171">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> lower_bound <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> upper_bound:</span>
<span id="cb28-172">                    outliers.append({</span>
<span id="cb28-173">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prop_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_outlier'</span>,</span>
<span id="cb28-174">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>: props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entry'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>],</span>
<span id="cb28-175">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: props[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entry'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>],</span>
<span id="cb28-176">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'property'</span>: prop_name,</span>
<span id="cb28-177">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>: value,</span>
<span id="cb28-178">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'expected_range'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lower_bound<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>upper_bound<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb28-179">                    })</span>
<span id="cb28-180">        </span>
<span id="cb28-181">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outliers</span>
<span id="cb28-182">    </span>
<span id="cb28-183">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _check_text_structure_consistency(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, entries: List[Dict]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb28-184">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Check consistency between text descriptions and calculated properties."""</span></span>
<span id="cb28-185">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Checking text-structure consistency..."</span>)</span>
<span id="cb28-186">        </span>
<span id="cb28-187">        inconsistencies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-188">        </span>
<span id="cb28-189">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entries:</span>
<span id="cb28-190">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entry:</span>
<span id="cb28-191">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb28-192">            </span>
<span id="cb28-193">            description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>].lower()</span>
<span id="cb28-194">            mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>])</span>
<span id="cb28-195">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> mol:</span>
<span id="cb28-196">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb28-197">            </span>
<span id="cb28-198">            features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_molecular_features(mol)</span>
<span id="cb28-199">            </span>
<span id="cb28-200">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check molecular weight consistency</span></span>
<span id="cb28-201">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular weight'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> description <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mw'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> description:</span>
<span id="cb28-202">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract numbers that might be molecular weights</span></span>
<span id="cb28-203">                mw_numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\b(\d{2,4}(?:\.\d+)?)\b'</span>, description)</span>
<span id="cb28-204">                actual_mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight'</span>]</span>
<span id="cb28-205">                </span>
<span id="cb28-206">                found_matching_mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-207">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num_str <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mw_numbers:</span>
<span id="cb28-208">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb28-209">                        described_mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(num_str)</span>
<span id="cb28-210">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(described_mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> actual_mw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5 Da tolerance</span></span>
<span id="cb28-211">                            found_matching_mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb28-212">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb28-213">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb28-214">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb28-215">                </span>
<span id="cb28-216">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> found_matching_mw <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> mw_numbers:</span>
<span id="cb28-217">                    inconsistencies.append({</span>
<span id="cb28-218">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'molecular_weight_mismatch'</span>,</span>
<span id="cb28-219">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>],</span>
<span id="cb28-220">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>],</span>
<span id="cb28-221">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'described_mw'</span>: mw_numbers,</span>
<span id="cb28-222">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'calculated_mw'</span>: actual_mw,</span>
<span id="cb28-223">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description_excerpt'</span>: description[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'...'</span></span>
<span id="cb28-224">                    })</span>
<span id="cb28-225">            </span>
<span id="cb28-226">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check functional group mentions</span></span>
<span id="cb28-227">            mentioned_groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-228">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alcohol'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> description:</span>
<span id="cb28-229">                mentioned_groups.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alcohol'</span>)</span>
<span id="cb28-230">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'carboxylic acid'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> description <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'carboxyl'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> description:</span>
<span id="cb28-231">                mentioned_groups.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'carboxylic_acid'</span>)</span>
<span id="cb28-232">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amine'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> description:</span>
<span id="cb28-233">                mentioned_groups.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amine'</span>)</span>
<span id="cb28-234">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aromatic'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> description <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'benzene'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> description:</span>
<span id="cb28-235">                mentioned_groups.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aromatic'</span>)</span>
<span id="cb28-236">            </span>
<span id="cb28-237">            detected_groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fg.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'('</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> features.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_groups'</span>, [])]</span>
<span id="cb28-238">            </span>
<span id="cb28-239">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mentioned <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mentioned_groups:</span>
<span id="cb28-240">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mentioned <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> detected_groups <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> mentioned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aromatic'</span>:</span>
<span id="cb28-241">                    inconsistencies.append({</span>
<span id="cb28-242">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'functional_group_mismatch'</span>,</span>
<span id="cb28-243">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>],</span>
<span id="cb28-244">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>],</span>
<span id="cb28-245">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mentioned_group'</span>: mentioned,</span>
<span id="cb28-246">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detected_groups'</span>: detected_groups,</span>
<span id="cb28-247">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description_excerpt'</span>: description[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'...'</span></span>
<span id="cb28-248">                    })</span>
<span id="cb28-249">        </span>
<span id="cb28-250">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inconsistencies</span>
<span id="cb28-251">    </span>
<span id="cb28-252">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _detect_suspicious_patterns(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, entries: List[Dict]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb28-253">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Detect suspicious patterns that might indicate synthetic or corrupted data."""</span></span>
<span id="cb28-254">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Detecting suspicious patterns..."</span>)</span>
<span id="cb28-255">        </span>
<span id="cb28-256">        suspicious <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-257">        </span>
<span id="cb28-258">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pattern 1: Repetitive SMILES patterns</span></span>
<span id="cb28-259">        smiles_parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb28-260">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entries:</span>
<span id="cb28-261">            smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]</span>
<span id="cb28-262">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look for repeated substrings</span></span>
<span id="cb28-263">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> length <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb28-264">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb28-265">                    substring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smiles[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>length]</span>
<span id="cb28-266">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> substring.count(substring[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(substring):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not all same character</span></span>
<span id="cb28-267">                        smiles_parts[substring] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smiles_parts.get(substring, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb28-268">        </span>
<span id="cb28-269">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flag SMILES with highly repetitive patterns</span></span>
<span id="cb28-270">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entries:</span>
<span id="cb28-271">            smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>]</span>
<span id="cb28-272">            repetitive_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb28-273">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> substring, count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles_parts.items():</span>
<span id="cb28-274">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(entries) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> substring <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Appears in &gt;10% of dataset</span></span>
<span id="cb28-275">                    repetitive_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> count</span>
<span id="cb28-276">            </span>
<span id="cb28-277">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> repetitive_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(entries) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>:</span>
<span id="cb28-278">                suspicious.append({</span>
<span id="cb28-279">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repetitive_smiles_pattern'</span>,</span>
<span id="cb28-280">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>],</span>
<span id="cb28-281">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: smiles,</span>
<span id="cb28-282">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repetitive_score'</span>: repetitive_score</span>
<span id="cb28-283">                })</span>
<span id="cb28-284">        </span>
<span id="cb28-285">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pattern 2: Unrealistic property combinations</span></span>
<span id="cb28-286">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entries:</span>
<span id="cb28-287">            mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>])</span>
<span id="cb28-288">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb28-289">                mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Descriptors.MolWt(mol)</span>
<span id="cb28-290">                num_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol.GetNumAtoms()</span>
<span id="cb28-291">                </span>
<span id="cb28-292">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flag extremely dense molecules (too much mass for number of atoms)</span></span>
<span id="cb28-293">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_atoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average atomic weight &gt; 50</span></span>
<span id="cb28-294">                    suspicious.append({</span>
<span id="cb28-295">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unrealistic_density'</span>,</span>
<span id="cb28-296">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>],</span>
<span id="cb28-297">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>],</span>
<span id="cb28-298">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mw_per_atom'</span>: mw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_atoms</span>
<span id="cb28-299">                    })</span>
<span id="cb28-300">        </span>
<span id="cb28-301">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> suspicious</span>
<span id="cb28-302">    </span>
<span id="cb28-303">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _create_cleaned_dataset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, entries: List[Dict], issues: Dict) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Dict]:</span>
<span id="cb28-304">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Create a cleaned dataset by removing problematic entries."""</span></span>
<span id="cb28-305">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Creating cleaned dataset..."</span>)</span>
<span id="cb28-306">        </span>
<span id="cb28-307">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect indices to remove</span></span>
<span id="cb28-308">        indices_to_remove <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb28-309">        </span>
<span id="cb28-310">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove exact duplicates (keep first occurrence)</span></span>
<span id="cb28-311">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dup <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> issues[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duplicates'</span>]:</span>
<span id="cb28-312">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> dup[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_duplicate'</span>:</span>
<span id="cb28-313">                indices_to_remove.add(dup[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'indices'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove second occurrence</span></span>
<span id="cb28-314">        </span>
<span id="cb28-315">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove severe outliers</span></span>
<span id="cb28-316">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> outlier <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> issues[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'structural_outliers'</span>]:</span>
<span id="cb28-317">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> outlier[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms_outlier'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mw_outlier'</span>]:</span>
<span id="cb28-318">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only remove extreme outliers</span></span>
<span id="cb28-319">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> outlier[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms_outlier'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> outlier[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb28-320">                    indices_to_remove.add(outlier[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>])</span>
<span id="cb28-321">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> outlier[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mw_outlier'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> outlier[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>:</span>
<span id="cb28-322">                    indices_to_remove.add(outlier[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>])</span>
<span id="cb28-323">        </span>
<span id="cb28-324">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove highly suspicious entries</span></span>
<span id="cb28-325">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> susp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> issues[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suspicious_patterns'</span>]:</span>
<span id="cb28-326">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> susp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unrealistic_density'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> susp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mw_per_atom'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:</span>
<span id="cb28-327">                indices_to_remove.add(susp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>])</span>
<span id="cb28-328">        </span>
<span id="cb28-329">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create cleaned dataset</span></span>
<span id="cb28-330">        cleaned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-331">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> entries:</span>
<span id="cb28-332">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_index'</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> indices_to_remove:</span>
<span id="cb28-333">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean up the entry</span></span>
<span id="cb28-334">                cleaned_entry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb28-335">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'canonical_smiles'</span>],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use canonical form</span></span>
<span id="cb28-336">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>),</span>
<span id="cb28-337">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: entry.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb28-338">                }</span>
<span id="cb28-339">                cleaned.append(cleaned_entry)</span>
<span id="cb28-340">        </span>
<span id="cb28-341">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cleaned</span>
<span id="cb28-342">    </span>
<span id="cb28-343">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _generate_recommendations(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, report: Dict) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb28-344">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate recommendations based on quality issues found."""</span></span>
<span id="cb28-345">        recommendations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb28-346">        </span>
<span id="cb28-347">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Duplicate recommendations</span></span>
<span id="cb28-348">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duplicates'</span>]:</span>
<span id="cb28-349">            exact_dups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([d <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duplicates'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_duplicate'</span>])</span>
<span id="cb28-350">            near_dups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([d <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duplicates'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'near_duplicate'</span>])</span>
<span id="cb28-351">            </span>
<span id="cb28-352">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> exact_dups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb28-353">                recommendations.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Remove </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>exact_dups<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> exact duplicate structures"</span>)</span>
<span id="cb28-354">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> near_dups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb28-355">                recommendations.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Review </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>near_dups<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> near-duplicate pairs (similarity &gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>similarity_threshold<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb28-356">        </span>
<span id="cb28-357">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data size recommendations</span></span>
<span id="cb28-358">        removal_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_size'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'final_size'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_size'</span>]</span>
<span id="cb28-359">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> removal_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>:</span>
<span id="cb28-360">            recommendations.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"High removal rate (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>removal_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1%}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) suggests significant data quality issues"</span>)</span>
<span id="cb28-361">        </span>
<span id="cb28-362">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Outlier recommendations</span></span>
<span id="cb28-363">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'structural_outliers'</span>]:</span>
<span id="cb28-364">            recommendations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Review structural outliers - they may indicate data entry errors"</span>)</span>
<span id="cb28-365">        </span>
<span id="cb28-366">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Consistency recommendations</span></span>
<span id="cb28-367">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text_inconsistencies'</span>]:</span>
<span id="cb28-368">            recommendations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text descriptions inconsistent with structures - consider regenerating descriptions"</span>)</span>
<span id="cb28-369">        </span>
<span id="cb28-370">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> recommendations:</span>
<span id="cb28-371">            recommendations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset quality looks good! No major issues detected."</span>)</span>
<span id="cb28-372">        </span>
<span id="cb28-373">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> recommendations</span>
<span id="cb28-374"></span>
<span id="cb28-375"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Demonstration with a problematic dataset</span></span>
<span id="cb28-376"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_test_dataset_with_issues():</span>
<span id="cb28-377">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Create a test dataset with various quality issues for demonstration."""</span></span>
<span id="cb28-378">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [</span>
<span id="cb28-379">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good entries</span></span>
<span id="cb28-380">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCO'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ethanol'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ethanol is an alcohol with molecular weight 46.07 Da'</span>},</span>
<span id="cb28-381">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1ccccc1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Benzene'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Benzene is an aromatic compound'</span>},</span>
<span id="cb28-382">        </span>
<span id="cb28-383">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Duplicates</span></span>
<span id="cb28-384">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCO'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ethyl alcohol'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Another entry for ethanol'</span>},  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exact duplicate</span></span>
<span id="cb28-385">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1ccccc1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Benzene ring'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Benzene ring structure'</span>},  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exact duplicate</span></span>
<span id="cb28-386">        </span>
<span id="cb28-387">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Invalid SMILES</span></span>
<span id="cb28-388">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'INVALID123'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bad entry'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is not a valid SMILES'</span>},</span>
<span id="cb28-389">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1CCC'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unclosed ring'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Missing ring closure'</span>},</span>
<span id="cb28-390">        </span>
<span id="cb28-391">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Outliers</span></span>
<span id="cb28-392">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Very long chain'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Extremely long alkyl chain'</span>},</span>
<span id="cb28-393">        </span>
<span id="cb28-394">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Text inconsistencies</span></span>
<span id="cb28-395">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCO'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ethanol'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This alcohol has molecular weight 200 Da'</span>},  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrong MW</span></span>
<span id="cb28-396">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1ccccc1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Benzene'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contains carboxylic acid groups'</span>},  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrong functional group</span></span>
<span id="cb28-397">        </span>
<span id="cb28-398">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Near duplicates</span></span>
<span id="cb28-399">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(C)O'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Isopropanol'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Isopropyl alcohol'</span>},</span>
<span id="cb28-400">        </span>
<span id="cb28-401">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good entries for padding</span></span>
<span id="cb28-402">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(=O)O'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acetic acid'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acetic acid is a carboxylic acid'</span>},</span>
<span id="cb28-403">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Methylamine'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simple amine compound'</span>},</span>
<span id="cb28-404">    ]</span>
<span id="cb28-405"></span>
<span id="cb28-406"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run quality control demonstration</span></span>
<span id="cb28-407"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chemical Data Quality Control Demonstration"</span>)</span>
<span id="cb28-408"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb28-409"></span>
<span id="cb28-410"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create test dataset with known issues</span></span>
<span id="cb28-411">test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_test_dataset_with_issues()</span>
<span id="cb28-412"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test dataset created with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> entries"</span>)</span>
<span id="cb28-413"></span>
<span id="cb28-414"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run quality control</span></span>
<span id="cb28-415">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChemicalDataQualityController(similarity_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb28-416">quality_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.comprehensive_quality_check(test_data)</span>
<span id="cb28-417"></span>
<span id="cb28-418"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display results</span></span>
<span id="cb28-419"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Quality Control Results:"</span>)</span>
<span id="cb28-420"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Original dataset size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>quality_report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_size'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-421"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cleaned dataset size: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>quality_report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'final_size'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-422"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Removal rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> quality_report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'final_size'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>quality_report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_size'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span>)</span>
<span id="cb28-423"></span>
<span id="cb28-424"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Issues Found:"</span>)</span>
<span id="cb28-425"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> issue_type, issues <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> quality_report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'issues'</span>].items():</span>
<span id="cb28-426">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> issues:</span>
<span id="cb28-427">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>issue_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>title()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(issues)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> cases"</span>)</span>
<span id="cb28-428"></span>
<span id="cb28-429"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Recommendations:"</span>)</span>
<span id="cb28-430"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, rec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(quality_report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recommendations'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb28-431">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rec<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-432"></span>
<span id="cb28-433"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show example of cleaned data</span></span>
<span id="cb28-434"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">First 3 entries of cleaned dataset:"</span>)</span>
<span id="cb28-435"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(quality_report[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cleaned_data'</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]):</span>
<span id="cb28-436">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entry[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chemical Data Quality Control Demonstration
==================================================
Test dataset created with 12 entries
Running comprehensive data quality checks...
  Valid structures: 10/12
  Checking for duplicates...
  Detecting structural outliers...
  Checking text-structure consistency...
  Detecting suspicious patterns...
  Creating cleaned dataset...

Quality Control Results:
Original dataset size: 12
Cleaned dataset size: 6
Removal rate: 50.0%

Issues Found:
  Duplicates: 10 cases
  Invalid Smiles: 2 cases
  Structural Outliers: 3 cases
  Text Inconsistencies: 2 cases
  Suspicious Patterns: 6 cases

Recommendations:
  1. Remove 4 exact duplicate structures
  2. Review 6 near-duplicate pairs (similarity &gt; 0.8)
  3. High removal rate (50.0%) suggests significant data quality issues
  4. Review structural outliers - they may indicate data entry errors
  5. Text descriptions inconsistent with structures - consider regenerating descriptions

First 3 entries of cleaned dataset:
  1. Ethanol: CCO
  2. Benzene: c1ccccc1
  3. Very long chain: CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[09:55:35] SMILES Parse Error: Failed parsing SMILES 'INVALID123' for input: 'INVALID123'
[09:55:35] SMILES Parse Error: unclosed ring for input: 'C1CCC'</code></pre>
</div>
</div>
<section id="advanced-contamination-detection" class="level3">
<h3 class="anchored" data-anchor-id="advanced-contamination-detection">Advanced Contamination Detection</h3>
<blockquote class="blockquote">
<p><strong>NOTE FROM GREG</strong>: the following section of code does not work. I’m leaving it here as the first example of something that didn’t actually work as generated by the LLM.</p>
</blockquote>
<p>Data contamination is a critical issue when training LLMs on chemical data. Beyond basic quality checks, sophisticated contamination detection is essential:</p>
<p><strong>Cross-Dataset Leakage Detection:</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_cross_dataset_leakage(train_smiles, test_smiles, validation_smiles):</span>
<span id="cb31-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Detect potential data leakage between training, test, and validation sets"""</span></span>
<span id="cb31-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Implementation would check for exact matches and high-similarity compounds</span></span>
<span id="cb31-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span></code></pre></div>
<p><strong>Temporal Contamination:</strong> Chemical databases often contain compounds discovered after certain dates. For historically-aware models, ensure temporal consistency:</p>
<p><strong>Vendor Catalog Contamination:</strong> Many “novel” compounds in datasets are actually from commercial catalogs, which can lead to unrealistic performance expectations.</p>
<p><strong>Synthetic Accessibility Bias:</strong> Datasets often over-represent easily synthesizable compounds, creating bias in LLM outputs.</p>
<div id="84b0e445" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ContaminationDetector:</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Advanced contamination detection for chemical datasets used in LLM training.</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb32-5">    </span>
<span id="cb32-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, similarity_threshold: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.85</span>):</span>
<span id="cb32-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.similarity_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> similarity_threshold</span>
<span id="cb32-8">    </span>
<span id="cb32-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_cross_dataset_leakage(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, datasets: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict:</span>
<span id="cb32-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Detect potential data leakage between multiple datasets.</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            datasets: Dictionary with dataset names as keys and lists of SMILES as values</span></span>
<span id="cb32-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                     e.g., {'train': [...], 'test': [...], 'validation': [...]}</span></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb32-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Dictionary with contamination analysis results</span></span>
<span id="cb32-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Detecting cross-dataset contamination..."</span>)</span>
<span id="cb32-21">        </span>
<span id="cb32-22">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_overlaps'</span>: {},</span>
<span id="cb32-24">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity_overlaps'</span>: {},</span>
<span id="cb32-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>: {}</span>
<span id="cb32-26">        }</span>
<span id="cb32-27">        </span>
<span id="cb32-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert SMILES to canonical form and create fingerprints</span></span>
<span id="cb32-29">        canonical_datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb32-30">        fingerprint_datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb32-31">        </span>
<span id="cb32-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, smiles_list <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> datasets.items():</span>
<span id="cb32-33">            canonical_smiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-34">            fingerprints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-35">            </span>
<span id="cb32-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles_list:</span>
<span id="cb32-37">                mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb32-38">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb32-39">                    canonical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolToSmiles(mol)</span>
<span id="cb32-40">                    canonical_smiles.append(canonical)</span>
<span id="cb32-41">                    fingerprints.append(Chem.RDKFingerprint(mol))</span>
<span id="cb32-42">            </span>
<span id="cb32-43">            canonical_datasets[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> canonical_smiles</span>
<span id="cb32-44">            fingerprint_datasets[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fingerprints</span>
<span id="cb32-45">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(canonical_smiles)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> valid structures"</span>)</span>
<span id="cb32-46">        </span>
<span id="cb32-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check exact overlaps</span></span>
<span id="cb32-48">        dataset_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(datasets.keys())</span>
<span id="cb32-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, name1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataset_names):</span>
<span id="cb32-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dataset_names[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]:</span>
<span id="cb32-51">                overlap_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_vs_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb32-52">                </span>
<span id="cb32-53">                set1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(canonical_datasets[name1])</span>
<span id="cb32-54">                set2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(canonical_datasets[name2])</span>
<span id="cb32-55">                exact_overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> set1.intersection(set2)</span>
<span id="cb32-56">                </span>
<span id="cb32-57">                results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_overlaps'</span>][overlap_key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-58">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(exact_overlap),</span>
<span id="cb32-59">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'percentage_of_first'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(exact_overlap) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(set1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> set1 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb32-60">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'percentage_of_second'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(exact_overlap) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(set2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> set2 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb32-61">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'overlapping_smiles'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(exact_overlap)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First 10 examples</span></span>
<span id="cb32-62">                }</span>
<span id="cb32-63">        </span>
<span id="cb32-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check similarity-based overlaps (computationally expensive, limited to smaller datasets)</span></span>
<span id="cb32-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, name1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataset_names):</span>
<span id="cb32-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dataset_names[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]:</span>
<span id="cb32-67">                overlap_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_vs_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb32-68">                </span>
<span id="cb32-69">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fingerprint_datasets[name1]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fingerprint_datasets[name2]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:</span>
<span id="cb32-70">                    similar_pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-71">                    </span>
<span id="cb32-72">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx1, fp1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(fingerprint_datasets[name1]):</span>
<span id="cb32-73">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx2, fp2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(fingerprint_datasets[name2]):</span>
<span id="cb32-74">                            similarity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataStructs.TanimotoSimilarity(fp1, fp2)</span>
<span id="cb32-75">                            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> similarity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.similarity_threshold:</span>
<span id="cb32-76">                                similar_pairs.append({</span>
<span id="cb32-77">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles1'</span>: canonical_datasets[name1][idx1],</span>
<span id="cb32-78">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles2'</span>: canonical_datasets[name2][idx2],</span>
<span id="cb32-79">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity'</span>: similarity</span>
<span id="cb32-80">                                })</span>
<span id="cb32-81">                    </span>
<span id="cb32-82">                    results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity_overlaps'</span>][overlap_key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-83">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(similar_pairs),</span>
<span id="cb32-84">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pairs'</span>: similar_pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First 5 examples</span></span>
<span id="cb32-85">                    }</span>
<span id="cb32-86">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb32-87">                    results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity_overlaps'</span>][overlap_key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-88">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skipped_large_dataset'</span>,</span>
<span id="cb32-89">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'note'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dataset too large for pairwise comparison'</span></span>
<span id="cb32-90">                    }</span>
<span id="cb32-91">        </span>
<span id="cb32-92">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate summary</span></span>
<span id="cb32-93">        total_exact_overlaps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> result <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_overlaps'</span>].values() </span>
<span id="cb32-94">                                 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>))</span>
<span id="cb32-95">        </span>
<span id="cb32-96">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-97">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_exact_overlaps'</span>: total_exact_overlaps,</span>
<span id="cb32-98">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'datasets_analyzed'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(datasets),</span>
<span id="cb32-99">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contamination_severity'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._assess_contamination_severity(results),</span>
<span id="cb32-100">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recommendations'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._generate_contamination_recommendations(results)</span>
<span id="cb32-101">        }</span>
<span id="cb32-102">        </span>
<span id="cb32-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span>
<span id="cb32-104">    </span>
<span id="cb32-105">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_temporal_contamination(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>], </span>
<span id="cb32-106">                                    target_date: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-01-01"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict:</span>
<span id="cb32-107">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Detect compounds that might be from after a target date.</span></span>
<span id="cb32-109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Note: This is a simplified version - real implementation would require</span></span>
<span id="cb32-110"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a database of compound discovery/publication dates.</span></span>
<span id="cb32-111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-112">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Checking for temporal contamination (compounds after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)..."</span>)</span>
<span id="cb32-113">        </span>
<span id="cb32-114">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is a placeholder implementation</span></span>
<span id="cb32-115">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In practice, you'd need a database mapping SMILES to discovery dates</span></span>
<span id="cb32-116">        suspicious_compounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-117">        </span>
<span id="cb32-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles_list:</span>
<span id="cb32-119">            mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb32-120">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb32-121">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example heuristic: very complex molecules might be recent</span></span>
<span id="cb32-122">                complexity_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._calculate_molecular_complexity(mol)</span>
<span id="cb32-123">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> complexity_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Arbitrary threshold</span></span>
<span id="cb32-124">                    suspicious_compounds.append({</span>
<span id="cb32-125">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: smiles,</span>
<span id="cb32-126">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'complexity_score'</span>: complexity_score,</span>
<span id="cb32-127">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reason'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high_complexity'</span></span>
<span id="cb32-128">                    })</span>
<span id="cb32-129">        </span>
<span id="cb32-130">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb32-131">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suspicious_count'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(suspicious_compounds),</span>
<span id="cb32-132">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suspicious_compounds'</span>: suspicious_compounds[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],</span>
<span id="cb32-133">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recommendation'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Manual review recommended for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(suspicious_compounds)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> complex compounds"</span></span>
<span id="cb32-134">        }</span>
<span id="cb32-135">    </span>
<span id="cb32-136">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_vendor_catalog_bias(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, smiles_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict:</span>
<span id="cb32-137">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-138"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Detect potential bias from commercial compound catalogs.</span></span>
<span id="cb32-139"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-140">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Detecting vendor catalog bias..."</span>)</span>
<span id="cb32-141">        </span>
<span id="cb32-142">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Common patterns in commercial compounds</span></span>
<span id="cb32-143">        vendor_patterns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-144">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'simple_aromatics'</span>: <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'c1ccccc1'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple benzene rings</span></span>
<span id="cb32-145">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'common_protecting_groups'</span>: <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'C\(=O\)OC\(C\)\(C\)C'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Boc groups</span></span>
<span id="cb32-146">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'standard_linkers'</span>: <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'OCCOCCOC'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PEG-like linkers</span></span>
<span id="cb32-147">        }</span>
<span id="cb32-148">        </span>
<span id="cb32-149">        pattern_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {pattern: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vendor_patterns.keys()}</span>
<span id="cb32-150">        flagged_compounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-151">        </span>
<span id="cb32-152">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> smiles <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smiles_list:</span>
<span id="cb32-153">            mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles)</span>
<span id="cb32-154">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol:</span>
<span id="cb32-155">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for overly simple structures</span></span>
<span id="cb32-156">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mol.GetNumAtoms() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> mol.GetNumBonds() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb32-157">                    flagged_compounds.append({</span>
<span id="cb32-158">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smiles'</span>: smiles,</span>
<span id="cb32-159">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reason'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'overly_simple'</span>,</span>
<span id="cb32-160">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_atoms'</span>: mol.GetNumAtoms()</span>
<span id="cb32-161">                    })</span>
<span id="cb32-162">                </span>
<span id="cb32-163">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for common patterns</span></span>
<span id="cb32-164">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pattern_name, pattern <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> vendor_patterns.items():</span>
<span id="cb32-165">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> re.search(pattern, smiles):</span>
<span id="cb32-166">                        pattern_counts[pattern_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb32-167">        </span>
<span id="cb32-168">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb32-169">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pattern_counts'</span>: pattern_counts,</span>
<span id="cb32-170">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flagged_simple'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(flagged_compounds),</span>
<span id="cb32-171">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_analyzed'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles_list),</span>
<span id="cb32-172">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bias_indicators'</span>: {</span>
<span id="cb32-173">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'high_simple_proportion'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(flagged_compounds) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles_list) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb32-174">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pattern_dominance'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(smiles_list) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pattern_counts.values())</span>
<span id="cb32-175">            }</span>
<span id="cb32-176">        }</span>
<span id="cb32-177">    </span>
<span id="cb32-178">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _calculate_molecular_complexity(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb32-179">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate a simple molecular complexity score."""</span></span>
<span id="cb32-180">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> mol:</span>
<span id="cb32-181">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb32-182">        </span>
<span id="cb32-183">        complexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb32-184">        complexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> mol.GetNumAtoms() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb32-185">        complexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> mol.GetNumBonds() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb32-186">        complexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> rdMolDescriptors.CalcNumRings(mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb32-187">        complexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> rdMolDescriptors.CalcNumHeteroatoms(mol) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span></span>
<span id="cb32-188">        complexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rdMolDescriptors.GetUSRScore(mol)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(rdMolDescriptors, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetUSRScore'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb32-189">        </span>
<span id="cb32-190">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> complexity</span>
<span id="cb32-191">    </span>
<span id="cb32-192">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _assess_contamination_severity(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, results: Dict) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb32-193">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Assess the overall severity of contamination."""</span></span>
<span id="cb32-194">        exact_overlaps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> result <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_overlaps'</span>].values() </span>
<span id="cb32-195">                           <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>))</span>
<span id="cb32-196">        </span>
<span id="cb32-197">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> exact_overlaps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb32-198">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span></span>
<span id="cb32-199">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> exact_overlaps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb32-200">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moderate"</span></span>
<span id="cb32-201">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb32-202">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span></span>
<span id="cb32-203">    </span>
<span id="cb32-204">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _generate_contamination_recommendations(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, results: Dict) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]:</span>
<span id="cb32-205">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate recommendations based on contamination analysis."""</span></span>
<span id="cb32-206">        recommendations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-207">        </span>
<span id="cb32-208">        severity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._assess_contamination_severity(results)</span>
<span id="cb32-209">        </span>
<span id="cb32-210">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> severity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>:</span>
<span id="cb32-211">            recommendations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRITICAL: High level of contamination detected - review data splitting strategy"</span>)</span>
<span id="cb32-212">            recommendations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Consider using scaffold-based or time-based splitting instead of random splitting"</span>)</span>
<span id="cb32-213">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> severity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moderate"</span>:</span>
<span id="cb32-214">            recommendations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moderate contamination detected - remove overlapping compounds"</span>)</span>
<span id="cb32-215">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb32-216">            recommendations.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Low contamination level - acceptable for most applications"</span>)</span>
<span id="cb32-217">        </span>
<span id="cb32-218">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for specific issues</span></span>
<span id="cb32-219">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> overlap_key, overlap_data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_overlaps'</span>].items():</span>
<span id="cb32-220">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> overlap_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb32-221">                recommendations.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Remove </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>overlap_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> overlapping compounds between </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>overlap_key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-222">        </span>
<span id="cb32-223">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> recommendations</span>
<span id="cb32-224"></span>
<span id="cb32-225"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Demonstration of contamination detection</span></span>
<span id="cb32-226"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contamination Detection Demonstration"</span>)</span>
<span id="cb32-227"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb32-228"></span>
<span id="cb32-229"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create example datasets with known contamination</span></span>
<span id="cb32-230">example_datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-231">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>: [</span>
<span id="cb32-232">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCO'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ethanol</span></span>
<span id="cb32-233">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1ccccc1'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># benzene</span></span>
<span id="cb32-234">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(=O)O'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># acetic acid</span></span>
<span id="cb32-235">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(C)O'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># isopropanol</span></span>
<span id="cb32-236">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CN'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># methylamine</span></span>
<span id="cb32-237">    ],</span>
<span id="cb32-238">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>: [</span>
<span id="cb32-239">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCO'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CONTAMINATION: same as train</span></span>
<span id="cb32-240">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1ccc(O)cc1'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># phenol</span></span>
<span id="cb32-241">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(=O)OC'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># methyl acetate</span></span>
<span id="cb32-242">    ],</span>
<span id="cb32-243">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'validation'</span>: [</span>
<span id="cb32-244">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(=O)O'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CONTAMINATION: same as train</span></span>
<span id="cb32-245">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC(C)(C)O'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tert-butanol</span></span>
<span id="cb32-246">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1cccnc1'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyridine</span></span>
<span id="cb32-247">    ]</span>
<span id="cb32-248">}</span>
<span id="cb32-249"></span>
<span id="cb32-250">detector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ContaminationDetector(similarity_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb32-251"></span>
<span id="cb32-252"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run contamination analysis</span></span>
<span id="cb32-253">contamination_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> detector.detect_cross_dataset_leakage(example_datasets)</span>
<span id="cb32-254"></span>
<span id="cb32-255"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Contamination Analysis Results:"</span>)</span>
<span id="cb32-256"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Contamination severity: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>contamination_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contamination_severity'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-257"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Total exact overlaps: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>contamination_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_exact_overlaps'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-258"></span>
<span id="cb32-259"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Exact overlaps found:"</span>)</span>
<span id="cb32-260"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> overlap_key, overlap_data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> contamination_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'exact_overlaps'</span>].items():</span>
<span id="cb32-261">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> overlap_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb32-262">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>overlap_key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>overlap_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> compounds (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>overlap_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'percentage_of_first'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% of first dataset)"</span>)</span>
<span id="cb32-263">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"    Examples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>overlap_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'overlapping_smiles'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-264"></span>
<span id="cb32-265"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Recommendations:"</span>)</span>
<span id="cb32-266"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, rec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(contamination_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'summary'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recommendations'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb32-267">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rec<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-268"></span>
<span id="cb32-269"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test temporal contamination detection</span></span>
<span id="cb32-270"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Temporal Contamination Check:"</span>)</span>
<span id="cb32-271">temporal_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> detector.detect_temporal_contamination(example_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>])</span>
<span id="cb32-272"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Suspicious compounds: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>temporal_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'suspicious_count'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-273"></span>
<span id="cb32-274"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test vendor bias detection</span></span>
<span id="cb32-275"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Vendor Catalog Bias Check:"</span>)</span>
<span id="cb32-276">bias_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> detector.detect_vendor_catalog_bias(example_datasets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>])</span>
<span id="cb32-277"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Simple compounds flagged: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bias_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flagged_simple'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bias_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_analyzed'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-278"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bias indicators detected: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(bias_results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bias_indicators'</span>].values())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Contamination Detection Demonstration
========================================
Detecting cross-dataset contamination...
  train: 5 valid structures
  test: 3 valid structures
  validation: 3 valid structures

Contamination Analysis Results:
Contamination severity: moderate
Total exact overlaps: 2

Exact overlaps found:
  train_vs_test: 1 compounds (20.0% of first dataset)
    Examples: ['CCO']
  train_vs_validation: 1 compounds (20.0% of first dataset)
    Examples: ['CC(=O)O']

Recommendations:
  1. Moderate contamination detected - remove overlapping compounds
  2. Remove 1 overlapping compounds between train_vs_test
  3. Remove 1 overlapping compounds between train_vs_validation

Temporal Contamination Check:
Checking for temporal contamination (compounds after 2020-01-01)...</code></pre>
</div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">ArgumentError</span>                             Traceback (most recent call last)
Cell <span class="ansi-green-fg">In[15], line 271</span>
<span class="ansi-green-fg ansi-bold">    269</span> <span style="font-style:italic;color:rgb(95,135,135)"># Test temporal contamination detection</span>
<span class="ansi-green-fg ansi-bold">    270</span> <span style="color:rgb(0,135,0)">print</span>(<span style="color:rgb(175,0,0)">f</span><span style="color:rgb(175,0,0)">"</span><span style="font-weight:bold;color:rgb(175,95,0)">\n</span><span style="color:rgb(175,0,0)">Temporal Contamination Check:</span><span style="color:rgb(175,0,0)">"</span>)
<span class="ansi-green-fg">--&gt; 271</span> temporal_results <span style="color:rgb(98,98,98)">=</span> <span class="ansi-yellow-bg">detector</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">detect_temporal_contamination</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">example_datasets</span><span class="ansi-yellow-bg">[</span><span style="color:rgb(175,0,0)" class="ansi-yellow-bg">'</span><span style="color:rgb(175,0,0)" class="ansi-yellow-bg">train</span><span style="color:rgb(175,0,0)" class="ansi-yellow-bg">'</span><span class="ansi-yellow-bg">]</span><span class="ansi-yellow-bg">)</span>
<span class="ansi-green-fg ansi-bold">    272</span> <span style="color:rgb(0,135,0)">print</span>(<span style="color:rgb(175,0,0)">f</span><span style="color:rgb(175,0,0)">"</span><span style="color:rgb(175,0,0)">Suspicious compounds: </span><span style="font-weight:bold;color:rgb(175,95,135)">{</span>temporal_results[<span style="color:rgb(175,0,0)">'</span><span style="color:rgb(175,0,0)">suspicious_count</span><span style="color:rgb(175,0,0)">'</span>]<span style="font-weight:bold;color:rgb(175,95,135)">}</span><span style="color:rgb(175,0,0)">"</span>)
<span class="ansi-green-fg ansi-bold">    274</span> <span style="font-style:italic;color:rgb(95,135,135)"># Test vendor bias detection</span>

Cell <span class="ansi-green-fg">In[15], line 122</span>, in <span class="ansi-cyan-fg">ContaminationDetector.detect_temporal_contamination</span><span class="ansi-blue-fg">(self, smiles_list, target_date)</span>
<span class="ansi-green-fg ansi-bold">    119</span> mol <span style="color:rgb(98,98,98)">=</span> Chem<span style="color:rgb(98,98,98)">.</span>MolFromSmiles(smiles)
<span class="ansi-green-fg ansi-bold">    120</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> mol:
<span class="ansi-green-fg ansi-bold">    121</span>     <span style="font-style:italic;color:rgb(95,135,135)"># Example heuristic: very complex molecules might be recent</span>
<span class="ansi-green-fg">--&gt; 122</span>     complexity_score <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)" class="ansi-yellow-bg">self</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">_calculate_molecular_complexity</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">mol</span><span class="ansi-yellow-bg">)</span>
<span class="ansi-green-fg ansi-bold">    123</span>     <span style="font-weight:bold;color:rgb(0,135,0)">if</span> complexity_score <span style="color:rgb(98,98,98)">&gt;</span> <span style="color:rgb(98,98,98)">20</span>:  <span style="font-style:italic;color:rgb(95,135,135)"># Arbitrary threshold</span>
<span class="ansi-green-fg ansi-bold">    124</span>         suspicious_compounds<span style="color:rgb(98,98,98)">.</span>append({
<span class="ansi-green-fg ansi-bold">    125</span>             <span style="color:rgb(175,0,0)">'</span><span style="color:rgb(175,0,0)">smiles</span><span style="color:rgb(175,0,0)">'</span>: smiles,
<span class="ansi-green-fg ansi-bold">    126</span>             <span style="color:rgb(175,0,0)">'</span><span style="color:rgb(175,0,0)">complexity_score</span><span style="color:rgb(175,0,0)">'</span>: complexity_score,
<span class="ansi-green-fg ansi-bold">    127</span>             <span style="color:rgb(175,0,0)">'</span><span style="color:rgb(175,0,0)">reason</span><span style="color:rgb(175,0,0)">'</span>: <span style="color:rgb(175,0,0)">'</span><span style="color:rgb(175,0,0)">high_complexity</span><span style="color:rgb(175,0,0)">'</span>
<span class="ansi-green-fg ansi-bold">    128</span>         })

Cell <span class="ansi-green-fg">In[15], line 188</span>, in <span class="ansi-cyan-fg">ContaminationDetector._calculate_molecular_complexity</span><span class="ansi-blue-fg">(self, mol)</span>
<span class="ansi-green-fg ansi-bold">    186</span> complexity <span style="color:rgb(98,98,98)">+</span><span style="color:rgb(98,98,98)">=</span> rdMolDescriptors<span style="color:rgb(98,98,98)">.</span>CalcNumRings(mol) <span style="color:rgb(98,98,98)">*</span> <span style="color:rgb(98,98,98)">2</span>
<span class="ansi-green-fg ansi-bold">    187</span> complexity <span style="color:rgb(98,98,98)">+</span><span style="color:rgb(98,98,98)">=</span> rdMolDescriptors<span style="color:rgb(98,98,98)">.</span>CalcNumHeteroatoms(mol) <span style="color:rgb(98,98,98)">*</span> <span style="color:rgb(98,98,98)">1.5</span>
<span class="ansi-green-fg">--&gt; 188</span> complexity <span style="color:rgb(98,98,98)">+</span><span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">len</span>(<span class="ansi-yellow-bg">rdMolDescriptors</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">GetUSRScore</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">mol</span><span class="ansi-yellow-bg">)</span>) <span style="color:rgb(98,98,98)">*</span> <span style="color:rgb(98,98,98)">0.01</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="color:rgb(0,135,0)">hasattr</span>(rdMolDescriptors, <span style="color:rgb(175,0,0)">'</span><span style="color:rgb(175,0,0)">GetUSRScore</span><span style="color:rgb(175,0,0)">'</span>) <span style="font-weight:bold;color:rgb(0,135,0)">else</span> <span style="color:rgb(98,98,98)">0</span>
<span class="ansi-green-fg ansi-bold">    190</span> <span style="font-weight:bold;color:rgb(0,135,0)">return</span> complexity

<span class="ansi-red-fg">ArgumentError</span>: Python argument types in
    rdkit.Chem.rdMolDescriptors.GetUSRScore(Mol)
did not match C++ signature:
    GetUSRScore(boost::python::api::object descriptor1, boost::python::api::object descriptor2, boost::python::api::object weights=[])</pre>
</div>
</div>
</div>


</section>
</section>
</section>

 ]]></description>
  <category>exploratoration</category>
  <category>LLMs</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-31-an-llm-experiment-1.html</guid>
  <pubDate>Wed, 30 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Storing partial charges in SD files</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-24-writing-partial-charges-to-sd-files.html</link>
  <description><![CDATA[ 




<p>I was chatting with Pat Walters at the CADD GRC and he brought up point 7 from his famous <a href="https://www.linkedin.com/posts/wpwalters_i-thoroughly-enjoyed-the-first-day-of-the-activity-7316447084209991682-Yuki">14 points LinkedIn post</a>. The usual justification given for using mol2 files is that they are the only file format we have that allows including partial charges. This is a widely held opinion, but it’s not really true. It’s actually quite easy to store arbitrary atom (or bond) properties in SD files and the RDKit has a simple mechanism for doing this. This post is a short tutorial on how to use this functionality.</p>
<p>The handling of atomic and bond properties in SD files is described in more detail in <a href="https://www.rdkit.org/docs/RDKit_Book.html#atom-properties-and-sdf-files">the docs</a>.</p>
<p>Rather than doing the usual thing and generating Gasteiger-Marsilli charges, here I’m going to use the DASH-props tree that we developed in the Riniker lab to rapidly generate approximate AM1BCC charges. DASH uses a hierarchical tree of substructures to compute high-quality estimates of AM1BCC charges for a molecule. Because it’s based on substructures, the method is fast and conformation independent. If want to learn more about the algorithm, take a look at <a href="https://pubs.aip.org/aip/jcp/article/161/7/074103/3308079/DASH-properties-Estimating-atomic-and-molecular">the open-access paper</a>.</p>
<p>If you want to run the code in this notebook, you’ll need to install DASH props. This requires adding some packages to your conda environment. There’s an <a href="https://github.com/rinikerlab/DASH-tree/blob/main/tree_only_env.yml">environment file</a> in the DASH-tree repo that you can use, but if you already have a working RDKit environment, I think this is sufficient:</p>
<pre><code>% conda install -c conda-forge pytables tqdm</code></pre>
<p>and then pip installing the DASH tree package:</p>
<pre><code>% python -m pip install git+https://github.com/rinikerlab/DASH-tree</code></pre>
<blockquote class="blockquote">
<p>An aside: the way these properties are stored in the SD file is very easy to parse (The format is actually the result of some discussions I had with a couple of cheminformatics software vendors back in 2019; I think I ended up being the only one to implement what we had discussed), so adding support for this format to other software or toolkits that can already read SD files wouldn’t be much of a lift. If you’re a developer and have questions, please just ask.</p>
</blockquote>
<div id="51317896" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import the required stuff from DASH:</span></span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> serenityff.charge.tree.dash_tree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DASHTree, TreeType</span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> serenityff.charge.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dash_props_tree_path</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.4</code></pre>
</div>
</div>
<div id="9fe0e6db" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the property tree.</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note, that the files will be automatically downloaded the first time the tree is loaded from the ETHZ Research Collection.</span></span>
<span id="cb5-3">tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DASHTree(tree_folder_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dash_props_tree_path, tree_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TreeType.FULL)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Loading DASH tree data
Loaded 122 trees and data</code></pre>
</div>
</div>
<p>Construct a sample molecule and compute the charges:</p>
<div id="a98ba683" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">esomeprazole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CC1=C(C(=C(C=C1)N)C(=O)N)C(=O)N'</span>)</span>
<span id="cb7-2">esomep_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.AddHs(esomeprazole)</span>
<span id="cb7-3"></span>
<span id="cb7-4">charges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree.get_molecules_partial_charges(esomep_h, chg_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AM1BCC"</span>, chg_std_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AM1BCC_std"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"charges"</span>]</span></code></pre></div>
</div>
<p>Set the charges as atomic properties:</p>
<div id="40ba7fcf" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> esomep_h.GetAtoms():</span>
<span id="cb8-2">    atom.SetDoubleProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DASH_AM1BCC_CHARGES"</span>, charges[atom.GetIdx()])</span></code></pre></div>
</div>
<div id="77259b55" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is the one extra call you have to make in order to </span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert the atom properties to a molecule property which will </span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be written to the SD file:</span></span>
<span id="cb9-5">Chem.CreateAtomDoublePropertyList(esomep_h,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DASH_AM1BCC_CHARGES'</span>)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write the SD data to a string so that we can look at it:</span></span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StringIO</span>
<span id="cb9-9">sio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StringIO()</span>
<span id="cb9-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Chem.SDWriter(sio) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> w:</span>
<span id="cb9-11">    w.write(esomep_h)</span>
<span id="cb9-12"></span>
<span id="cb9-13">sdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sio.getvalue()</span>
<span id="cb9-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sdf)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
     RDKit          2D

 25 25  0  0  0  0  0  0  0  0999 V2000
    3.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    1.5000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.7500   -1.2990    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -0.7500   -1.2990    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.5000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -0.7500    1.2990    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.7500    1.2990    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -3.0000    0.0000    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
   -1.5000   -2.5981    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
   -1.1155   -3.5040    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
   -3.0000   -2.5981    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
    1.5000   -2.5981    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    3.0000   -2.5981    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    0.7500   -3.8971    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
    4.5000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    3.0000   -1.5000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    3.0000    1.5000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -1.5000    2.5981    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    1.5000    2.5981    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.7500    1.2990    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.5923   -0.7860    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.7500   -3.8971    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -3.5923   -1.8121    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    1.5000   -5.1962    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
   -0.2268   -4.0171    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
  1  2  1  0
  2  3  2  0
  3  4  1  0
  4  5  2  0
  5  6  1  0
  6  7  2  0
  5  8  1  0
  4  9  1  0
  9 10  2  0
  9 11  1  0
  3 12  1  0
 12 13  2  0
 12 14  1  0
  7  2  1  0
  1 15  1  0
  1 16  1  0
  1 17  1  0
  6 18  1  0
  7 19  1  0
  8 20  1  0
  8 21  1  0
 11 22  1  0
 11 23  1  0
 14 24  1  0
 14 25  1  0
M  END
&gt;  &lt;atom.dprop.DASH_AM1BCC_CHARGES&gt;  (1) 
-0.057020346264131966 -0.05498106388730991 -0.1417576117737365 -0.24649839652124084 0.19183992335343653 -0.14084077400735293 -0.13325346021838766 -0.85373148869180315 0.69066109221699112
-0.61948158338060078 -0.63810034626413192 0.6751982937456793 -0.58508759253159914 -0.67224362594143339 0.054944129070337355 0.054944129070337355 0.054944129070337355 0.1595973470895479
0.1595973470895479 0.41622965373586801 0.41622965373586801 0.31563710234748005 0.31563710234748005 0.31876819330440859 0.31876819330440859

$$$$
</code></pre>
</div>
</div>
<p>You can see that the property <code>atom.dprop.DASH_AM1BCC_CHARGES</code> has been added to the SD string. Also that we’re writing way too many sig figs… it’s probably worth adding an option to control that.</p>
<p>When that SD string is parsed, the atom properties are extracted automatically and assigned to the atoms:</p>
<div id="89ae23e1" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">suppl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SDMolSupplier()</span>
<span id="cb11-2">suppl.SetData(sdf,removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(suppl)</span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> m.GetAtoms():</span>
<span id="cb11-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(atom.GetIdx(), atom.GetDoubleProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DASH_AM1BCC_CHARGES"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 -0.057020346264131966
1 -0.05498106388730991
2 -0.1417576117737365
3 -0.24649839652124084
4 0.19183992335343653
5 -0.14084077400735293
6 -0.13325346021838766
7 -0.8537314886918032
8 0.6906610922169911
9 -0.6194815833806008
10 -0.6381003462641319
11 0.6751982937456793
12 -0.5850875925315991
13 -0.6722436259414334
14 0.054944129070337355
15 0.054944129070337355
16 0.054944129070337355
17 0.1595973470895479
18 0.1595973470895479
19 0.416229653735868
20 0.416229653735868
21 0.31563710234748005
22 0.31563710234748005
23 0.3187681933044086
24 0.3187681933044086</code></pre>
</div>
</div>
<p>That’s it… hopefully it is useful</p>



 ]]></description>
  <category>tutorial</category>
  <category>3d</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-24-writing-partial-charges-to-sd-files.html</guid>
  <pubDate>Wed, 23 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Please stop saying “The Tanimoto similarity is”</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-17-naming-similarity-metrics.html</link>
  <description><![CDATA[ 




<p>At both ICCS and the CADD GRC this year I noticed multiple people, either in talks or on posters, reporting the “Tanimoto similarity” between two (or more) molecules. This is an unfortunate shorthand because it leaves out a critical piece of information: what fingerprint did you use when doing the Tanimoto calculation? Without knowing that, it’s really not possible to make sense of what the reported similarity values actually mean.</p>
<p>This isn’t one of those examples of me being pedantic (or cranky); the Tanimoto similarities calculated using different fingerprints can be very, very different. I’ve written several blogs posts about this with more details, a couple of examples are <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">this post looking at the “noise threshold” of various fingerprints</a> and <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-21-similarity-search-thresholds.html">this one looking at what typical similarity values are between “closely related” compounds</a>.</p>
<p>As a quick illustration of this, I calculated the similarities between esomeprazole and lansoprazole, two molecules that look (to me at least) pretty similar:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-17-naming-similarity-metrics_files/figure-html/49e4f7ab-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<p>The Tanimoto similarity between these two molecules using the RDKit fingerprint is 0.79, using the Morgan2 fingerprint it’s 0.43. That’s a huge difference. If I had just said that the similarity was 0.43 and you guessed that I was using the RDKit fingerprint, which has a noise threshold of 0.51, you would conclude that the molecules are really not similar at all. With the Morgan2 fingerprint, on the other hand, 0.43 indicates two closely related molecules.</p>
<p>My concrete, and very easy to implement, suggestion: if you report a similarity value (in a talk, poster, paper, etc.) you should always mention the fingerprint used. So do something like “The Tanimoto similarity calculated using Morgan2 fingerprints was 0.43”. It’s not a lot of extra words, but it does allow your audience to understand what you actually did. And hopefully that’s a good thing.</p>
<p>The rest of this post is just the code to produce the image above, generate fingerprints, and calculate similarities.</p>
<div id="ef81c872" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.4</code></pre>
</div>
</div>
<div id="e06ac98c" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">esomeprazole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'COc1ccc2nc([nH]c2c1)[S@](=O)Cc1ncc(C)c(OC)c1C'</span>)</span>
<span id="cb3-2">lansoprazole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FC(F)(F)COc1ccnc(c1C)CS(=O)c2[nH]c3ccccc3n2'</span>)</span>
<span id="cb3-3">Draw.MolsToGridImage([esomeprazole, lansoprazole], </span>
<span id="cb3-4">    legends<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'esomeprazole'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lansoprazole'</span>], molsPerRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, subImgSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-17-naming-similarity-metrics_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="f115df66" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">rdk_fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetRDKitFPGenerator()</span>
<span id="cb4-2">mfp_fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-3">rdk_fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [rdk_fpg.GetFingerprint(mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [esomeprazole, lansoprazole]]</span>
<span id="cb4-4">mfp_fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mfp_fpg.GetFingerprint(mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> mol <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [esomeprazole, lansoprazole]]</span>
<span id="cb4-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RDKit fingerprint similarity:'</span>, DataStructs.TanimotoSimilarity(rdk_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], rdk_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb4-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Morgan fingerprint similarity:'</span>, DataStructs.TanimotoSimilarity(mfp_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], mfp_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RDKit fingerprint similarity: 0.7943722943722944
Morgan fingerprint similarity: 0.4264705882352941</code></pre>
</div>
</div>
<p>Out of curiousity, what are the Dice similarities between those fingerprints?</p>
<div id="3ef5bdff" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RDKit fingerprint similarity:'</span>, DataStructs.DiceSimilarity(rdk_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], rdk_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Morgan fingerprint similarity:'</span>, DataStructs.DiceSimilarity(mfp_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], mfp_fps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RDKit fingerprint similarity: 0.8854041013268998
Morgan fingerprint similarity: 0.5979381443298969</code></pre>
</div>
</div>



 ]]></description>
  <category>similarity</category>
  <category>fingerprints</category>
  <category>rants</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-17-naming-similarity-metrics.html</guid>
  <pubDate>Wed, 16 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Picking a small set of diverse molecules from a large set</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods.html</link>
  <description><![CDATA[ 




<p>This is expanded and updated version of a <a href="https://rdkit.blogspot.com/2014/08/picking-diverse-compounds-from-large.html">much older post</a>.</p>
<p>This post explores two different approaches for picking diverse small subsets of compounds from large sets: random selection and the MaxMin algorithm (Ashton, M. et. al., Quant. Struct.-Act. Relat., 21 (2002), 598-604).</p>
<p>The TL;DR is that if you want to pick a small number of compounds from a large set, the fastest way (by far) to do so is to just randomly select compounds.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw,rdMolProcessing,rdFingerprintGenerator</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SimDivFilters,DataStructs</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(time.asctime())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3
Thu Jul 10 06:21:44 2025</code></pre>
</div>
</div>
<p>Start by getting a copy of the ChEMBL35 SDF using the <a href="https://github.com/cthoyt/chembl-downloader"><code>chembl_downloader</code></a>.</p>
<div id="cell-4" class="cell" data-scrolled="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chembl_downloader</span>
<span id="cb3-2">sdName <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chembl_downloader.download_sdf(version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'35'</span>)</span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(sdName)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/glandrum/.data/chembl/35/chembl_35.sdf.gz</code></pre>
</div>
</div>
<p>Efficiently generate the fingerprints using the <a href="http://localhost:8888/notebooks/2024_New_Stuff.ipynb#rdMolProcessing"><code>rdMolProcessing</code></a> package:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb5-2"></span>
<span id="cb5-3">fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5">opts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdMolProcessing.SupplierOptions()</span>
<span id="cb5-6">opts.numThreads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rdBase.BlockLogs():</span>
<span id="cb5-9">    t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() </span>
<span id="cb5-10">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdMolProcessing.GetFingerprintsForMolsInFile(sdName,options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>opts,generator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg)</span>
<span id="cb5-11">    t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time.time()</span>
<span id="cb5-12">fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb5-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">s, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> fingerprints.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>60.71s, 2474577 fingerprints.</code></pre>
</div>
</div>
<p>Now do a standard diversity pick of 1000 compounds using the RDKit’s MaxMinPicker and Roger Sayle’s <a href="https://github.com/rdkit/UGM_2017/blob/master/Presentations/Sayle_RDKitDiversity_Berlin17.pdf">lazy bit vector picker</a>:</p>
<div id="cell-8" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb7-2">mmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SimDivFilters.MaxMinPicker()</span>
<span id="cb7-3">t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time.time()</span>
<span id="cb7-4">bv_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mmp.LazyBitVectorPick(fps,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fps),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb7-5">t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time.time()</span>
<span id="cb7-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"That took </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(t2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>t1))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>That took 13.514 seconds</code></pre>
</div>
</div>
<p>Assess the diversity by looking at a histogram of similarities between the picked compounds:</p>
<div id="cell-10" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dist_hist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(bv_ids)):</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(bv_ids)):</span>
<span id="cb9-4">        dist_hist.append(DataStructs.TanimotoSimilarity(fps[bv_ids[i]],fps[bv_ids[j]]))</span>
<span id="cb9-5"></span>
<span id="cb9-6">plt.hist(dist_hist,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb9-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MaxMin Picks"</span>)</span>
<span id="cb9-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Similarity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That definitely yields compounds that have a low similarity to each other.</p>
<p>An alternative, and much faster, method for picking small diverse subsets from a large set is to simply randomly pick. Let’s see how that does here:</p>
<div id="cell-12" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb10-2">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xa100f</span>)</span>
<span id="cb10-3">rr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fps)))</span>
<span id="cb10-4">random.shuffle(rr)</span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is our random pick, it takes no time at all</span></span>
<span id="cb10-6">r_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rr[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb10-7"></span></code></pre></div>
</div>
<p>Now look at the similarities between the picked fingerprints:</p>
<div id="cell-14" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">rfps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fps[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> r_ids]</span>
<span id="cb11-2">dist_hist2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rfps)):</span>
<span id="cb11-4">    dist_hist2.extend(DataStructs.BulkTanimotoSimilarity(rfps[i],rfps[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]))</span>
<span id="cb11-5">plt.hist(dist_hist2,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb11-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Picks"</span>)</span>
<span id="cb11-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Similarity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>At first glance, it looks like the random picks are much less diverse than the picks with the MaxMin algorithm: the peak in the first histogram is significantly shifted to higher similarity.</p>
<p>However: there is an important detail to keep in mind: the “noise level” of the fingerprint. In an [earlier post] (https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html), I looked at similarities between random pairs of “drug-like” compounds from ChEMBL in order to identify thresholds for when a similarity value is at the noise level (defined by finding the value which 99% of random pairs have a lower similarity). For the fingerprint used here, Morgan2, this value is 0.226.</p>
<p>Using that cutoff, we can easily figure out what fraction of the pairs in the set above are “noise”:</p>
<div id="cell-16" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.226</span></span>
<span id="cb12-2">count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dist_hist2 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>noise])</span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Count: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, fraction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dist_hist2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Count: 492873, fraction: 0.9867327327327328</code></pre>
</div>
</div>
<p>So almost 99% of the pairs are below the noise level, exactly what we would expect for random pairs based on the <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">similarity thresholds blog post</a>.</p>
<p>If we really, really don’t want any picks to have a similarity above the threshold, we can modify the random picking approach slightly to make sure we don’t accidentally add a close neighbor:</p>
<div id="cell-19" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.226</span></span>
<span id="cb14-2">nPicks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb14-5">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xa100f</span>)</span>
<span id="cb14-6">rr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fps)))</span>
<span id="cb14-7">random.shuffle(rr)</span>
<span id="cb14-8"></span>
<span id="cb14-9">rfps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fps[rr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]]</span>
<span id="cb14-10">r_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [rr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb14-11">which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_ids) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> nPicks:</span>
<span id="cb14-13">    rj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rr[which]</span>
<span id="cb14-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(DataStructs.BulkTanimotoSimilarity(fps[rj],rfps))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>noise:</span>
<span id="cb14-15">        r_ids.append(rj)</span>
<span id="cb14-16">        rfps.append(fps[rj])</span>
<span id="cb14-17">    which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-18"></span></code></pre></div>
</div>
<p>This takes a bit longer but gets us the desired result:</p>
<div id="cell-21" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">rfps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fps[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> r_ids]</span>
<span id="cb15-2">dist_hist2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rfps)):</span>
<span id="cb15-4">    dist_hist2.extend(DataStructs.BulkTanimotoSimilarity(rfps[i],rfps[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]))</span>
<span id="cb15-5">plt.hist(dist_hist2,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb15-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filtered Random Picks"</span>)</span>
<span id="cb15-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Similarity"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-22" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.226</span></span>
<span id="cb16-2">count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dist_hist2 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>noise])</span>
<span id="cb16-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Count: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, fraction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dist_hist2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-4"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Count: 499500, fraction: 1.0</code></pre>
</div>
</div>
<p><strong>Fazit:</strong> randomly picking small numbers of compounds from the large set gives subsets that are quite diverse. It’s also a lot quicker than using the diversity picker: not only can we skip the diversity picking algorithm, but the molecules and fingerprints don’t even need to be constructed.</p>
<p>Clearly this is not going to work as well when picking from compounds that are reasonably closely related to each other, but for small subsets of large diverse sets, random picking is a solid approach.</p>



 ]]></description>
  <category>similarity</category>
  <category>fingerprints</category>
  <category>tutorial</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-10-diversity-picking-methods.html</guid>
  <pubDate>Wed, 09 Jul 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/diversity-picking-methods1.png" medium="image" type="image/png" height="114" width="144"/>
</item>
<item>
  <title>The impact of molecular size on similarity between very closely related molecules.</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-07-04-size-and-similarity-molecular-changes.html</link>
  <description><![CDATA[ 




<p>This post adapts the analysis I did previously of the <a href="https://greglandrum.github.io/rdkit-blog/posts/2024-05-14-similarity-and-centrality.html">impact of single-atom changes on calculated similarity</a> to take into account molecule size. It’s kind of kind of a “part 2” of the <a href="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1.html">post looking at the impact of molecular size on similarity</a></p>
<p>For the analysis I use the same sets (tranches) of molecules collected from PubChem in <a href="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1.html">part 1</a>. I randomly selected 10K molecules from each tranche. The code for determining the impact of single-atom changes in each molecule is the same as the <a href="https://greglandrum.github.io/rdkit-blog/posts/2024-05-14-similarity-and-centrality.html">earlier post</a>.</p>
<p>The results look like this:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>fp</th>
<th>type</th>
<th>tranche</th>
<th>shift</th>
<th>90%</th>
<th>95%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>10</td>
<td>0.46(0.11)</td>
<td>0.32</td>
<td>0.29</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>bits</td>
<td>20</td>
<td>0.64(0.09)</td>
<td>0.52</td>
<td>0.48</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>30</td>
<td>0.71(0.08)</td>
<td>0.60</td>
<td>0.57</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>bits</td>
<td>40</td>
<td>0.77(0.07)</td>
<td>0.68</td>
<td>0.66</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>50</td>
<td>0.80(0.06)</td>
<td>0.72</td>
<td>0.69</td>
</tr>
</tbody>
</table>
<p>As before, we can think about these values as thresholds for retrieving extremely similar molecules; here we define that to mean molecules that have the same connectivity and differ in the identity of a single atom.</p>
<p>When working with molecules with between 10 and 20 atoms and using the MFP2 fingerprint (Morgan fingerprint with radius 2) we need to use a Tanimoto similarity threshold of 0.48 to be 95% certain of retrieving extremely similar molecules. The threshold goes up to 0.66 when working with molecules with between 30 and 40 atoms. The average similarity between extremely similar molecules with between 10 and 20 atoms is 0.64 with a standard deviation of 0.09.</p>
<p>Unsurprisingly, the values increase with the size of the molecules in the tranche. This holds for all of the fingerprints.</p>
<p>Here’s the giant table of numbers:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>fp</th>
<th>type</th>
<th>tranche</th>
<th>shift</th>
<th>90%</th>
<th>95%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>MFP0</td>
<td>counts</td>
<td>10</td>
<td>0.77(0.07)</td>
<td>0.75</td>
<td>0.67</td>
</tr>
<tr class="even">
<td>MFP0</td>
<td>counts</td>
<td>20</td>
<td>0.89(0.02)</td>
<td>0.87</td>
<td>0.86</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>counts</td>
<td>30</td>
<td>0.92(0.01)</td>
<td>0.90</td>
<td>0.90</td>
</tr>
<tr class="even">
<td>MFP0</td>
<td>counts</td>
<td>40</td>
<td>0.94(0.00)</td>
<td>0.94</td>
<td>0.94</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>counts</td>
<td>50</td>
<td>0.96(0.00)</td>
<td>0.95</td>
<td>0.95</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>counts</td>
<td>10</td>
<td>0.61(0.09)</td>
<td>0.50</td>
<td>0.45</td>
</tr>
<tr class="odd">
<td>MFP1</td>
<td>counts</td>
<td>20</td>
<td>0.78(0.04)</td>
<td>0.73</td>
<td>0.70</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>counts</td>
<td>30</td>
<td>0.84(0.03)</td>
<td>0.80</td>
<td>0.78</td>
</tr>
<tr class="odd">
<td>MFP1</td>
<td>counts</td>
<td>40</td>
<td>0.88(0.02)</td>
<td>0.86</td>
<td>0.85</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>counts</td>
<td>50</td>
<td>0.91(0.02)</td>
<td>0.89</td>
<td>0.88</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>counts</td>
<td>10</td>
<td>0.49(0.10)</td>
<td>0.36</td>
<td>0.33</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>counts</td>
<td>20</td>
<td>0.68(0.08)</td>
<td>0.58</td>
<td>0.55</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>counts</td>
<td>30</td>
<td>0.75(0.06)</td>
<td>0.68</td>
<td>0.66</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>counts</td>
<td>40</td>
<td>0.82(0.04)</td>
<td>0.76</td>
<td>0.75</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>counts</td>
<td>50</td>
<td>0.85(0.04)</td>
<td>0.81</td>
<td>0.80</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>counts</td>
<td>10</td>
<td>0.44(0.10)</td>
<td>0.32</td>
<td>0.29</td>
</tr>
<tr class="odd">
<td>MFP3</td>
<td>counts</td>
<td>20</td>
<td>0.60(0.10)</td>
<td>0.47</td>
<td>0.44</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>counts</td>
<td>30</td>
<td>0.68(0.08)</td>
<td>0.58</td>
<td>0.55</td>
</tr>
<tr class="odd">
<td>MFP3</td>
<td>counts</td>
<td>40</td>
<td>0.75(0.07)</td>
<td>0.67</td>
<td>0.65</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>counts</td>
<td>50</td>
<td>0.80(0.06)</td>
<td>0.73</td>
<td>0.71</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>bits</td>
<td>10</td>
<td>0.77(0.10)</td>
<td>0.67</td>
<td>0.60</td>
</tr>
<tr class="even">
<td>MFP0</td>
<td>bits</td>
<td>20</td>
<td>0.87(0.05)</td>
<td>0.80</td>
<td>0.78</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>bits</td>
<td>30</td>
<td>0.89(0.04)</td>
<td>0.82</td>
<td>0.80</td>
</tr>
<tr class="even">
<td>MFP0</td>
<td>bits</td>
<td>40</td>
<td>0.91(0.03)</td>
<td>0.86</td>
<td>0.83</td>
</tr>
<tr class="odd">
<td>MFP0</td>
<td>bits</td>
<td>50</td>
<td>0.91(0.04)</td>
<td>0.86</td>
<td>0.83</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>bits</td>
<td>10</td>
<td>0.59(0.11)</td>
<td>0.47</td>
<td>0.41</td>
</tr>
<tr class="odd">
<td>MFP1</td>
<td>bits</td>
<td>20</td>
<td>0.75(0.07)</td>
<td>0.67</td>
<td>0.63</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>bits</td>
<td>30</td>
<td>0.80(0.06)</td>
<td>0.73</td>
<td>0.71</td>
</tr>
<tr class="odd">
<td>MFP1</td>
<td>bits</td>
<td>40</td>
<td>0.84(0.05)</td>
<td>0.78</td>
<td>0.76</td>
</tr>
<tr class="even">
<td>MFP1</td>
<td>bits</td>
<td>50</td>
<td>0.86(0.05)</td>
<td>0.80</td>
<td>0.78</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>10</td>
<td>0.46(0.11)</td>
<td>0.32</td>
<td>0.29</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>bits</td>
<td>20</td>
<td>0.64(0.09)</td>
<td>0.52</td>
<td>0.48</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>30</td>
<td>0.71(0.08)</td>
<td>0.60</td>
<td>0.57</td>
</tr>
<tr class="even">
<td>MFP2</td>
<td>bits</td>
<td>40</td>
<td>0.77(0.07)</td>
<td>0.68</td>
<td>0.66</td>
</tr>
<tr class="odd">
<td>MFP2</td>
<td>bits</td>
<td>50</td>
<td>0.80(0.06)</td>
<td>0.72</td>
<td>0.69</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>bits</td>
<td>10</td>
<td>0.41(0.11)</td>
<td>0.29</td>
<td>0.26</td>
</tr>
<tr class="odd">
<td>MFP3</td>
<td>bits</td>
<td>20</td>
<td>0.55(0.11)</td>
<td>0.41</td>
<td>0.37</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>bits</td>
<td>30</td>
<td>0.63(0.10)</td>
<td>0.50</td>
<td>0.46</td>
</tr>
<tr class="odd">
<td>MFP3</td>
<td>bits</td>
<td>40</td>
<td>0.70(0.09)</td>
<td>0.59</td>
<td>0.56</td>
</tr>
<tr class="even">
<td>MFP3</td>
<td>bits</td>
<td>50</td>
<td>0.74(0.08)</td>
<td>0.64</td>
<td>0.60</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>counts</td>
<td>10</td>
<td>0.91(0.13)</td>
<td>0.75</td>
<td>0.71</td>
</tr>
<tr class="even">
<td>FFP0</td>
<td>counts</td>
<td>20</td>
<td>0.96(0.06)</td>
<td>0.88</td>
<td>0.86</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>counts</td>
<td>30</td>
<td>0.98(0.04)</td>
<td>0.91</td>
<td>0.90</td>
</tr>
<tr class="even">
<td>FFP0</td>
<td>counts</td>
<td>40</td>
<td>0.98(0.03)</td>
<td>0.94</td>
<td>0.94</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>counts</td>
<td>50</td>
<td>0.99(0.02)</td>
<td>0.95</td>
<td>0.95</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>counts</td>
<td>10</td>
<td>0.85(0.20)</td>
<td>0.57</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td>FFP1</td>
<td>counts</td>
<td>20</td>
<td>0.93(0.11)</td>
<td>0.77</td>
<td>0.73</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>counts</td>
<td>30</td>
<td>0.96(0.07)</td>
<td>0.84</td>
<td>0.82</td>
</tr>
<tr class="odd">
<td>FFP1</td>
<td>counts</td>
<td>40</td>
<td>0.97(0.05)</td>
<td>0.88</td>
<td>0.86</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>counts</td>
<td>50</td>
<td>0.98(0.04)</td>
<td>0.91</td>
<td>0.89</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>counts</td>
<td>10</td>
<td>0.81(0.25)</td>
<td>0.43</td>
<td>0.38</td>
</tr>
<tr class="even">
<td>FFP2</td>
<td>counts</td>
<td>20</td>
<td>0.90(0.15)</td>
<td>0.65</td>
<td>0.61</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>counts</td>
<td>30</td>
<td>0.94(0.11)</td>
<td>0.75</td>
<td>0.71</td>
</tr>
<tr class="even">
<td>FFP2</td>
<td>counts</td>
<td>40</td>
<td>0.96(0.08)</td>
<td>0.81</td>
<td>0.79</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>counts</td>
<td>50</td>
<td>0.97(0.06)</td>
<td>0.85</td>
<td>0.83</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>counts</td>
<td>10</td>
<td>0.79(0.27)</td>
<td>0.37</td>
<td>0.33</td>
</tr>
<tr class="odd">
<td>FFP3</td>
<td>counts</td>
<td>20</td>
<td>0.88(0.19)</td>
<td>0.56</td>
<td>0.51</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>counts</td>
<td>30</td>
<td>0.92(0.14)</td>
<td>0.67</td>
<td>0.62</td>
</tr>
<tr class="odd">
<td>FFP3</td>
<td>counts</td>
<td>40</td>
<td>0.94(0.11)</td>
<td>0.74</td>
<td>0.71</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>counts</td>
<td>50</td>
<td>0.95(0.09)</td>
<td>0.79</td>
<td>0.76</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>bits</td>
<td>10</td>
<td>0.92(0.16)</td>
<td>0.67</td>
<td>0.50</td>
</tr>
<tr class="even">
<td>FFP0</td>
<td>bits</td>
<td>20</td>
<td>0.96(0.11)</td>
<td>0.80</td>
<td>0.71</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>bits</td>
<td>30</td>
<td>0.97(0.08)</td>
<td>0.86</td>
<td>0.80</td>
</tr>
<tr class="even">
<td>FFP0</td>
<td>bits</td>
<td>40</td>
<td>0.98(0.06)</td>
<td>1.00</td>
<td>0.83</td>
</tr>
<tr class="odd">
<td>FFP0</td>
<td>bits</td>
<td>50</td>
<td>0.99(0.05)</td>
<td>1.00</td>
<td>0.86</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>bits</td>
<td>10</td>
<td>0.84(0.22)</td>
<td>0.50</td>
<td>0.43</td>
</tr>
<tr class="odd">
<td>FFP1</td>
<td>bits</td>
<td>20</td>
<td>0.92(0.14)</td>
<td>0.69</td>
<td>0.62</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>bits</td>
<td>30</td>
<td>0.95(0.11)</td>
<td>0.77</td>
<td>0.71</td>
</tr>
<tr class="odd">
<td>FFP1</td>
<td>bits</td>
<td>40</td>
<td>0.96(0.08)</td>
<td>0.83</td>
<td>0.78</td>
</tr>
<tr class="even">
<td>FFP1</td>
<td>bits</td>
<td>50</td>
<td>0.97(0.06)</td>
<td>0.88</td>
<td>0.82</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>bits</td>
<td>10</td>
<td>0.78(0.28)</td>
<td>0.35</td>
<td>0.29</td>
</tr>
<tr class="even">
<td>FFP2</td>
<td>bits</td>
<td>20</td>
<td>0.88(0.19)</td>
<td>0.56</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>bits</td>
<td>30</td>
<td>0.92(0.14)</td>
<td>0.66</td>
<td>0.60</td>
</tr>
<tr class="even">
<td>FFP2</td>
<td>bits</td>
<td>40</td>
<td>0.94(0.11)</td>
<td>0.74</td>
<td>0.69</td>
</tr>
<tr class="odd">
<td>FFP2</td>
<td>bits</td>
<td>50</td>
<td>0.95(0.09)</td>
<td>0.79</td>
<td>0.74</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>bits</td>
<td>10</td>
<td>0.76(0.30)</td>
<td>0.30</td>
<td>0.25</td>
</tr>
<tr class="odd">
<td>FFP3</td>
<td>bits</td>
<td>20</td>
<td>0.85(0.23)</td>
<td>0.45</td>
<td>0.39</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>bits</td>
<td>30</td>
<td>0.90(0.18)</td>
<td>0.57</td>
<td>0.51</td>
</tr>
<tr class="odd">
<td>FFP3</td>
<td>bits</td>
<td>40</td>
<td>0.92(0.14)</td>
<td>0.66</td>
<td>0.60</td>
</tr>
<tr class="even">
<td>FFP3</td>
<td>bits</td>
<td>50</td>
<td>0.94(0.12)</td>
<td>0.72</td>
<td>0.66</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>counts</td>
<td>10</td>
<td>0.36(0.19)</td>
<td>0.13</td>
<td>0.09</td>
</tr>
<tr class="even">
<td>RDK5</td>
<td>counts</td>
<td>20</td>
<td>0.59(0.18)</td>
<td>0.35</td>
<td>0.29</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>counts</td>
<td>30</td>
<td>0.69(0.14)</td>
<td>0.49</td>
<td>0.43</td>
</tr>
<tr class="even">
<td>RDK5</td>
<td>counts</td>
<td>40</td>
<td>0.77(0.12)</td>
<td>0.60</td>
<td>0.55</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>counts</td>
<td>50</td>
<td>0.81(0.10)</td>
<td>0.66</td>
<td>0.62</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>counts</td>
<td>10</td>
<td>0.30(0.16)</td>
<td>0.11</td>
<td>0.08</td>
</tr>
<tr class="odd">
<td>RDK7</td>
<td>counts</td>
<td>20</td>
<td>0.53(0.20)</td>
<td>0.27</td>
<td>0.22</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>counts</td>
<td>30</td>
<td>0.64(0.17)</td>
<td>0.40</td>
<td>0.35</td>
</tr>
<tr class="odd">
<td>RDK7</td>
<td>counts</td>
<td>40</td>
<td>0.73(0.14)</td>
<td>0.53</td>
<td>0.47</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>counts</td>
<td>50</td>
<td>0.79(0.13)</td>
<td>0.60</td>
<td>0.55</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>bits</td>
<td>10</td>
<td>0.36(0.18)</td>
<td>0.14</td>
<td>0.11</td>
</tr>
<tr class="even">
<td>RDK5</td>
<td>bits</td>
<td>20</td>
<td>0.59(0.17)</td>
<td>0.36</td>
<td>0.30</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>bits</td>
<td>30</td>
<td>0.68(0.15)</td>
<td>0.47</td>
<td>0.42</td>
</tr>
<tr class="even">
<td>RDK5</td>
<td>bits</td>
<td>40</td>
<td>0.76(0.13)</td>
<td>0.58</td>
<td>0.52</td>
</tr>
<tr class="odd">
<td>RDK5</td>
<td>bits</td>
<td>50</td>
<td>0.79(0.12)</td>
<td>0.62</td>
<td>0.57</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>bits</td>
<td>10</td>
<td>0.30(0.16)</td>
<td>0.12</td>
<td>0.09</td>
</tr>
<tr class="odd">
<td>RDK7</td>
<td>bits</td>
<td>20</td>
<td>0.55(0.19)</td>
<td>0.31</td>
<td>0.26</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>bits</td>
<td>30</td>
<td>0.68(0.16)</td>
<td>0.46</td>
<td>0.41</td>
</tr>
<tr class="odd">
<td>RDK7</td>
<td>bits</td>
<td>40</td>
<td>0.79(0.13)</td>
<td>0.61</td>
<td>0.55</td>
</tr>
<tr class="even">
<td>RDK7</td>
<td>bits</td>
<td>50</td>
<td>0.84(0.11)</td>
<td>0.68</td>
<td>0.63</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>counts</td>
<td>10</td>
<td>0.38(0.24)</td>
<td>0.00</td>
<td>0.00</td>
</tr>
<tr class="even">
<td>TT</td>
<td>counts</td>
<td>20</td>
<td>0.63(0.17)</td>
<td>0.41</td>
<td>0.35</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>counts</td>
<td>30</td>
<td>0.72(0.13)</td>
<td>0.55</td>
<td>0.50</td>
</tr>
<tr class="even">
<td>TT</td>
<td>counts</td>
<td>40</td>
<td>0.79(0.10)</td>
<td>0.66</td>
<td>0.62</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>counts</td>
<td>50</td>
<td>0.84(0.08)</td>
<td>0.72</td>
<td>0.69</td>
</tr>
<tr class="even">
<td>TT</td>
<td>bits</td>
<td>10</td>
<td>0.41(0.25)</td>
<td>0.08</td>
<td>0.00</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>bits</td>
<td>20</td>
<td>0.64(0.17)</td>
<td>0.41</td>
<td>0.35</td>
</tr>
<tr class="even">
<td>TT</td>
<td>bits</td>
<td>30</td>
<td>0.73(0.13)</td>
<td>0.55</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td>TT</td>
<td>bits</td>
<td>40</td>
<td>0.79(0.10)</td>
<td>0.66</td>
<td>0.62</td>
</tr>
<tr class="even">
<td>TT</td>
<td>bits</td>
<td>50</td>
<td>0.83(0.09)</td>
<td>0.71</td>
<td>0.68</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>counts</td>
<td>10</td>
<td>0.61(0.09)</td>
<td>0.56</td>
<td>0.50</td>
</tr>
<tr class="even">
<td>AP</td>
<td>counts</td>
<td>20</td>
<td>0.79(0.03)</td>
<td>0.75</td>
<td>0.73</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>counts</td>
<td>30</td>
<td>0.85(0.02)</td>
<td>0.82</td>
<td>0.82</td>
</tr>
<tr class="even">
<td>AP</td>
<td>counts</td>
<td>40</td>
<td>0.89(0.01)</td>
<td>0.88</td>
<td>0.88</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>counts</td>
<td>50</td>
<td>0.91(0.01)</td>
<td>0.90</td>
<td>0.90</td>
</tr>
<tr class="even">
<td>AP</td>
<td>bits</td>
<td>10</td>
<td>0.62(0.09)</td>
<td>0.56</td>
<td>0.50</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>bits</td>
<td>20</td>
<td>0.79(0.04)</td>
<td>0.75</td>
<td>0.72</td>
</tr>
<tr class="even">
<td>AP</td>
<td>bits</td>
<td>30</td>
<td>0.85(0.03)</td>
<td>0.82</td>
<td>0.81</td>
</tr>
<tr class="odd">
<td>AP</td>
<td>bits</td>
<td>40</td>
<td>0.89(0.02)</td>
<td>0.87</td>
<td>0.86</td>
</tr>
<tr class="even">
<td>AP</td>
<td>bits</td>
<td>50</td>
<td>0.91(0.02)</td>
<td>0.89</td>
<td>0.88</td>
</tr>
</tbody>
</table>
<div id="ebffc543" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:51:34.701035Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:51:34.588109Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-13">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tableau-colorblind10'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3</code></pre>
</div>
</div>
<div id="cf46a8c7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/pubchem_tranches.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb3-2">    mol_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(inf)</span></code></pre></div>
</div>
<p>We need to remove Hs from the input molecules, and we’ll only keep the first 10K from each tranche</p>
<div id="27c5b82a" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-2">random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xa100f</span>)</span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> rdBase.BlockLogs() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bl:</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb4-5">        nv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-6">        v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mol_accum[k]</span>
<span id="cb4-7">        random.shuffle(v)</span>
<span id="cb4-8">        v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>]</span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> v:</span>
<span id="cb4-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb4-11">                nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(m)</span>
<span id="cb4-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> Chem.MolSanitizeException:</span>
<span id="cb4-13">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb4-14">            nv.append(nm)</span>
<span id="cb4-15">        mol_accum[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nv</span></code></pre></div>
</div>
<div id="cf064a54" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:54:16.590442Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:54:16.588185Z&quot;}" data-scrolled="true" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum.values()])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10000, 10000, 10000, 10000, 10000]</code></pre>
</div>
</div>
<div id="96ded2cc" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb7-2">Draw.MolsToGridImage(mol_accum[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-07-04-size-and-similarity-molecular-changes_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Collect similarity values for bit-based and count-based fingerprints using</p>
<div id="20edfd98" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_modified_sims2(mol,maxRadius,fpgFunc,method):</span>
<span id="cb8-3">    fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpgFunc()</span>
<span id="cb8-4">    fpFunc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(fpg,method)</span>
<span id="cb8-5">    basefp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpFunc(mol)</span>
<span id="cb8-6">    dm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.GetDistanceMatrix(mol)</span>
<span id="cb8-7">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> aidx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mol.GetNumAtoms()):</span>
<span id="cb8-9">        nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mol)</span>
<span id="cb8-10">        nm.GetAtomWithIdx(aidx).SetAtomicNum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-11">        count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dm[aidx]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>maxRadius)</span>
<span id="cb8-12">        res.append((count,DataStructs.TanimotoSimilarity(basefp,fpFunc(nm))))</span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="4cca1eaf" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb9-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ipyparallel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ipp</span>
<span id="cb9-3">    rc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ipp.Client()</span>
<span id="cb9-4">    dview <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rc[:]</span>
<span id="cb9-5">    dview.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from rdkit import Chem'</span>)</span>
<span id="cb9-6">    dview.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from rdkit.Chem import rdFingerprintGenerator'</span>)</span>
<span id="cb9-7">    dview.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from rdkit import DataStructs'</span>)</span>
<span id="cb9-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb9-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"could not use ipyparallel"</span>)</span>
<span id="cb9-10">    dview <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<div id="72f93f4e" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb10-2">mfp_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb10-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-7">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r,fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>)</span>
<span id="cb10-8">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb10-9">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb10-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb10-11">            mfp_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb10-12">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb10-13">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb10-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb10-15">            mfp_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 0
tranche: 10, radius 1
tranche: 10, radius 2
tranche: 10, radius 3
tranche: 20, radius 0
tranche: 20, radius 1
tranche: 20, radius 2
tranche: 20, radius 3
tranche: 30, radius 0
tranche: 30, radius 1
tranche: 30, radius 2
tranche: 30, radius 3
tranche: 40, radius 0
tranche: 40, radius 1
tranche: 40, radius 2
tranche: 40, radius 3
tranche: 50, radius 0
tranche: 50, radius 1
tranche: 50, radius 2
tranche: 50, radius 3</code></pre>
</div>
</div>
<div id="5c52211d" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">ffp_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb12-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb12-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-6">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r,fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>,</span>
<span id="cb12-7">                                                                        atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen())</span>
<span id="cb12-8">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb12-9">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb12-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb12-11">            ffp_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb12-12">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb12-13">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb12-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb12-15">            ffp_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 0
tranche: 10, radius 1
tranche: 10, radius 2
tranche: 10, radius 3
tranche: 20, radius 0
tranche: 20, radius 1
tranche: 20, radius 2
tranche: 20, radius 3
tranche: 30, radius 0
tranche: 30, radius 1
tranche: 30, radius 2
tranche: 30, radius 3
tranche: 40, radius 0
tranche: 40, radius 1
tranche: 40, radius 2
tranche: 40, radius 3
tranche: 50, radius 0
tranche: 50, radius 1
tranche: 50, radius 2
tranche: 50, radius 3</code></pre>
</div>
</div>
<div id="11d67f68" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">rdk_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>):</span>
<span id="cb14-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-6">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r,fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>)</span>
<span id="cb14-7">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb14-8">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb14-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb14-10">            rdk_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb14-11">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb14-12">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb14-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb14-14">            rdk_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 5
tranche: 10, radius 7
tranche: 20, radius 5
tranche: 20, radius 7
tranche: 30, radius 5
tranche: 30, radius 7
tranche: 40, radius 5
tranche: 40, radius 7
tranche: 50, radius 5
tranche: 50, radius 7</code></pre>
</div>
</div>
<div id="9ea16496" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">tt_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb16-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,):</span>
<span id="cb16-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-6">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetTopologicalTorsionGenerator(fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>)</span>
<span id="cb16-7">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb16-8">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb16-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb16-10">            tt_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb16-11">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb16-12">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb16-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb16-14">            tt_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 3
tranche: 20, radius 3
tranche: 30, radius 3
tranche: 40, radius 3
tranche: 50, radius 3</code></pre>
</div>
</div>
<div id="8cffe41d" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">ap_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> : defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)))</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol_accum:</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,):</span>
<span id="cb18-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'tranche: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, radius </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>radius<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb18-6">        fpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius:rdFingerprintGenerator.GetAtomPairGenerator(fpSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>)</span>
<span id="cb18-7">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb18-8">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetCountFingerprint'</span>),mol_accum[k])</span>
<span id="cb18-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb18-10">            ap_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>][radius].extend(entry)</span>
<span id="cb18-11">        lres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dview.map_sync(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x,r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>radius,y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_modified_sims2,</span>
<span id="cb18-12">                              z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fpg:y(x,r,z,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GetFingerprint'</span>),mol_accum[k])</span>
<span id="cb18-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lres:</span>
<span id="cb18-14">            ap_accum[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>][radius].extend(entry)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tranche: 10, radius 3
tranche: 20, radius 3
tranche: 30, radius 3
tranche: 40, radius 3
tranche: 50, radius 3</code></pre>
</div>
</div>
<div id="356b3cc8" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_dict(dd):</span>
<span id="cb20-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(dd,defaultdict):</span>
<span id="cb20-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> copy.deepcopy(dd)</span>
<span id="cb20-5">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb20-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dd.items():</span>
<span id="cb20-7">        res[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_dict(v)</span>
<span id="cb20-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="f5322005" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb21-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/fp_perturbation.tranches.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb21-4">    pickle.dump((to_dict(mfp_accum),to_dict(ffp_accum),to_dict(rdk_accum),to_dict(ap_accum),to_dict(tt_accum)),outf)</span></code></pre></div>
</div>
<div id="eed4a3c0" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lh .<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fp_perturbation.tranches.pkl.gz</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-rw-rw-r-- 1 glandrum glandrum 85M Jul  3 16:16 ./results/fp_perturbation.tranches.pkl.gz</code></pre>
</div>
</div>
<div id="cf0110dd" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''| fp | type | tranche| shift | 90% | 95% |</span></span>
<span id="cb24-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">| -- | -- | -- | -- | -- | -- |'''</span>)</span>
<span id="cb24-3"></span>
<span id="cb24-4">rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb24-5">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MFP'</span></span>
<span id="cb24-6">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mfp_accum</span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-11">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-12">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-13">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-14">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>rad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-15">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FFP'</span></span>
<span id="cb24-16">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ffp_accum</span>
<span id="cb24-17"></span>
<span id="cb24-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-21">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-22">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-23">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-24">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>rad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-25"></span>
<span id="cb24-26">rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb24-27">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RDK'</span></span>
<span id="cb24-28">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdk_accum</span>
<span id="cb24-29"></span>
<span id="cb24-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-33">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-34">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-35">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-36">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>rad<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-37"></span>
<span id="cb24-38"></span>
<span id="cb24-39">rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, )</span>
<span id="cb24-40">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TT'</span></span>
<span id="cb24-41">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tt_accum</span>
<span id="cb24-42"></span>
<span id="cb24-43"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-46">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-47">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-48">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-49">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-50">            </span>
<span id="cb24-51">rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, )</span>
<span id="cb24-52">titl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AP'</span></span>
<span id="cb24-53">accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ap_accum</span>
<span id="cb24-54"></span>
<span id="cb24-55"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bits'</span>):</span>
<span id="cb24-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rad <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rs:</span>
<span id="cb24-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tranche <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb24-58">            tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accum[tranche]</span>
<span id="cb24-59">            yps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tacc[which][rad]]</span>
<span id="cb24-60">            qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(yps,[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>])</span>
<span id="cb24-61">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'| </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>titl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>which<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tranche<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>std(yps)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> |'</span>)</span>
<span id="cb24-62">         </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>| fp | type | tranche| shift | 90% | 95% |
| -- | -- | -- | -- | -- | -- |
| MFP0 | counts | 10 | 0.77(0.07) | 0.75 | 0.67 |
| MFP0 | counts | 20 | 0.89(0.02) | 0.87 | 0.86 |
| MFP0 | counts | 30 | 0.92(0.01) | 0.90 | 0.90 |
| MFP0 | counts | 40 | 0.94(0.00) | 0.94 | 0.94 |
| MFP0 | counts | 50 | 0.96(0.00) | 0.95 | 0.95 |
| MFP1 | counts | 10 | 0.61(0.09) | 0.50 | 0.45 |
| MFP1 | counts | 20 | 0.78(0.04) | 0.73 | 0.70 |
| MFP1 | counts | 30 | 0.84(0.03) | 0.80 | 0.78 |
| MFP1 | counts | 40 | 0.88(0.02) | 0.86 | 0.85 |
| MFP1 | counts | 50 | 0.91(0.02) | 0.89 | 0.88 |
| MFP2 | counts | 10 | 0.49(0.10) | 0.36 | 0.33 |
| MFP2 | counts | 20 | 0.68(0.08) | 0.58 | 0.55 |
| MFP2 | counts | 30 | 0.75(0.06) | 0.68 | 0.66 |
| MFP2 | counts | 40 | 0.82(0.04) | 0.76 | 0.75 |
| MFP2 | counts | 50 | 0.85(0.04) | 0.81 | 0.80 |
| MFP3 | counts | 10 | 0.44(0.10) | 0.32 | 0.29 |
| MFP3 | counts | 20 | 0.60(0.10) | 0.47 | 0.44 |
| MFP3 | counts | 30 | 0.68(0.08) | 0.58 | 0.55 |
| MFP3 | counts | 40 | 0.75(0.07) | 0.67 | 0.65 |
| MFP3 | counts | 50 | 0.80(0.06) | 0.73 | 0.71 |
| MFP0 | bits | 10 | 0.77(0.10) | 0.67 | 0.60 |
| MFP0 | bits | 20 | 0.87(0.05) | 0.80 | 0.78 |
| MFP0 | bits | 30 | 0.89(0.04) | 0.82 | 0.80 |
| MFP0 | bits | 40 | 0.91(0.03) | 0.86 | 0.83 |
| MFP0 | bits | 50 | 0.91(0.04) | 0.86 | 0.83 |
| MFP1 | bits | 10 | 0.59(0.11) | 0.47 | 0.41 |
| MFP1 | bits | 20 | 0.75(0.07) | 0.67 | 0.63 |
| MFP1 | bits | 30 | 0.80(0.06) | 0.73 | 0.71 |
| MFP1 | bits | 40 | 0.84(0.05) | 0.78 | 0.76 |
| MFP1 | bits | 50 | 0.86(0.05) | 0.80 | 0.78 |
| MFP2 | bits | 10 | 0.46(0.11) | 0.32 | 0.29 |
| MFP2 | bits | 20 | 0.64(0.09) | 0.52 | 0.48 |
| MFP2 | bits | 30 | 0.71(0.08) | 0.60 | 0.57 |
| MFP2 | bits | 40 | 0.77(0.07) | 0.68 | 0.66 |
| MFP2 | bits | 50 | 0.80(0.06) | 0.72 | 0.69 |
| MFP3 | bits | 10 | 0.41(0.11) | 0.29 | 0.26 |
| MFP3 | bits | 20 | 0.55(0.11) | 0.41 | 0.37 |
| MFP3 | bits | 30 | 0.63(0.10) | 0.50 | 0.46 |
| MFP3 | bits | 40 | 0.70(0.09) | 0.59 | 0.56 |
| MFP3 | bits | 50 | 0.74(0.08) | 0.64 | 0.60 |
| FFP0 | counts | 10 | 0.91(0.13) | 0.75 | 0.71 |
| FFP0 | counts | 20 | 0.96(0.06) | 0.88 | 0.86 |
| FFP0 | counts | 30 | 0.98(0.04) | 0.91 | 0.90 |
| FFP0 | counts | 40 | 0.98(0.03) | 0.94 | 0.94 |
| FFP0 | counts | 50 | 0.99(0.02) | 0.95 | 0.95 |
| FFP1 | counts | 10 | 0.85(0.20) | 0.57 | 0.50 |
| FFP1 | counts | 20 | 0.93(0.11) | 0.77 | 0.73 |
| FFP1 | counts | 30 | 0.96(0.07) | 0.84 | 0.82 |
| FFP1 | counts | 40 | 0.97(0.05) | 0.88 | 0.86 |
| FFP1 | counts | 50 | 0.98(0.04) | 0.91 | 0.89 |
| FFP2 | counts | 10 | 0.81(0.25) | 0.43 | 0.38 |
| FFP2 | counts | 20 | 0.90(0.15) | 0.65 | 0.61 |
| FFP2 | counts | 30 | 0.94(0.11) | 0.75 | 0.71 |
| FFP2 | counts | 40 | 0.96(0.08) | 0.81 | 0.79 |
| FFP2 | counts | 50 | 0.97(0.06) | 0.85 | 0.83 |
| FFP3 | counts | 10 | 0.79(0.27) | 0.37 | 0.33 |
| FFP3 | counts | 20 | 0.88(0.19) | 0.56 | 0.51 |
| FFP3 | counts | 30 | 0.92(0.14) | 0.67 | 0.62 |
| FFP3 | counts | 40 | 0.94(0.11) | 0.74 | 0.71 |
| FFP3 | counts | 50 | 0.95(0.09) | 0.79 | 0.76 |
| FFP0 | bits | 10 | 0.92(0.16) | 0.67 | 0.50 |
| FFP0 | bits | 20 | 0.96(0.11) | 0.80 | 0.71 |
| FFP0 | bits | 30 | 0.97(0.08) | 0.86 | 0.80 |
| FFP0 | bits | 40 | 0.98(0.06) | 1.00 | 0.83 |
| FFP0 | bits | 50 | 0.99(0.05) | 1.00 | 0.86 |
| FFP1 | bits | 10 | 0.84(0.22) | 0.50 | 0.43 |
| FFP1 | bits | 20 | 0.92(0.14) | 0.69 | 0.62 |
| FFP1 | bits | 30 | 0.95(0.11) | 0.77 | 0.71 |
| FFP1 | bits | 40 | 0.96(0.08) | 0.83 | 0.78 |
| FFP1 | bits | 50 | 0.97(0.06) | 0.88 | 0.82 |
| FFP2 | bits | 10 | 0.78(0.28) | 0.35 | 0.29 |
| FFP2 | bits | 20 | 0.88(0.19) | 0.56 | 0.50 |
| FFP2 | bits | 30 | 0.92(0.14) | 0.66 | 0.60 |
| FFP2 | bits | 40 | 0.94(0.11) | 0.74 | 0.69 |
| FFP2 | bits | 50 | 0.95(0.09) | 0.79 | 0.74 |
| FFP3 | bits | 10 | 0.76(0.30) | 0.30 | 0.25 |
| FFP3 | bits | 20 | 0.85(0.23) | 0.45 | 0.39 |
| FFP3 | bits | 30 | 0.90(0.18) | 0.57 | 0.51 |
| FFP3 | bits | 40 | 0.92(0.14) | 0.66 | 0.60 |
| FFP3 | bits | 50 | 0.94(0.12) | 0.72 | 0.66 |
| RDK5 | counts | 10 | 0.36(0.19) | 0.13 | 0.09 |
| RDK5 | counts | 20 | 0.59(0.18) | 0.35 | 0.29 |
| RDK5 | counts | 30 | 0.69(0.14) | 0.49 | 0.43 |
| RDK5 | counts | 40 | 0.77(0.12) | 0.60 | 0.55 |
| RDK5 | counts | 50 | 0.81(0.10) | 0.66 | 0.62 |
| RDK7 | counts | 10 | 0.30(0.16) | 0.11 | 0.08 |
| RDK7 | counts | 20 | 0.53(0.20) | 0.27 | 0.22 |
| RDK7 | counts | 30 | 0.64(0.17) | 0.40 | 0.35 |
| RDK7 | counts | 40 | 0.73(0.14) | 0.53 | 0.47 |
| RDK7 | counts | 50 | 0.79(0.13) | 0.60 | 0.55 |
| RDK5 | bits | 10 | 0.36(0.18) | 0.14 | 0.11 |
| RDK5 | bits | 20 | 0.59(0.17) | 0.36 | 0.30 |
| RDK5 | bits | 30 | 0.68(0.15) | 0.47 | 0.42 |
| RDK5 | bits | 40 | 0.76(0.13) | 0.58 | 0.52 |
| RDK5 | bits | 50 | 0.79(0.12) | 0.62 | 0.57 |
| RDK7 | bits | 10 | 0.30(0.16) | 0.12 | 0.09 |
| RDK7 | bits | 20 | 0.55(0.19) | 0.31 | 0.26 |
| RDK7 | bits | 30 | 0.68(0.16) | 0.46 | 0.41 |
| RDK7 | bits | 40 | 0.79(0.13) | 0.61 | 0.55 |
| RDK7 | bits | 50 | 0.84(0.11) | 0.68 | 0.63 |
| TT | counts | 10 | 0.38(0.24) | 0.00 | 0.00 |
| TT | counts | 20 | 0.63(0.17) | 0.41 | 0.35 |
| TT | counts | 30 | 0.72(0.13) | 0.55 | 0.50 |
| TT | counts | 40 | 0.79(0.10) | 0.66 | 0.62 |
| TT | counts | 50 | 0.84(0.08) | 0.72 | 0.69 |
| TT | bits | 10 | 0.41(0.25) | 0.08 | 0.00 |
| TT | bits | 20 | 0.64(0.17) | 0.41 | 0.35 |
| TT | bits | 30 | 0.73(0.13) | 0.55 | 0.50 |
| TT | bits | 40 | 0.79(0.10) | 0.66 | 0.62 |
| TT | bits | 50 | 0.83(0.09) | 0.71 | 0.68 |
| AP | counts | 10 | 0.61(0.09) | 0.56 | 0.50 |
| AP | counts | 20 | 0.79(0.03) | 0.75 | 0.73 |
| AP | counts | 30 | 0.85(0.02) | 0.82 | 0.82 |
| AP | counts | 40 | 0.89(0.01) | 0.88 | 0.88 |
| AP | counts | 50 | 0.91(0.01) | 0.90 | 0.90 |
| AP | bits | 10 | 0.62(0.09) | 0.56 | 0.50 |
| AP | bits | 20 | 0.79(0.04) | 0.75 | 0.72 |
| AP | bits | 30 | 0.85(0.03) | 0.82 | 0.81 |
| AP | bits | 40 | 0.89(0.02) | 0.87 | 0.86 |
| AP | bits | 50 | 0.91(0.02) | 0.89 | 0.88 |</code></pre>
</div>
</div>



 ]]></description>
  <category>reference</category>
  <category>similarity</category>
  <category>fingerprints</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-07-04-size-and-similarity-molecular-changes.html</guid>
  <pubDate>Thu, 03 Jul 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/size-and-similarity-molecular-changes.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>Sanitization options and molecule parsing.</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-06-27-sanitization-and-file-parsing.html</link>
  <description><![CDATA[ 




<p>This post looks at the options available for controlling how much chemistry perception and checking (sanitization) is done when parsing molecules and how those options interact. This gets pretty deep into the weeds, but I think it’s useful to capture this information somewhere. I definitely need to find the appropriate place in the documentation to put this.</p>
<div id="10451f0a" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3</code></pre>
</div>
</div>
<section id="working-with-smiles" class="level1">
<h1>Working with SMILES</h1>
<p>Let’s start by disabling both sanitization and H removal.</p>
<p>This results in a molecule where Hs haven’t been removed and no chemistry perception has been done:</p>
<div id="7130af68" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">smiles_with_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1=CC=CC=C1[H]'</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb3-4">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-5">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_h, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb3-8">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    1 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    2 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    3 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    4 6 C chg: 0  deg: 2 exp: N/A imp: N/A hyb: 
    5 6 C chg: 0  deg: 3 exp: N/A imp: N/A hyb: 
    6 1 H chg: 0  deg: 1 exp: N/A imp: 0 hyb: 
Bonds:
    0 0-&gt;1 order: 2
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 2
    3 3-&gt;4 order: 1
    4 4-&gt;5 order: 2
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: 1</code></pre>
</div>
</div>
<p>We can do sanitization without removing Hs:</p>
<div id="73a76a49" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb5-2">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb5-3">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_h, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb5-6">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    1 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    2 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    3 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    4 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    5 6 C chg: 0  deg: 3 exp: 4 imp: 0 hyb: SP2 arom?: 1
    6 1 H chg: 0  deg: 1 exp: 1 imp: 0 hyb: S
Bonds:
    0 0-&gt;1 order: a conj?: 1 aromatic?: 1
    1 1-&gt;2 order: a conj?: 1 aromatic?: 1
    2 2-&gt;3 order: a conj?: 1 aromatic?: 1
    3 3-&gt;4 order: a conj?: 1 aromatic?: 1
    4 4-&gt;5 order: a conj?: 1 aromatic?: 1
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: a conj?: 1 aromatic?: 1</code></pre>
</div>
</div>
<p>And we can remove Hs without doing sanitization:</p>
<div id="dadfa282" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb7-2">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-3">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_h, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb7-6">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    1 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    2 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    3 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    4 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: 
    5 6 C chg: 0  deg: 2 exp: 4 imp: 0 hyb: 
Bonds:
    0 0-&gt;1 order: 2
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 2
    3 3-&gt;4 order: 1
    4 4-&gt;5 order: 2
    5 5-&gt;0 order: 1</code></pre>
</div>
</div>
<p>As we will see later, the SDF/Mol file parser does <em>not</em> remove Hs when sanitization is not enabled. This inconsistency is the type of thing that is difficult to fix; doing so would break a lot of other peoples’ code.</p>
<p>One of the other steps that’s carried out when parsing molecules is cleaning up bad stereochemistry specifications. There’s no option enabling direct control over this step, but let’s see how the sanitization options affect that.</p>
<p>If we provide a molecule that has chirality indicated on an atom that’s not a chiral center, the standard parsing optios remove the chirality spec:</p>
<div id="2c6e65b8" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">smiles_with_bad_stereo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C[C@H](F)C"</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb9-4">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_bad_stereo, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb9-6">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: SP3
    1 6 C chg: 0  deg: 3 exp: 3 imp: 1 hyb: SP3
    2 9 F chg: 0  deg: 1 exp: 1 imp: 0 hyb: SP3
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: SP3
Bonds:
    0 0-&gt;1 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
<p>The stereo cleanup is done even when sanitization is disabled:</p>
<div id="3699662f" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb11-2">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-3">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_bad_stereo, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb11-4">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
    1 6 C chg: 0  deg: 3 exp: 3 imp: 1 hyb: 
    2 9 F chg: 0  deg: 1 exp: 1 imp: 0 hyb: 
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
Bonds:
    0 0-&gt;1 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
<p>Notice that, in this case, explicit and implicit valences have been assigned even though sanitization is disabled. This happens because the <code>AssignStereochemistry()</code> function needs valence information. In this case the values are calculated, but there’s no check to make sure that they make chemical sense (as would happen during normal sanitization):</p>
<div id="d1b79947" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">valence_too_high <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C[C@H](FC)C"</span></span>
<span id="cb13-2">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb13-3">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-4">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(valence_too_high, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb13-5">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
    1 6 C chg: 0  deg: 3 exp: 3 imp: 1 hyb: 
    2 9 F chg: 0  deg: 2 exp: 2 imp: 0 hyb: 
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
    4 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
Bonds:
    0 0-&gt;1 order: 1
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 1
    3 1-&gt;4 order: 1</code></pre>
</div>
</div>
<p>Here the two-valent F atom (atom 2) was accepted without complaint.</p>
<p>Skipping both sanitization and H removal also skips the call to <code>AssignStereochemistry()</code>, so the bad chirality specification is not removed (and no valences are calculated):</p>
<div id="ecf25e57" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb15-2">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-3">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-4">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_bad_stereo, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb15-5">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: N/A imp: N/A hyb: 
    1 6 C chg: 0  deg: 3 exp: N/A imp: 0 hyb:  chi: CCW nbrs:[0 2 3]
    2 9 F chg: 0  deg: 1 exp: N/A imp: N/A hyb: 
    3 6 C chg: 0  deg: 1 exp: N/A imp: N/A hyb: 
Bonds:
    0 0-&gt;1 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
</section>
<section id="working-with-sdf-and-mol-blocks" class="level1">
<h1>Working with SDF and Mol blocks</h1>
<div id="0703cb26" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">molb_with_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb17-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     RDKit          2D</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  0  0  0  0  0  0  0  0  0  0999 V3000</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN CTAB</span></span>
<span id="cb17-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 COUNTS 7 7 0 0 0</span></span>
<span id="cb17-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN ATOM</span></span>
<span id="cb17-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 1 C 1.500000 0.000000 0.000000 0</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 2 C 0.750000 -1.299038 0.000000 0</span></span>
<span id="cb17-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 3 C -0.750000 -1.299038 0.000000 0</span></span>
<span id="cb17-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 4 C -1.500000 0.000000 0.000000 0</span></span>
<span id="cb17-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 5 C -0.750000 1.299038 0.000000 0</span></span>
<span id="cb17-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 6 C 0.750000 1.299038 0.000000 0</span></span>
<span id="cb17-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 7 H 1.500000 2.598076 0.000000 0</span></span>
<span id="cb17-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END ATOM</span></span>
<span id="cb17-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN BOND</span></span>
<span id="cb17-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 1 2 1 2</span></span>
<span id="cb17-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 2 1 2 3</span></span>
<span id="cb17-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 3 2 3 4</span></span>
<span id="cb17-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 4 1 4 5</span></span>
<span id="cb17-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 5 2 5 6</span></span>
<span id="cb17-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 6 1 6 7</span></span>
<span id="cb17-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 7 1 6 1</span></span>
<span id="cb17-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END BOND</span></span>
<span id="cb17-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END CTAB</span></span>
<span id="cb17-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  END'''</span></span>
<span id="cb17-27">molb_with_bad_stereo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb17-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     RDKit          2D</span></span>
<span id="cb17-29"></span>
<span id="cb17-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  0  0  0  0  0  0  0  0  0  0999 V3000</span></span>
<span id="cb17-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN CTAB</span></span>
<span id="cb17-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 COUNTS 4 3 0 0 0</span></span>
<span id="cb17-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN ATOM</span></span>
<span id="cb17-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 1 C 0.000000 0.000000 0.000000 0</span></span>
<span id="cb17-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 2 C 1.299038 0.750000 0.000000 0</span></span>
<span id="cb17-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 3 F 1.299038 2.250000 0.000000 0</span></span>
<span id="cb17-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 4 C 2.598076 -0.000000 0.000000 0</span></span>
<span id="cb17-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END ATOM</span></span>
<span id="cb17-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 BEGIN BOND</span></span>
<span id="cb17-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 1 1 2 1 CFG=3</span></span>
<span id="cb17-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 2 1 2 3</span></span>
<span id="cb17-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 3 1 2 4</span></span>
<span id="cb17-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END BOND</span></span>
<span id="cb17-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  V30 END CTAB</span></span>
<span id="cb17-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M  END'''</span></span></code></pre></div>
</div>
<p>As with SMILES, we can disable sanitization and H removal and then very little chemistry perception or cleanup is done:</p>
<div id="c0937b85" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_h, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb18-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    1 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    2 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    3 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    4 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    5 6 C chg: 0  deg: 3 exp: 4 imp: N/A hyb: 
    6 1 H chg: 0  deg: 1 exp: 1 imp: N/A hyb: 
Bonds:
    0 0-&gt;1 order: 2
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 2
    3 3-&gt;4 order: 1
    4 4-&gt;5 order: 2
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: 1</code></pre>
</div>
</div>
<p>Unlike with the SMILES parser, setting removeHs to true with sanitize set to false has no effect:</p>
<div id="7060653d" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_h, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    1 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    2 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    3 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    4 6 C chg: 0  deg: 2 exp: 3 imp: N/A hyb: 
    5 6 C chg: 0  deg: 3 exp: 4 imp: N/A hyb: 
    6 1 H chg: 0  deg: 1 exp: 1 imp: N/A hyb: 
Bonds:
    0 0-&gt;1 order: 2
    1 1-&gt;2 order: 1
    2 2-&gt;3 order: 2
    3 3-&gt;4 order: 1
    4 4-&gt;5 order: 2
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: 1</code></pre>
</div>
</div>
<p>We can, of course sanitize without removing Hs:</p>
<div id="d600190c" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_h, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb22-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    1 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    2 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    3 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    4 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    5 6 C chg: 0  deg: 3 exp: 4 imp: 0 hyb: SP2 arom?: 1
    6 1 H chg: 0  deg: 1 exp: 1 imp: 0 hyb: S
Bonds:
    0 0-&gt;1 order: a conj?: 1 aromatic?: 1
    1 1-&gt;2 order: a conj?: 1 aromatic?: 1
    2 2-&gt;3 order: a conj?: 1 aromatic?: 1
    3 3-&gt;4 order: a conj?: 1 aromatic?: 1
    4 4-&gt;5 order: a conj?: 1 aromatic?: 1
    5 5-&gt;6 order: 1
    6 5-&gt;0 order: a conj?: 1 aromatic?: 1</code></pre>
</div>
</div>
<p>Now let’s look at the mol block with the bad stereo specification.</p>
<p>As before, without sanitization, the invalid chirality is assigned:</p>
<div id="ec92ac3e" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_bad_stereo, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb24-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: N/A hyb: 
    1 6 C chg: 0  deg: 3 exp: 4 imp: 0 hyb:  chi: CCW nbrs:[0 2 3]
    2 9 F chg: 0  deg: 1 exp: 1 imp: 0 hyb: 
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: 
Bonds:
    0 1-&gt;0 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
<p>But doing sanitization results in <code>AssignStereochemistry()</code> being called and the invalid stereo label is removed:</p>
<div id="c0a93df6" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(molb_with_bad_stereo, sanitize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, removeHs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb26-2">m.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: SP3
    1 6 C chg: 0  deg: 3 exp: 3 imp: 1 hyb: SP3
    2 9 F chg: 0  deg: 1 exp: 1 imp: 0 hyb: SP3
    3 6 C chg: 0  deg: 1 exp: 1 imp: 3 hyb: SP3
Bonds:
    0 1-&gt;0 order: 1
    1 1-&gt;2 order: 1
    2 1-&gt;3 order: 1</code></pre>
</div>
</div>
</section>
<section id="calling-the-sanitization-code-yourself" class="level1">
<h1>Calling the sanitization code yourself</h1>
<p>If you want to read molecules from either SMILES or a Mol block without either sanitization or H removal, do some checks and standardizations of your own, and then end up with a molecule with the same information as if you had parsed it normally, the steps are: 1. Parse without sanitization or H removal. 2. Remove Hs if you want to 3. Sanitize if you haven’t removed Hs (by default <code>RemoveHs()</code> will sanitize) 4. Call <code>AssignStereochemistry()</code></p>
<p>Here’s an example of that:</p>
<div id="f53898bd" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.SmilesParserParams()</span>
<span id="cb28-2">params.sanitize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-3">params.removeHs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-4"></span>
<span id="cb28-5">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(smiles_with_h, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do whatever cleanup and preprocessing you want to do</span></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb28-9">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mol)</span>
<span id="cb28-10">Chem.AssignStereochemistry(mol,force<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, cleanIt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, flagPossibleStereoCenters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb28-11"></span>
<span id="cb28-12">mol.Debug()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Atoms:
    0 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    1 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    2 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    3 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    4 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
    5 6 C chg: 0  deg: 2 exp: 3 imp: 1 hyb: SP2 arom?: 1
Bonds:
    0 0-&gt;1 order: a conj?: 1 aromatic?: 1
    1 1-&gt;2 order: a conj?: 1 aromatic?: 1
    2 2-&gt;3 order: a conj?: 1 aromatic?: 1
    3 3-&gt;4 order: a conj?: 1 aromatic?: 1
    4 4-&gt;5 order: a conj?: 1 aromatic?: 1
    5 5-&gt;0 order: a conj?: 1 aromatic?: 1</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>documentation</category>
  <category>technical</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-06-27-sanitization-and-file-parsing.html</guid>
  <pubDate>Thu, 26 Jun 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>The impact of molecular size on similarity.</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1.html</link>
  <description><![CDATA[ 




<p>[Post revised on 24.06.2025 to fix a mistake in the calculation of the FeatureMorgan fingerprints. Thanks to Kjell Jorner for pointing it out.]</p>
<p>This post is an exploration of the impact of molecule size on similarity thresholds for some of the fingerprints the RDKit supports. This is inspired by a question Kjell Jorner asked me earlier this week: “Are you aware of any studies (or blog posts) looking at the effect of molecular size on fingerprint similarity?”. I’m sure there are sources out there looking at this, but the question fits so well into my ongoing series of <a href="https://greglandrum.github.io/rdkit-blog/#category=similarity">posts about similarity</a> that I decided to just go ahead and do the analysis.</p>
<p>This post looks at the similarities between random molecules as a function of molecule size. I use a few of the fingerprints available in the RDKit. Along the way there’s also some info about the increase in the numbers of bits set in fingerprints as a function of molecule size.</p>
<p>It’s not as easy to summarize things here as it was when I looked at <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-18-fingerprint-thresholds1.html">similarity thresholds in general</a>, so there’s no big table here. The TLDR is that similarities (and thus thresholds) tend to increase with molecular size across all of the fingerprints. There may also be a small increase in the standard deviations of the similarity distributions as the molecules get larger, but since the distributions aren’t always gaussian (particularly for tranche 10), this is a weak signal.</p>
<p>It would also be interesting to try and look at the size dependence of the <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-05-21-similarity-search-thresholds.html">thresholds for related compounds</a>, but there it’s going to be a bit trickier to divide the results into reasonable tranches.</p>
<div id="ebffc543" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:51:34.701035Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:51:34.588109Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdBase</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-13">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tableau-colorblind10'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3</code></pre>
</div>
</div>
<p>I use the number of heavy atoms as a surrogate for molecule size and collect five different tranches: - 10: 1-9 heavy atoms - 20: 10-19 heavy atoms - 30: 20-29 heavy atoms - 40: 30-39 heavy atoms - 50: 40-49 heavy atoms</p>
<p>This is the code used to collect tranches which each contain at least 10K molecules from PubChem Compound.</p>
<pre><code>import random
fns = list(glob.glob('/fileserver/pine/pine1/glandrum/pubchem/Compound/Compound_*.sdf.gz'))

random.seed(0xa100f)
random.shuffle(fns)

accum = {10:[],20:[],30:[],40:[],50:[]}

def done(accum,tgt=2000):
    for k,v in accum.items():
        if len(v)&lt;tgt:
            return False
    return True

bl = rdBase.BlockLogs()
for fn in fns[:10]:
    print(fn)
    with gzip.open(fn,'rb') as inf:
        suppl = Chem.ForwardSDMolSupplier(inf,sanitize=False,removeHs=True)
        taccum = {10:[],20:[],30:[],40:[],50:[]}
        for i,mol in enumerate(suppl):
            if not mol:
                continue
            if len(Chem.GetMolFrags(mol))&gt;1:
                continue
            nAts = mol.GetNumHeavyAtoms()
            for k in accum:
                if nAts&lt;k:
                    taccum[k].append(mol)
                    break
            if not (i+1)%1000 and done(taccum):
                break
        for k in taccum:
            # take at most 5K/tranche/file
            accum[k].extend(taccum[k][:5000])
        print([len(v) for v in accum.values()])

bl = None       
with gzip.open('./results/pubchem_tranches.pkl.gz','wb+') as outf:
    pickle.dump(accum,outf)</code></pre>
<div id="cf46a8c7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/pubchem_tranches.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> inf:</span>
<span id="cb4-2">    accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.load(inf)</span></code></pre></div>
</div>
<div id="cf064a54" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:54:16.590442Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:54:16.588185Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum.values()])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10502, 50000, 50000, 31458, 28082]</code></pre>
</div>
</div>
<div id="96ded2cc" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb7-2">Draw.MolsToGridImage(accum[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Those have Hs on them, so we’ll need to be sure to call <code>RemoveHs()</code> below.</p>
<p>Collect similarity values for bit-based and count-based fingerprints using</p>
<div id="1e717b49" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2025-06-18T14:59:34.723342Z&quot;,&quot;start_time&quot;:&quot;2025-06-18T14:59:34.603716Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdFingerprintGenerator</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataStructs</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb8-5"></span>
<span id="cb8-6">fpgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp0'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb8-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp1'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb8-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb8-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp3'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb8-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp0'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-11">                                                         atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen()),</span>
<span id="cb8-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp1'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb8-13">                                                         atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen()),</span>
<span id="cb8-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp2'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-15">                                                         atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen()),</span>
<span id="cb8-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ffp3'</span>:rdFingerprintGenerator.GetMorganGenerator(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb8-17">                                                         atomInvariantsGenerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rdFingerprintGenerator.GetMorganFeatureAtomInvGen()),</span>
<span id="cb8-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk5'</span>:rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb8-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk7'</span>:rdFingerprintGenerator.GetRDKitFPGenerator(maxPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb8-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ap'</span>:rdFingerprintGenerator.GetAtomPairGenerator(),</span>
<span id="cb8-21">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tt'</span>:rdFingerprintGenerator.GetTopologicalTorsionGenerator(),</span>
<span id="cb8-22">       }</span>
<span id="cb8-23"></span>
<span id="cb8-24">bl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdBase.BlockLogs()</span>
<span id="cb8-25"></span>
<span id="cb8-26">sims_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb8-27">csims_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb8-28">bitcounts_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb8-29">cbitcounts_accum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)</span>
<span id="cb8-30"></span>
<span id="cb8-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum:</span>
<span id="cb8-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Doing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-33">    fps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="cb8-34">    cfps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="cb8-35">    nMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> generating fps'</span>)</span>
<span id="cb8-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum[k][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>]:</span>
<span id="cb8-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb8-39">            m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(m)</span>
<span id="cb8-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb8-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb8-42">        nMols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> nm,fpg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fpgs.items():</span>
<span id="cb8-44">            fp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetFingerprint(m)</span>
<span id="cb8-45">            fps[nm].append(fp)</span>
<span id="cb8-46">            cfp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fpg.GetSparseCountFingerprint(m)</span>
<span id="cb8-47">            cfps[nm].append(cfp)</span>
<span id="cb8-48">    random.seed(<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xf00d</span>)</span>
<span id="cb8-49">    indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nMols))</span>
<span id="cb8-50">    indices2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> indices[:]</span>
<span id="cb8-51">    pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pairs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>:</span>
<span id="cb8-53">        random.shuffle(indices)</span>
<span id="cb8-54">        random.shuffle(indices2)</span>
<span id="cb8-55">        pairs.extend(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indices,indices2))</span>
<span id="cb8-56">    pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pairs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>]</span>
<span id="cb8-57"></span>
<span id="cb8-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> calculating similarities'</span>)</span>
<span id="cb8-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps:</span>
<span id="cb8-60">        bitcounts_accum[fpn][k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x.GetNumOnBits() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fps[fpn]]</span>
<span id="cb8-61">        cbitcounts_accum[fpn][k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x.GetNonzeroElements()) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cfps[fpn]]</span>
<span id="cb8-62">        </span>
<span id="cb8-63">        sims_accum[fpn][k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [DataStructs.TanimotoSimilarity(fps[fpn][x],fps[fpn][y]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pairs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>y]</span>
<span id="cb8-64">        csims_accum[fpn][k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [DataStructs.TanimotoSimilarity(cfps[fpn][x],cfps[fpn][y]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pairs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span>y]</span>
<span id="cb8-65">                </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Doing 10
     generating fps
     calculating similarities
Doing 20
     generating fps
     calculating similarities
Doing 30
     generating fps
     calculating similarities
Doing 40
     generating fps
     calculating similarities
Doing 50
     generating fps
     calculating similarities</code></pre>
</div>
</div>
<div id="fee40ff5" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results/pubchem_tranches_accum.pkl.gz'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb+'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> outf:</span>
<span id="cb10-2">    pickle.dump((sims_accum,csims_accum,bitcounts_accum,cbitcounts_accum),outf)</span></code></pre></div>
</div>
<section id="similarity-stats" class="level1">
<h1>Similarity stats</h1>
<p>Let’s start by looking at the quantile values for the various molecule sizes.</p>
<div id="841548e6" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum:</span>
<span id="cb11-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'----- </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum[fpn]:</span>
<span id="cb11-4">        qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(sims_accum[fpn][k],(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>))</span>
<span id="cb11-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k,qs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----- mfp0
10 [0.2        0.25       0.33333333 0.4        0.55555556]
20 [0.36363636 0.41666667 0.5        0.54545455 0.66666667]
30 [0.41666667 0.46153846 0.53846154 0.6        0.72727273]
40 [0.5        0.53333333 0.6        0.66666667 0.76923077]
50 [0.52631579 0.5625     0.625      0.6875     0.78571429]
----- mfp1
10 [0.08333333 0.11111111 0.15       0.1875     0.26666667]
20 [0.16216216 0.18604651 0.22222222 0.25806452 0.35294118]
30 [0.1875     0.21212121 0.25       0.29411765 0.40912587]
40 [0.21212121 0.23333333 0.26666667 0.3        0.4       ]
50 [0.21126761 0.23188406 0.265625   0.3        0.45767458]
----- mfp2
10 [0.06060606 0.08       0.10810811 0.13333333 0.19230769]
20 [0.10769231 0.12307692 0.14705882 0.16949153 0.24137931]
30 [0.12       0.13513514 0.16049383 0.18666667 0.26229508]
40 [0.13274336 0.14583333 0.16666667 0.18811881 0.26436782]
50 [0.1328125  0.14634146 0.16806723 0.192      0.32352941]
----- mfp3
10 [0.05555556 0.07142857 0.09756098 0.12121212 0.17391304]
20 [0.08695652 0.09859155 0.11666667 0.13414634 0.1884058 ]
30 [0.09433962 0.10526316 0.12380952 0.14285714 0.19753086]
40 [0.1038961  0.11333333 0.12804878 0.14383562 0.19627336]
50 [0.10497238 0.11458333 0.13068182 0.1474359  0.25      ]
----- ffp0
10 [0.5        0.6        0.66666667 0.8        1.        ]
20 [0.5        0.6        0.66666667 0.8        1.        ]
30 [0.6        0.66666667 0.75       0.83333333 1.        ]
40 [0.66666667 0.71428571 0.8        0.83333333 1.        ]
50 [0.66666667 0.66666667 0.8        0.83333333 1.        ]
----- ffp1
10 [0.21052632 0.25       0.33333333 0.38461538 0.54545455]
20 [0.25       0.29166667 0.34615385 0.4        0.52173913]
30 [0.28571429 0.32142857 0.375      0.43478261 0.57894737]
40 [0.31428571 0.34375    0.39393939 0.44       0.56      ]
50 [0.31707317 0.35       0.39534884 0.44444444 0.6       ]
----- ffp2
10 [0.13333333 0.16       0.2        0.23809524 0.33333333]
20 [0.1509434  0.17307692 0.20754717 0.24137931 0.32432432]
30 [0.16981132 0.19117647 0.22641509 0.26086957 0.36171313]
40 [0.17741935 0.19642857 0.22535211 0.25396825 0.34782609]
50 [0.17647059 0.19444444 0.22352941 0.25301205 0.40230165]
----- ffp3
10 [0.11764706 0.13888889 0.17647059 0.21052632 0.3       ]
20 [0.11267606 0.12820513 0.15151515 0.17460317 0.23728814]
30 [0.12087912 0.13541667 0.15957447 0.18333333 0.25287772]
40 [0.125      0.13709677 0.15602837 0.17592593 0.24175824]
50 [0.12318841 0.13496933 0.15483871 0.17432259 0.2920354 ]
----- rdk5
10 [0.07027027 0.09210526 0.13194444 0.1744186  0.29371452]
20 [0.138981   0.16265382 0.2034783  0.2464887  0.36241717]
30 [0.17901151 0.20031056 0.23529412 0.27119341 0.37744418]
40 [0.22476447 0.24408015 0.27403333 0.30361222 0.39875415]
50 [0.25178929 0.27223912 0.30226963 0.33179724 0.56276264]
----- rdk7
10 [0.06182973 0.07692308 0.10318025 0.13125631 0.20755116]
20 [0.16833891 0.18709195 0.21530125 0.24113382 0.3134873 ]
30 [0.26654377 0.29183192 0.33148058 0.36885969 0.44672696]
40 [0.40810447 0.441927   0.48827846 0.52855104 0.60776592]
50 [0.50135796 0.54613734 0.6083984  0.66037441 0.7468516 ]
----- ap
10 [0.05769231 0.078125   0.1147541  0.15       0.23809524]
20 [0.17808219 0.20089286 0.234375   0.26415094 0.33495146]
30 [0.25822785 0.28092784 0.31441048 0.34351535 0.40506573]
40 [0.34891018 0.3678844  0.39450643 0.41703057 0.46559644]
50 [0.40221239 0.42302158 0.44985673 0.47313237 0.53501519]
----- tt
10 [0.         0.         0.04166667 0.0625     0.15789474]
20 [0.06       0.08064516 0.11764706 0.15384615 0.23404255]
30 [0.11111111 0.13432836 0.17073171 0.2037037  0.28888889]
40 [0.14285714 0.1640625  0.1965812  0.22826087 0.32397031]
50 [0.15625    0.17763158 0.21186441 0.24603175 0.43928085]</code></pre>
</div>
</div>
<div id="2093ad18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb13-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'----- </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum[fpn]:</span>
<span id="cb13-4">        qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(csims_accum[fpn][k],(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>))</span>
<span id="cb13-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k,qs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>----- mfp0
10 [0.14285714 0.2        0.28571429 0.33333333 0.45454545]
20 [0.31818182 0.36       0.42307692 0.47826087 0.59090909]
30 [0.4        0.44117647 0.5        0.54545455 0.65625   ]
40 [0.46666667 0.50980392 0.55813953 0.6        0.69047619]
50 [0.47368421 0.51724138 0.57142857 0.61818182 0.72340426]
----- mfp1
10 [0.06666667 0.09677419 0.13333333 0.17700535 0.27272727]
20 [0.17647059 0.20634921 0.24528302 0.28301887 0.37254902]
30 [0.23595506 0.26760563 0.31147541 0.35064935 0.44615385]
40 [0.28       0.30769231 0.34736842 0.38461538 0.47368421]
50 [0.29230769 0.32258065 0.36363636 0.40322581 0.51851852]
----- mfp2
10 [0.05263158 0.07317073 0.1025641  0.13157895 0.19444444]
20 [0.12195122 0.14117647 0.17045455 0.19753086 0.27058824]
30 [0.16129032 0.18181818 0.21282506 0.24137931 0.31461298]
40 [0.18987342 0.20886076 0.2384106  0.26712329 0.34210526]
50 [0.2        0.22105263 0.25252525 0.28249816 0.3908046 ]
----- mfp3
10 [0.04878049 0.06666667 0.09375    0.11904762 0.17647059]
20 [0.09803922 0.11304348 0.13541667 0.15740741 0.21649485]
30 [0.12658228 0.14184397 0.16546763 0.18791946 0.24648177]
40 [0.14680203 0.16129032 0.18378378 0.20621793 0.26530612]
50 [0.15471698 0.17063492 0.19465649 0.21825397 0.31429032]
----- ffp0
10 [0.54545455 0.6        0.7        0.77777778 0.88888889]
20 [0.54545455 0.60869565 0.68421053 0.75       0.85      ]
30 [0.5862069  0.63333333 0.7        0.75       0.85185185]
40 [0.65853659 0.7027027  0.75609756 0.79487179 0.86486486]
50 [0.67307692 0.72       0.7755102  0.8125     0.88372093]
----- ffp1
10 [0.28       0.33333333 0.39130435 0.44444444 0.56521739]
20 [0.33333333 0.37037037 0.42857143 0.47826087 0.57894737]
30 [0.38235294 0.42028986 0.47368421 0.51724138 0.62068966]
40 [0.44       0.47252747 0.51724138 0.55555556 0.64444444]
50 [0.45454545 0.49122807 0.53846154 0.57798165 0.66666667]
----- ffp2
10 [0.2        0.23076923 0.27777778 0.32       0.41176471]
20 [0.22857143 0.25641026 0.29850746 0.33766234 0.41666667]
30 [0.26666667 0.29411765 0.33333333 0.37234043 0.45796708]
40 [0.3028169  0.32692308 0.36464824 0.3968254  0.48150041]
50 [0.3172043  0.34444444 0.38323353 0.41758242 0.51875   ]
----- ffp3
10 [0.18181818 0.20930233 0.25       0.28571429 0.36842105]
20 [0.18095238 0.20212766 0.23469388 0.26436782 0.33333333]
30 [0.20588235 0.22683213 0.25735294 0.28703704 0.35652174]
40 [0.23036649 0.24870466 0.27717391 0.3025641  0.37291299]
50 [0.24180328 0.26199907 0.29147982 0.31836735 0.41262136]
----- rdk5
10 [0.05263158 0.078125   0.12244898 0.16853933 0.28378378]
20 [0.10666667 0.14024707 0.18987342 0.23607923 0.34835067]
30 [0.1451939  0.17281374 0.21733278 0.2604754  0.37288632]
40 [0.15921514 0.18334971 0.22246696 0.26200001 0.37742537]
50 [0.16637721 0.19188259 0.23143559 0.27172211 0.48031332]
----- rdk7
10 [0.04       0.05882353 0.09090909 0.12538641 0.20652354]
20 [0.04666459 0.06532277 0.09769524 0.13118911 0.22522836]
30 [0.06412657 0.08135525 0.11198197 0.14370902 0.23953108]
40 [0.06824623 0.08322877 0.1102338  0.13858556 0.24425887]
50 [0.07035962 0.08588146 0.11248808 0.14160011 0.38672073]
----- ap
10 [0.03225806 0.05       0.08888889 0.12280702 0.2       ]
20 [0.11934156 0.14218009 0.17624521 0.20866142 0.28304308]
30 [0.16820988 0.19254658 0.23012552 0.26355844 0.33653916]
40 [0.21548117 0.23770492 0.26982097 0.29846583 0.36480247]
50 [0.23087622 0.25611413 0.2919198  0.32415421 0.41593843]
----- tt
10 [0.         0.         0.         0.         0.08333333]
20 [0.03571429 0.05660377 0.09803922 0.13477131 0.2195122 ]
30 [0.0862069  0.11111111 0.14772727 0.18333333 0.26666667]
40 [0.11290323 0.13533835 0.17037037 0.2038835  0.2970297 ]
50 [0.12169312 0.14457831 0.18014589 0.21568627 0.40002817]</code></pre>
</div>
</div>
<p>Calculate means and std devs. Note that some of these distributions, particularly those for tranche 10, are not even remotely gaussian, so these values shouldn’t be taken overly seriously</p>
<div id="df6de8f5" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bit-based'</span>)</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   10          20          30          40          50'</span>)</span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum:</span>
<span id="cb15-4">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum[fpn].values()]</span>
<span id="cb15-5">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sims_accum[fpn].values()]</span>
<span id="cb15-6">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb15-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-8">    </span>
<span id="cb15-9">    </span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     for k in sims_accum[fpn]:</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         vs = sims_accum[fpn][k]</span></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         print(f'{k}:\t{np.mean(vs):.2f}({np.std(vs):.2f})')</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>bit-based
 fp        10          20          30          40          50
mfp0    0.14(0.13)  0.30(0.14)  0.36(0.13)  0.43(0.13)  0.44(0.15)
mfp1    0.06(0.06)  0.13(0.07)  0.16(0.07)  0.19(0.07)  0.19(0.08)
mfp2    0.05(0.05)  0.09(0.05)  0.11(0.05)  0.12(0.05)  0.12(0.05)
mfp3    0.04(0.04)  0.07(0.04)  0.08(0.04)  0.09(0.03)  0.09(0.04)
ffp0    0.41(0.22)  0.45(0.18)  0.52(0.17)  0.57(0.17)  0.56(0.17)
ffp1    0.17(0.11)  0.21(0.10)  0.25(0.11)  0.27(0.10)  0.28(0.10)
ffp2    0.11(0.07)  0.13(0.06)  0.15(0.07)  0.16(0.06)  0.16(0.07)
ffp3    0.10(0.07)  0.10(0.05)  0.10(0.05)  0.11(0.04)  0.11(0.05)
rdk5    0.06(0.07)  0.12(0.07)  0.16(0.07)  0.20(0.07)  0.22(0.09)
rdk7    0.05(0.05)  0.14(0.06)  0.23(0.08)  0.36(0.10)  0.43(0.13)
ap      0.05(0.06)  0.15(0.07)  0.22(0.07)  0.31(0.07)  0.36(0.08)
tt      0.01(0.08)  0.05(0.05)  0.09(0.06)  0.12(0.07)  0.13(0.08)</code></pre>
</div>
</div>
<div id="12ef2e68" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count-based'</span>)</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">   10          20          30          40          50'</span>)</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb17-4">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum[fpn].values()]</span>
<span id="cb17-5">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum[fpn].values()]</span>
<span id="cb17-6">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb17-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>count-based
 fp        10          20          30          40          50
mfp0    0.11(0.12)  0.25(0.13)  0.33(0.14)  0.39(0.13)  0.39(0.15)
mfp1    0.06(0.06)  0.14(0.08)  0.19(0.09)  0.24(0.09)  0.24(0.10)
mfp2    0.04(0.05)  0.10(0.06)  0.13(0.06)  0.16(0.06)  0.17(0.08)
mfp3    0.04(0.04)  0.08(0.05)  0.11(0.05)  0.13(0.05)  0.13(0.06)
ffp0    0.39(0.22)  0.45(0.18)  0.48(0.18)  0.55(0.17)  0.55(0.18)
ffp1    0.21(0.13)  0.27(0.12)  0.32(0.13)  0.37(0.12)  0.38(0.13)
ffp2    0.15(0.10)  0.19(0.08)  0.22(0.09)  0.26(0.09)  0.27(0.10)
ffp3    0.14(0.09)  0.15(0.07)  0.17(0.07)  0.20(0.07)  0.20(0.08)
rdk5    0.04(0.06)  0.08(0.08)  0.11(0.08)  0.13(0.08)  0.14(0.09)
rdk7    0.03(0.05)  0.04(0.05)  0.05(0.05)  0.06(0.05)  0.06(0.07)
ap      0.03(0.05)  0.09(0.06)  0.14(0.07)  0.18(0.07)  0.19(0.09)
tt      0.00(0.02)  0.03(0.05)  0.06(0.06)  0.09(0.07)  0.10(0.08)</code></pre>
</div>
</div>
<div id="cd9b8c5b" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dfilter(accum,fthresh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>,nbins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    function to remove extremely small values from the upper values of a data set before doing a histogram </span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb19-5">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> accum.values():</span>
<span id="cb19-7">        counts,edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.histogram(v,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbins)</span>
<span id="cb19-8">        tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(counts)</span>
<span id="cb19-9">        thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fthresh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tot</span>
<span id="cb19-10">        edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edges[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb19-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,cnt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(counts)):</span>
<span id="cb19-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cnt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>thresh:</span>
<span id="cb19-13">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb19-14">            edge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edges[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb19-15">        res.append([x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> v <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>edge])</span>
<span id="cb19-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<div id="1d83421b" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">fpn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2'</span></span>
<span id="cb20-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb20-3">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-4">plt.hist(dfilter(sims_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sims_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-5">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity (bits)'</span>)</span>
<span id="cb20-7">plt.title(fpn)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-8">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-9">plt.hist(dfilter(csims_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csims_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity (counts)'</span>)</span>
<span id="cb20-11">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-12">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="4ede2d31" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">fpn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk5'</span></span>
<span id="cb21-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb21-3">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-4">plt.hist(dfilter(sims_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sims_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-5">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity (bits)'</span>)</span>
<span id="cb21-7">plt.title(fpn)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-8">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb21-9">plt.hist(dfilter(csims_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csims_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity (counts)'</span>)</span>
<span id="cb21-11">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-12">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="bit-counts" class="level1">
<h1>Bit counts</h1>
<p>As you’d expect, smaller molecules set way fewer bits:</p>
<div id="7da97675" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bit-based'</span>)</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">     10              20              30              40              50'</span>)</span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb22-4">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bitcounts_accum[fpn].values()]</span>
<span id="cb22-5">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bitcounts_accum[fpn].values()]</span>
<span id="cb22-6">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb22-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>bit-based
 fp          10              20              30              40              50
mfp0       5.3(   1.6)     8.7(   1.9)    10.0(   2.0)    11.4(   2.1)    11.8(   2.6)
mfp1      11.9(   3.5)    22.1(   4.2)    27.5(   5.0)    34.5(   5.9)    38.1(   8.1)
mfp2      16.4(   5.2)    33.6(   6.4)    44.2(   7.5)    57.9(   8.7)    66.3(  12.2)
mfp3      18.4(   6.5)    43.1(   8.6)    59.3(  10.2)    79.8(  11.2)    93.4(  15.6)
ffp0       2.9(   1.1)     4.5(   1.3)     4.8(   1.2)     5.2(   1.2)     5.3(   1.3)
ffp1       8.8(   2.9)    15.8(   3.8)    18.7(   4.2)    22.8(   4.7)    24.3(   5.8)
ffp2      13.1(   4.4)    26.7(   6.0)    34.1(   7.0)    44.2(   8.1)    49.2(  10.4)
ffp3      15.1(   5.6)    36.2(   8.2)    49.0(   9.7)    65.8(  10.6)    75.8(  14.0)
rdk5      64.7(  37.2)   193.7(  74.1)   289.3( 104.2)   411.9( 129.0)   478.9( 161.4)
rdk7      95.0(  70.0)   444.3( 206.6)   725.5( 281.7)  1039.6( 314.8)  1220.0( 349.5)
ap        26.4(  10.5)   113.6(  30.7)   212.7(  51.9)   372.9(  64.9)   524.2(  92.9)
tt         8.3(   4.6)    25.9(   7.3)    40.7(   9.9)    59.2(  11.4)    74.0(  14.9)</code></pre>
</div>
</div>
<div id="0620c16f" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count-based'</span>)</span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">     10              20              30              40              50'</span>)</span>
<span id="cb24-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb24-4">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cbitcounts_accum[fpn].values()]</span>
<span id="cb24-5">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cbitcounts_accum[fpn].values()]</span>
<span id="cb24-6">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb24-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>count-based
 fp          10              20              30              40              50
mfp0       5.3(   1.6)     8.8(   1.9)    10.1(   2.0)    11.6(   2.1)    12.1(   2.7)
mfp1      12.1(   3.6)    22.3(   4.3)    27.7(   5.0)    34.9(   6.0)    38.7(   8.3)
mfp2      16.5(   5.3)    33.9(   6.4)    44.7(   7.7)    58.7(   8.9)    67.5(  12.6)
mfp3      18.5(   6.5)    43.6(   8.7)    60.1(  10.5)    81.5(  11.6)    95.7(  16.2)
ffp0       2.9(   1.1)     4.5(   1.3)     4.8(   1.2)     5.2(   1.2)     5.3(   1.3)
ffp1       8.8(   2.9)    15.8(   3.8)    18.7(   4.2)    22.9(   4.8)    24.4(   5.8)
ffp2      13.2(   4.4)    26.9(   6.0)    34.5(   7.1)    44.8(   8.2)    50.1(  10.7)
ffp3      15.1(   5.6)    36.5(   8.3)    49.6(   9.9)    67.2(  10.9)    77.6(  14.4)
rdk5      66.1(  38.8)   205.3(  82.8)   316.0( 124.2)   468.2( 163.8)   560.4( 216.5)
rdk7      98.6(  76.1)   520.7( 284.5)   953.3( 500.9)  1568.9( 709.7)  2064.2( 952.7)
ap        20.9(   9.2)    80.2(  25.2)   140.9(  40.7)   239.3(  61.0)   323.3(  91.1)
tt         6.7(   4.0)    19.5(   6.6)    28.9(   9.1)    40.5(  11.4)    47.6(  14.8)</code></pre>
</div>
</div>
<p>The difference in numbers of bits set between the sparse count-based and bit-based fingerprint is a measure of the number of collisions arising from folding the fingerprint. I’ve done a <a href="https://greglandrum.github.io/rdkit-blog/posts/2023-01-23-colliding-bits-iii-expanded.html">blog post about this</a> that showed that collisions tend to increase similarity values.</p>
<p>The results above, unsurprisingly, show that collisions are much more prevalent in larger molecules, where more bits are set. This is particularly true for the RDKit fingerprint, which sets a very large number of bits.</p>
<blockquote class="blockquote">
<p>Note: by default the bit-based versions of the atom pair and topological torsion fingerprints use <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-07-06-simulating-counts.html">count simulation</a>, so features that are present multiple times in a molecule can lead to multiple bits being set in the bit-based fingerprint. This leads to the unusual behavior observed above that there are more bits set in the bit-based fingerprints than the count-based ones, particularly for larger molecules.</p>
</blockquote>
<div id="40a04058" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">fpn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rdk7'</span></span>
<span id="cb26-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb26-3"></span>
<span id="cb26-4"></span>
<span id="cb26-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-6">plt.hist(dfilter(cbitcounts_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cbitcounts_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-7">lim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.xlim()</span>
<span id="cb26-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num bits set (counts)'</span>)</span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.xlim(0,0.5);</span></span>
<span id="cb26-10">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-11"></span>
<span id="cb26-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-13">plt.hist(dfilter(bitcounts_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bitcounts_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-14">plt.xlim(lim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],lim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num bits set'</span>)</span>
<span id="cb26-16">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-17">plt.title(fpn)</span>
<span id="cb26-18"></span>
<span id="cb26-19">plt.tight_layout()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="bdb782bd" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">fpn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mfp2'</span></span>
<span id="cb27-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb27-3"></span>
<span id="cb27-4"></span>
<span id="cb27-5">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb27-6">plt.hist(dfilter(cbitcounts_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cbitcounts_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-7">lim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.xlim()</span>
<span id="cb27-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num bits set (counts)'</span>)</span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.xlim(0,0.5);</span></span>
<span id="cb27-10">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-11"></span>
<span id="cb27-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-13">plt.hist(dfilter(bitcounts_accum[fpn]),bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bitcounts_accum[fpn].keys())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-14">plt.xlim(lim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],lim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num bits set'</span>)</span>
<span id="cb27-16">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb27-17">plt.title(fpn)</span>
<span id="cb27-18"></span>
<span id="cb27-19">plt.tight_layout()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="collisions" class="level1">
<h1>Collisions</h1>
<p>We can directly get stats on the number of collisions:</p>
<div id="fbb9a1fd" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count-based'</span>)</span>
<span id="cb28-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' fp  </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">     10              20              30              40              50'</span>)</span>
<span id="cb28-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fpn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csims_accum:</span>
<span id="cb28-4">    diffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.array(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.array(y) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(cbitcounts_accum[fpn].values(),bitcounts_accum[fpn].values())]</span>
<span id="cb28-5">    means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.mean(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> diffs]</span>
<span id="cb28-6">    stds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.std(vs) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> vs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> diffs]</span>
<span id="cb28-7">    blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:6.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(means,stds)]</span>
<span id="cb28-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>fpn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:4s}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(blocks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>count-based
 fp          10              20              30              40              50
mfp0       0.1(   0.3)     0.2(   0.4)     0.1(   0.3)     0.2(   0.4)     0.3(   0.5)
mfp1       0.1(   0.3)     0.2(   0.4)     0.2(   0.5)     0.4(   0.6)     0.6(   0.7)
mfp2       0.1(   0.4)     0.3(   0.6)     0.5(   0.7)     0.9(   0.9)     1.3(   1.1)
mfp3       0.2(   0.4)     0.5(   0.7)     0.9(   1.0)     1.6(   1.3)     2.3(   1.6)
ffp0       0.0(   0.0)     0.0(   0.0)     0.0(   0.0)     0.0(   0.0)     0.0(   0.0)
ffp1       0.0(   0.2)     0.0(   0.2)     0.0(   0.2)     0.1(   0.2)     0.1(   0.3)
ffp2       0.1(   0.2)     0.2(   0.4)     0.3(   0.6)     0.7(   0.7)     0.9(   0.9)
ffp3       0.1(   0.3)     0.3(   0.6)     0.7(   0.8)     1.3(   1.1)     1.8(   1.3)
rdk5       1.4(   2.0)    11.6(   9.6)    26.7(  21.1)    56.2(  36.5)    81.5(  57.0)
rdk7       3.6(   7.8)    76.4(  83.1)   227.8( 230.7)   529.3( 410.5)   844.2( 621.1)
ap        -5.5(   4.6)   -33.4(  13.1)   -71.8(  23.5)  -133.6(  27.9)  -201.0(  38.6)
tt        -1.6(   2.1)    -6.4(   3.6)   -11.8(   5.1)   -18.6(   5.8)   -26.4(   7.7)</code></pre>
</div>
</div>
<p>The negative values here for the atom pair and topological torsion fingerprints are due to <a href="https://greglandrum.github.io/rdkit-blog/posts/2021-07-06-simulating-counts.html">count simulation</a>: multiple bits can be set for each feature in the molecule.</p>


</section>

 ]]></description>
  <category>reference</category>
  <category>similarity</category>
  <category>fingerprints</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-06-20-size-and-similarity-1.html</guid>
  <pubDate>Thu, 19 Jun 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/size-and-similarity-1.png" medium="image" type="image/png" height="91" width="144"/>
</item>
<item>
  <title>Connecting reaction products to the reacting molecules.</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info.html</link>
  <description><![CDATA[ 




<p>We often get questions about how to relate atoms in the products of a chemical reaction to the corresponding atoms in the reactants which were provided to the reaction. The RDKit provides a couple of pieces of information that can help here; this post shows how to access that information and what it means.</p>
<div id="45e6c132" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdChemReactions</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDepictor</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.3</code></pre>
</div>
</div>
<p>This is the reaction definition <code>Niementowski_quinazoline</code> from the SI of the paper “A Collection of Robust Organic Synthesis Reactions for In Silico Molecule Design” by <a href="http://pubs.acs.org/doi/abs/10.1021/ci200379p">Hartenfeller et al.&nbsp;</a>.</p>
<div id="29266063" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">rxn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdChemReactions.ReactionFromSmarts(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[c:1](-[C;$(C-c1ccccc1):2](=[OD1:3])-[OH1]):[c:4](-[NH2:5]).[N;!H0;!$(N-N);!$(N-C=N);!$(N(-C=O)-C=O):6]-[C;H1,$(C-[#6]):7]=[OD1]&gt;&gt;[c:4]2:[c:1]-[C:2](=[O:3])-[N:6]-[C:7]=[N:5]-2'</span>)</span>
<span id="cb3-2">rxn</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="992273bd" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">reactants <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Chem.MolFromSmiles(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c1c(C(=O)O)c(N)cc(CC)c1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C(=O)Nc1ccccc1'</span>)]</span>
<span id="cb4-2">Draw.MolsToGridImage(reactants)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="f1168c6c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">prods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rxn.RunReactants(reactants)</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(prods)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>1</code></pre>
</div>
</div>
<div id="e6323cce" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="f8b1d6ba" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].GetAtomWithIdx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).GetPropsAsDict(includeComputed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>{'old_mapno': 4, 'react_atom_idx': 5, 'react_idx': 0}</code></pre>
</div>
</div>
<p><code>old_mapno</code> is the atom map number of the atom in the product template, <code>react_idx</code> is the index of the reactant that the atom came from (this was added in release 2024.09.6, so it won’t be there in older releases), and <code>react_atom_idx</code> is the index of the atom in that reactant.</p>
<p>Here’s an atom that wasn’t in the product template, so it doesn’t have an atom map number:</p>
<div id="534cd648" class="cell" data-scrolled="true" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].GetAtomWithIdx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>).GetPropsAsDict(includeComputed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>{'react_atom_idx': 7, 'react_idx': 0}</code></pre>
</div>
</div>
<p>Here’s a sample function that draws a product molecule and highlights atoms and bonds based upon which reactant they came from. It can also optionally include the original atom indices.</p>
<div id="8d852f4c" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVG</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_mol_highlighted_by_atom_origin(mol,</span>
<span id="cb12-4">                                        includeOriginalAtomIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb12-5">                                        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>),</span>
<span id="cb12-6">                                        colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span>),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>),(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.71</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.76</span>),(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>)],</span>
<span id="cb12-7">                                       ):</span>
<span id="cb12-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy the molecule since we will modify it:</span></span>
<span id="cb12-9">    mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mol)</span>
<span id="cb12-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> mol.GetNumConformers():</span>
<span id="cb12-11">        rdDepictor.Compute2DCoords(mol)</span>
<span id="cb12-12">        rdDepictor.StraightenDepiction(mol)</span>
<span id="cb12-13">    atom_highlights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-14">    bond_highlights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-15">    rads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-16">    mults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb12-17"></span>
<span id="cb12-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> at <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol.GetAtoms():</span>
<span id="cb12-19">        pd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> at.GetPropsAsDict()</span>
<span id="cb12-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_idx'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pd:</span>
<span id="cb12-21">            atom_highlights[at.GetIdx()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [colors[pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_idx'</span>]]]</span>
<span id="cb12-22">            rads[at.GetIdx()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span></span>
<span id="cb12-23">            mults[at.GetIdx()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> includeOriginalAtomIndices <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_atom_idx'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pd:</span>
<span id="cb12-25">            at.SetProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atomNote'</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(pd[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'react_atom_idx'</span>]))</span>
<span id="cb12-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bnd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mol.GetBonds():</span>
<span id="cb12-27">        bidx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnd.GetBeginAtomIdx()</span>
<span id="cb12-28">        eidx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnd.GetEndAtomIdx()</span>
<span id="cb12-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> bidx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> atom_highlights <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> eidx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> atom_highlights <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> atom_highlights[bidx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> atom_highlights[eidx]:</span>
<span id="cb12-30">            bond_highlights[bnd.GetIdx()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> atom_highlights[bidx]</span>
<span id="cb12-31">    d2d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Draw.MolDraw2DSVG(size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],size[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb12-32">    d2d.DrawMoleculeWithHighlights(mol,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,atom_highlights,bond_highlights,rads,mults)</span>
<span id="cb12-33">    d2d.FinishDrawing()</span>
<span id="cb12-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> d2d.GetDrawingText()</span></code></pre></div>
</div>
<div id="3aa95dbc" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prods[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-2">SVG(draw_mol_highlighted_by_atom_origin(mol))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-10-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="e05ad196" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">SVG(draw_mol_highlighted_by_atom_origin(mol,includeOriginalAtomIndices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info_files/figure-html/cell-11-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>tutorial</category>
  <category>reactions</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-06-12-using-reaction-info.html</guid>
  <pubDate>Wed, 11 Jun 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/using-reaction-info-1.png" medium="image" type="image/png" height="74" width="144"/>
</item>
<item>
  <title>Murcko Scaffolds Tutorial</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-06-06-murcko-scaffolds.html</link>
  <description><![CDATA[ 




<p>This guest post by Jeremy Monat (GitHub: <a href="https://github.com/bertiewooster/"><span class="citation" data-cites="bertiewooster">@bertiewooster</span></a>) provides a simple way to visualize a list of molecules by their Murcko scaffolds. Murcko scaffolds are a useful way to cluster molecules to select a chemically diverse set of molecules. Murcko scaffolds are also a good way to split a set of molecules for machine learning so the model does not train and test on molecules that have the same scaffold, which contaminates the training set.</p>
<p>RDKit’s implementation of Murcko scaffolds is based on <a href="https://pubmed.ncbi.nlm.nih.gov/8709122/">Bemis-Murcko Scaffolds</a>, with <a href="https://github.com/rdkit/rdkit/issues/4093">some differences</a>.</p>
<div id="961769e5" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AllChem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Scaffolds.MurckoScaffold <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MurckoScaffoldSmiles</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MolsMatrixToGridImage</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Descriptors</span></code></pre></div>
</div>
<section id="murcko-scaffolds-for-a-list-of-smiles" class="level1">
<h1>Murcko scaffolds for a list of SMILES</h1>
<p>Given a list of SMILES corresponding to molecules:</p>
<div id="befbda3b" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">smls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cc1cc(Oc2nccc(CCCC)c2)ccc1"</span>,</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1c2ccccc2ccc1"</span>,</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cc1cc(Oc2nccc(CCC)c2)ccc1"</span>,</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cc1ccccc1"</span>,</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c1c2cc(CC)ccc2ccc1"</span>,</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cc1c2ccccc2ccc1"</span>,</span>
<span id="cb2-8">]</span></code></pre></div>
</div>
<p>we determine the Murcko scaffold for each. We put the results in a dictionary of <code>molecule:scaffold</code> format (each as a SMILES) so we can later group by scaffold. (While the scaffolds are themselves valid molecules, we use the term “molecule” here to mean an input molecule.)</p>
<div id="ec78c4ea" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">molecule_scaffold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {sml: MurckoScaffoldSmiles(sml) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> smls}</span>
<span id="cb3-2">molecule_scaffold</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>{'Cc1cc(Oc2nccc(CCCC)c2)ccc1': 'c1ccc(Oc2ccccn2)cc1',
 'c1c2ccccc2ccc1': 'c1ccc2ccccc2c1',
 'Cc1cc(Oc2nccc(CCC)c2)ccc1': 'c1ccc(Oc2ccccn2)cc1',
 'Cc1ccccc1': 'c1ccccc1',
 'c1c2cc(CC)ccc2ccc1': 'c1ccc2ccccc2c1',
 'Cc1c2ccccc2ccc1': 'c1ccc2ccccc2c1'}</code></pre>
</div>
</div>
<p>Now we can determine the number of unique scaffolds by creating a <code>set</code> of the scaffolds as SMILES. (If we tried to do this with scaffold <code>mol</code>s, we wouldn’t get accurate results because each <code>mol</code> is a unique object, specified by its memory address, even if it corresponds to the same structure as another <code>mol</code>.)</p>
<div id="aba2c1c6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">scaffolds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(scaffold <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> scaffold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecule_scaffold.values())</span>
<span id="cb5-2">scaffolds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{'c1ccc(Oc2ccccn2)cc1', 'c1ccc2ccccc2c1', 'c1ccccc1'}</code></pre>
</div>
</div>
<div id="14db4f7c" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(scaffolds)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>3</code></pre>
</div>
</div>
</section>
<section id="grouping-molecules-by-scaffold" class="level1">
<h1>Grouping molecules by scaffold</h1>
<p>Now we reverse the dictionary to <code>scaffold:list[molecule]</code> format to group the molecules by scaffold.</p>
<div id="6c6ef79d" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">scaffold_molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> molecule, scaffold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecule_scaffold.items():</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> scaffold <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> scaffold_molecules.keys():</span>
<span id="cb9-4">        scaffold_molecules[scaffold] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [molecule]</span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb9-6">        scaffold_molecules[scaffold].append(molecule)</span>
<span id="cb9-7">scaffold_molecules</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>{'c1ccc(Oc2ccccn2)cc1': ['Cc1cc(Oc2nccc(CCCC)c2)ccc1',
  'Cc1cc(Oc2nccc(CCC)c2)ccc1'],
 'c1ccc2ccccc2c1': ['c1c2ccccc2ccc1', 'c1c2cc(CC)ccc2ccc1', 'Cc1c2ccccc2ccc1'],
 'c1ccccc1': ['Cc1ccccc1']}</code></pre>
</div>
</div>
</section>
<section id="visualizing-molecules-by-scaffold" class="level1">
<h1>Visualizing molecules by scaffold</h1>
<p>To get a better sense of the scaffolds and molecules, let’s plot them in rows and columns:</p>
<ul>
<li>Each row will correspond to a scaffold</li>
<li>The first column in each row will be the scaffold</li>
<li>Each subsequent column will be a molecule with that scaffold</li>
</ul>
<p>Because each scaffold (row) can have a variable number of molecules (columns), <a href="https://greglandrum.github.io/rdkit-blog/posts/2023-10-25-molsmatrixtogridimage.html">MolsMatrixToGridImage</a> is convenient for visualization.</p>
<p>We start by creating a matrix (nested list) of mols where the first column is the scaffold and subsequent columns are molecules with that scaffold.</p>
<div id="7becd124" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">molsMatrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> scaffold, molecules_list <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> scaffold_molecules.items():</span>
<span id="cb11-3">    molsMatrix.append(</span>
<span id="cb11-4">        [Chem.MolFromSmiles(scaffold)]</span>
<span id="cb11-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [Chem.MolFromSmiles(sml) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sml <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecules_list]</span>
<span id="cb11-6">    )</span></code></pre></div>
</div>
<p>To put the scaffolds in a logical order, we sort them by molecular weight.</p>
<div id="39a16379" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">molsMatrix.sort(key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> row: Descriptors.MolWt(row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span></code></pre></div>
</div>
<p>We loop through the rows (scaffolds) and do three things to make it easier to compare the molecules for each scaffold:</p>
<ul>
<li>Sort the molecules by molecular weight</li>
<li>Prepare to highlight the scaffold in each molecule by getting the substructure match for each molecule</li>
<li>Align the molecules so they’re in the same orientation as the scaffold</li>
</ul>
<p>Again, we use the term “molecules” to exclude the scaffold, hence the definition <code>molecules = row[1:]</code> because the scaffold is the first column in each row.</p>
<div id="7ce6d1f6" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">highlightAtomListsMatrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molsMatrix:</span>
<span id="cb13-3">    scaffold_mol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-4">    molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb13-5"></span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the molecules in the row by molecular weight (excluding the scaffold)</span></span>
<span id="cb13-7">    molecules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(molecules, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Descriptors.MolWt)</span>
<span id="cb13-8">    row[:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [scaffold_mol] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> molecules</span>
<span id="cb13-9"></span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Highlight the scaffold in each molecule; don't highlight the scaffold (first column)</span></span>
<span id="cb13-11">    matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [</span>
<span id="cb13-12">        molecule.GetSubstructMatch(scaffold_mol) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> molecule <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecules</span>
<span id="cb13-13">    ]</span>
<span id="cb13-14">    highlightAtomListsMatrix.append(matches)</span>
<span id="cb13-15"></span>
<span id="cb13-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Align the molecules so they're in the same orientation as the scaffold</span></span>
<span id="cb13-17">    Chem.Compute2DCoords(scaffold_mol)</span>
<span id="cb13-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> molecule <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> molecules:</span>
<span id="cb13-19">        Chem.GenerateDepictionMatching2DStructure(molecule, scaffold_mol)</span></code></pre></div>
</div>
<p>For the last setup step, we create the legends by row (scaffold):</p>
<ul>
<li>In the first column, we number each scaffold</li>
<li>In the second column, we tell how many molecules correspond to that scaffold</li>
</ul>
<div id="42ec0e30" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">legendsMatrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row_num, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(molsMatrix, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb14-3">    n_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(row) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb14-5">        descr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 molecule"</span></span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb14-7">        descr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_examples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> molecules"</span></span>
<span id="cb14-8">    labelsRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scaffold #</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, descr]</span>
<span id="cb14-9">    labelsRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n_examples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-10">    legendsMatrix.append(labelsRow)</span></code></pre></div>
</div>
<p>Now we can plot the results:</p>
<div id="8546e4af" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">MolsMatrixToGridImage(</span>
<span id="cb15-2">    molsMatrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>molsMatrix,</span>
<span id="cb15-3">    legendsMatrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>legendsMatrix,</span>
<span id="cb15-4">    highlightAtomListsMatrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>highlightAtomListsMatrix,</span>
<span id="cb15-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-06-06-murcko-scaffolds_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>tutorial</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-06-06-murcko-scaffolds.html</guid>
  <pubDate>Thu, 05 Jun 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/murcko-scaffolds-1.png" medium="image" type="image/png" height="48" width="144"/>
</item>
<item>
  <title>Doing extended Hueckel calculations with the RDKit</title>
  <link>https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit.html</link>
  <description><![CDATA[ 




<p>This is an updated and revised version of an <a href="https://rdkit.blogspot.com/2019/06/doing-extended-hueckel-calculations.html">older post</a>.</p>
<p>The RDKit has included an optional integration with a semi-empirical quantum mechanics package called YAeHMOP since the 2019.03 release. If you build the RDKit yourself, this is disabled by default, but it is part of the RDKit conda-forge and pypi builds, so it’s available to most RDKit users.</p>
<p>There’s no documentation for this integration yet… thus this blog post.</p>
<section id="some-background" class="level1">
<h1>Some background</h1>
<p>One of my major projects in grad school was to write a software package for performing extended Hueckel calculations and analyzing and visualizing the results. I released the source for YAeHMOP (“Yet Another extended Hueckel Molecular Orbital Package”) way back when using some weird license (the open-source landscape in chemistry was “a bit” different back in the mid-90s). After changing fields, I more or less forgot about YAeHMOP until a couple of years ago when Patrick Avery contacted me about integrating it <a href="https://pubs.acs.org/doi/abs/10.1021/acs.jchemed.7b00698">into Avogadro</a>. To make things easier, I put the source <a href="https://github.com/greglandrum/yaehmop">up on Github</a> and switched to a BSD license. Since that point we’ve done a bit of additional cleanup work on the eHT code (the visualization pieces are still there, but really only have historic interest) and made it useable as a library.</p>
<p>There are a couple of applications where I think it might be interesting to have access to quick, interpretable QM results from the RDKit. These include getting partial charges and starting to think about quick and dirty descriptors for things like bond strengths and reactivity. So I decided to do an integration of YAeHMOP into the RDKit.</p>
<p>There are a <em>bunch</em> of books and papers describing extended Hueckel theory and the various types of analysis that one can do with it; I’m not going to cite all of those here. There’s also no formal publication describing YAeHMOP (what a shock!), but there is a <a href="https://drive.google.com/file/d/0BzBynnwxNS0SanJzUkJYYWNFY0h1bzNFR0d0aVBCR0x5NmZV/view?usp=sharing&amp;resourcekey=0-o4HYaJEodQtVCZ54zZSi4g">chapter</a> in my PhD thesis that provides an fairly comprehensive tutorial overview of the theory.</p>
<div id="cell-2" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Chem</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Draw</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDepictor</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdDistGeom</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdForceFieldHelpers</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdMolAlign</span>
<span id="cb1-7">rdDepictor.SetPreferCoordGen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem.Draw <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IPythonConsole</span>
<span id="cb1-9">IPythonConsole.ipython_3d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is the package including the connection to YAeHMOP</span></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rdkit.Chem <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdEHTTools</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rdkit</span>
<span id="cb1-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(rdkit.__version__)</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(time.asctime())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025.03.2
Tue May 27 06:32:31 2025</code></pre>
</div>
</div>
<div id="cell-3" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font.size'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'16'</span></span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</div>
</section>
<section id="running-an-eht-calculation" class="level1">
<h1>Running an eHT calculation</h1>
<p>Start by showing how to run an eHT calculation:</p>
<div id="cell-6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># imatinib</span></span>
<span id="cb4-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cc1ccc(NC(=O)c2ccc(CN3CCN(C)CC3)cc2)cc1Nc1nccc(-c2cccnc2)n1'</span>)</span>
<span id="cb4-3">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We need to add Hs and generate a conformation:</p>
<div id="cell-8" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">mh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.AddHs(m)</span>
<span id="cb5-2"></span>
<span id="cb5-3">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.ETKDGv3()</span>
<span id="cb5-4">params.randomSeed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xf00d</span></span>
<span id="cb5-5">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMultipleConfs(mh,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,params)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>And now we can run the calculation, it’s quick:</p>
<div id="cell-10" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">passed,res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdEHTTools.RunMol(mh)</span></code></pre></div>
</div>
<p>The first return value lets us know if the calculation succeeded:</p>
<div id="cell-12" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">passed</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>True</code></pre>
</div>
</div>
<p>The second contains the results of the calculation:</p>
<div id="cell-14" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">res</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>&lt;rdkit.Chem.rdEHTTools.EHTResults at 0x7134eb4fb990&gt;</code></pre>
</div>
</div>
<p>We have access to the atomic charges:</p>
<div id="cell-16" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">res.GetAtomicCharges()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([-5.73319770e-02, -1.56119578e-02, -4.62356988e-02, -1.18071986e-01,
        2.86923770e-01, -3.70969432e-01,  1.00722260e+00, -1.21427336e+00,
        1.03464336e-02,  3.95206419e-03, -5.19248775e-02,  1.13588339e-01,
        2.38359626e-01, -5.99954120e-01,  2.17722688e-01,  2.27807128e-01,
       -6.56662561e-01,  1.84484934e-01,  2.16303717e-01,  2.04326750e-01,
       -6.48170370e-02,  3.50318427e-03, -1.46944980e-01,  2.80281190e-01,
       -3.39480974e-01,  9.28885393e-01, -9.10924655e-01,  4.27524493e-01,
       -1.53696399e-01,  4.99938553e-01,  1.25460394e-02,  1.04297689e-01,
       -5.89901215e-02,  3.62195210e-01, -8.17714649e-01,  3.65798320e-01,
       -9.06432708e-01,  2.36395863e-02,  2.09410831e-02,  1.39448705e-02,
        1.96396053e-02,  3.16035160e-02,  2.28935259e-01,  2.99088433e-02,
        2.12441191e-02, -9.34616751e-03, -1.93856802e-02,  1.28332398e-03,
       -3.10220683e-03, -4.19893941e-03, -2.37810660e-03,  1.00680225e-02,
        1.90934569e-03,  1.07324773e-02,  4.87832629e-03,  7.08061277e-04,
        9.06261240e-03, -9.03297593e-03,  2.21231427e-02,  2.43698118e-02,
        4.00966866e-02,  2.16945408e-01,  1.45921314e-02,  3.89137638e-02,
        2.12291420e-02,  2.76350076e-02,  2.16390227e-02,  2.54300922e-02])</code></pre>
</div>
</div>
<p>The reduced overlap population matrix provides the Mulliken overlap population between atoms in the molecule. This tells us something about the strength of the interaction between the atoms. It’s returned as a vector representing a symmetric matrix:</p>
<div id="cell-18" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">res.GetReducedOverlapPopulationMatrix()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>array([ 2.58800014,  0.7866103 ,  2.78382058, -0.08743666,  1.12740458,
        2.72952681])</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convenience function to set a "MulilkenOverlapPopulation" property on bonds.</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_overlap_populations(m,ehtRes):</span>
<span id="cb15-3">    rop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ehtRes.GetReducedOverlapPopulationMatrix()</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bnd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> m.GetBonds():</span>
<span id="cb15-5">        a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnd.GetBeginAtom()</span>
<span id="cb15-6">        a2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bnd.GetEndAtom()</span>
<span id="cb15-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> a1.GetAtomicNum()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> a2.GetAtomicNum()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb15-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb15-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># symmetric matrix:</span></span>
<span id="cb15-10">        i1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(a1.GetIdx(),a2.GetIdx())</span>
<span id="cb15-11">        i2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(a1.GetIdx(),a2.GetIdx())</span>
<span id="cb15-12">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i2</span>
<span id="cb15-13">        bnd.SetDoubleProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MullikenOverlapPopulation"</span>,rop[idx])</span></code></pre></div>
</div>
<div id="cell-20" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">set_overlap_populations(mh,res)</span></code></pre></div>
</div>
<p>Look at a few of the overlap populations:</p>
<div id="cell-22" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bnd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(mh.GetBonds())[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb17-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> bnd.HasProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MullikenOverlapPopulation"</span>):</span>
<span id="cb17-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb17-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetIdx()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetBeginAtom()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetSymbol()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetBeginAtomIdx()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetEndAtom()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetSymbol()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetEndAtomIdx()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetBondType()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bnd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>GetDoubleProp(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MullikenOverlapPopulation"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 C(0)-C(1) SINGLE 0.787
1 C(1)-C(2) AROMATIC 1.127
2 C(2)-C(3) AROMATIC 1.084
3 C(3)-C(4) AROMATIC 1.113
4 C(4)-N(5) SINGLE 0.720</code></pre>
</div>
</div>
<p>The wrapper also currently provides the reduced charge matrix (described in that thesis chapter linked above). I’m not going to discuss that here.</p>
</section>
<section id="application-look-at-variability-of-charges-between-conformers" class="level1">
<h1>Application: Look at variability of charges between conformers</h1>
<p>The rest of this blog post is going to show a straightforward analysis one can do with the eHT results: looking at the variability of the QM charges across the different conformers.</p>
<div id="cell-25" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> runEHT(mh):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" convenience function to run an eHT calculation on all of a molecule's conformers</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        returns a list of the results structures as well as a list of lists containing the</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        charges on each atom in each conformer: chgs[atomId][confId] to use this</span></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb19-7">    eres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-8">    charges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mh.GetNumHeavyAtoms())]</span>
<span id="cb19-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mh.GetNumConformers()):</span>
<span id="cb19-10">        passed,res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdEHTTools.RunMol(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cid)</span>
<span id="cb19-11">        eres.append(res)</span>
<span id="cb19-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> passed:</span>
<span id="cb19-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eHT failed"</span>)</span>
<span id="cb19-14">        hvyIdx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb19-15">        echgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res.GetAtomicCharges()</span>
<span id="cb19-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mh.GetAtoms():</span>
<span id="cb19-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> atom.GetAtomicNum()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb19-18">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb19-19">            charges[hvyIdx].append(echgs[atom.GetIdx()])</span>
<span id="cb19-20">            hvyIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (eres,charges)</span>
<span id="cb19-22">    </span></code></pre></div>
</div>
<div id="cell-26" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">eres,charges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runEHT(mh)</span></code></pre></div>
</div>
<div id="cell-27" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb21-2">plt.violinplot(charges)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ETKDG"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom ID'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"partial charge"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>To make sense of that, draw the molecule with the atoms numbered:</p>
<div id="cell-29" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">IPythonConsole.drawOptions.addAtomIndices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb22-2">IPythonConsole.molSize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb22-3">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Look at the results for a couple of the atoms that show the most variability</p>
<div id="cell-31" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">chgRange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> charges]</span>
<span id="cb23-2">sortedRanges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chgRange)], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-3">sortedRanges[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>[(0.20875282639970938, 24), (0.11463855830843706, 5)]</code></pre>
</div>
</div>
<div id="cell-32" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">tchgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>((y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(charges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]))</span>
<span id="cb25-2">tchgs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],tchgs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>([(-0.5344846663677152, 7), (-0.5300694785153464, 9)],
 [(-0.3297127630789536, 46), (-0.3257318399680058, 22)])</code></pre>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">tchgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>((y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(charges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]))</span>
<span id="cb27-2">tchgs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],tchgs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>([(-0.37553939142960324, 12), (-0.3740573280350843, 4)],
 [(-0.2660340113875628, 14), (-0.2609008331211662, 30)])</code></pre>
</div>
</div>
<p>Look at the two conformers where the charges on atom 24 differ the most:</p>
<div id="cell-35" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">m.__sssAtoms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]</span>
<span id="cb29-2">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-36" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">tm7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(Chem.MolToMolBlock(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb30-2">tm7</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="3dmolviewer_17483188092931037" style="position: relative; width: 400px; height: 400px;">
        <p id="3dmolwarning_17483188092931037" style="background-color:#ffcccc;color:black">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>
        </div>
<script>

var loadScriptAsync = function(uri){
  return new Promise((resolve, reject) => {
    //this is to ignore the existence of requirejs amd
    var savedexports, savedmodule;
    if (typeof exports !== 'undefined') savedexports = exports;
    else exports = {}
    if (typeof module !== 'undefined') savedmodule = module;
    else module = {}

    var tag = document.createElement('script');
    tag.src = uri;
    tag.async = true;
    tag.onload = () => {
        exports = savedexports;
        module = savedmodule;
        resolve();
    };
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
});
};

if(typeof $3Dmolpromise === 'undefined') {
$3Dmolpromise = null;
  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.0/3Dmol-min.js');
}

var viewer_17483188092931037 = null;
var warn = document.getElementById("3dmolwarning_17483188092931037");
if(warn) {
    warn.parentNode.removeChild(warn);
}
$3Dmolpromise.then(function() {
viewer_17483188092931037 = $3Dmol.createViewer(document.getElementById("3dmolviewer_17483188092931037"),{backgroundColor:"white"});
viewer_17483188092931037.zoomTo();
    viewer_17483188092931037.removeAllModels();
    viewer_17483188092931037.addModel("\n     RDKit          3D\n\n 37 41  0  0  0  0  0  0  0  0999 V2000\n   -4.0652   -5.3614    2.5183 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.1772   -4.4307    1.7734 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.8350   -4.7025    1.6874 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.9790   -3.8638    1.0044 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.4905   -2.7421    0.4057 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5619   -1.8974   -0.2967 N   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0926   -0.8899    0.4674 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.2263   -0.8560    1.7044 O   0  0  0  0  0  0  0  0  0  0  0  0\n    1.0577    0.0416   -0.1000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.3393    0.0494   -1.4410 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2683    0.9409   -1.9879 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.8824    1.8074   -1.1041 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.8821    2.7989   -1.5701 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.2340    2.3400   -1.5765 N   0  0  0  0  0  0  0  0  0  0  0  0\n    5.4009    1.2251   -2.4922 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.7618    0.6040   -2.3843 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.6567    1.4701   -1.6720 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.0310    1.0094   -1.7270 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.2491    1.8210   -0.3476 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.7403    1.9433   -0.2981 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6037    1.8063    0.2526 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.6748    0.9157    0.8042 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8529   -2.4091    0.4571 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.6434   -3.2980    1.1592 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.0449   -2.9662    1.2322 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.5887   -1.8260    0.5829 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.1625   -2.0308   -0.6296 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.7113   -1.0312   -1.3602 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.6560    0.2477   -0.7925 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.0769    0.4715    0.4378 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.9879    1.7816    1.0651 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.3781    1.8701    2.2917 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.2655    3.1020    2.9383 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.7849    4.2365    2.3122 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.3796    4.1191    1.1049 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.4805    2.9324    0.4964 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.5418   -0.5822    1.1228 N   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  2  0\n  3  4  1  0\n  4  5  2  0\n  5  6  1  0\n  6  7  1  0\n  7  8  2  0\n  7  9  1  0\n  9 10  2  0\n 10 11  1  0\n 11 12  2  0\n 12 13  1  0\n 13 14  1  0\n 14 15  1  0\n 15 16  1  0\n 16 17  1  0\n 17 18  1  0\n 17 19  1  0\n 19 20  1  0\n 12 21  1  0\n 21 22  2  0\n  5 23  1  0\n 23 24  2  0\n 24 25  1  0\n 25 26  1  0\n 26 27  2  0\n 27 28  1  0\n 28 29  2  0\n 29 30  1  0\n 30 31  1  0\n 31 32  2  0\n 32 33  1  0\n 33 34  2  0\n 34 35  1  0\n 35 36  2  0\n 30 37  2  0\n 24  2  1  0\n 37 26  1  0\n 22  9  1  0\n 36 31  1  0\n 20 14  1  0\nM  END\n","sdf");
    viewer_17483188092931037.setStyle({"stick": {}});
    viewer_17483188092931037.setBackgroundColor("0xeeeeee");
    viewer_17483188092931037.zoomTo();
viewer_17483188092931037.render();
});
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="32">

</div>
</div>
<div id="cell-37" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">tm22 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(Chem.MolToMolBlock(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>))</span>
<span id="cb31-2">tm22</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="3dmolviewer_17483188364847312" style="position: relative; width: 400px; height: 400px;">
        <p id="3dmolwarning_17483188364847312" style="background-color:#ffcccc;color:black">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>
        </div>
<script>

var loadScriptAsync = function(uri){
  return new Promise((resolve, reject) => {
    //this is to ignore the existence of requirejs amd
    var savedexports, savedmodule;
    if (typeof exports !== 'undefined') savedexports = exports;
    else exports = {}
    if (typeof module !== 'undefined') savedmodule = module;
    else module = {}

    var tag = document.createElement('script');
    tag.src = uri;
    tag.async = true;
    tag.onload = () => {
        exports = savedexports;
        module = savedmodule;
        resolve();
    };
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
});
};

if(typeof $3Dmolpromise === 'undefined') {
$3Dmolpromise = null;
  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.0/3Dmol-min.js');
}

var viewer_17483188364847312 = null;
var warn = document.getElementById("3dmolwarning_17483188364847312");
if(warn) {
    warn.parentNode.removeChild(warn);
}
$3Dmolpromise.then(function() {
viewer_17483188364847312 = $3Dmol.createViewer(document.getElementById("3dmolviewer_17483188364847312"),{backgroundColor:"white"});
viewer_17483188364847312.zoomTo();
    viewer_17483188364847312.removeAllModels();
    viewer_17483188364847312.addModel("\n     RDKit          3D\n\n 37 41  0  0  0  0  0  0  0  0999 V2000\n    4.2792   -2.7557   -5.4828 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.4159   -2.0166   -4.5216 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.1234   -1.7346   -4.9046 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.2567   -1.0558   -4.0789 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.7235   -0.6617   -2.8449 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.8115    0.0420   -1.9863 N   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0448   -0.7715   -1.1024 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.2199   -2.0169   -1.1370 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.9252   -0.2127   -0.1693 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.5824   -1.1171    0.6645 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.5237   -0.7216    1.5891 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8216    0.6215    1.6877 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.8369    1.0221    2.6930 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.1686    1.0289    2.2343 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.1943    1.4050    3.1334 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.4283    0.5903    2.8122 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.7465    0.5949    1.4145 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -8.7005    1.5764    1.0045 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.6607    0.3715    0.5219 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.4103    1.1789    0.8494 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.1726    1.5154    0.8641 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.2191    1.1100   -0.0716 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.0199   -0.9503   -2.4729 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.9169   -1.6254   -3.2663 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.2345   -1.9458   -2.9309 N   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9279   -1.6461   -1.7472 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.2199   -2.0763   -1.6186 N   0  0  0  0  0  0  0  0  0  0  0  0\n    7.9795   -1.8566   -0.5508 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.4233   -1.1381    0.5139 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.1309   -0.6879    0.4270 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.5319    0.0571    1.5121 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.2287    0.5335    1.4704 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.6712    1.2476    2.5244 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.4140    1.5036    3.6564 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.6714    1.0438    3.6959 N   0  0  0  0  0  0  0  0  0  0  0  0\n    6.2284    0.3475    2.6791 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.4495   -0.9643   -0.6978 N   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  2  0\n  3  4  1  0\n  4  5  2  0\n  5  6  1  0\n  6  7  1  0\n  7  8  2  0\n  7  9  1  0\n  9 10  2  0\n 10 11  1  0\n 11 12  2  0\n 12 13  1  0\n 13 14  1  0\n 14 15  1  0\n 15 16  1  0\n 16 17  1  0\n 17 18  1  0\n 17 19  1  0\n 19 20  1  0\n 12 21  1  0\n 21 22  2  0\n  5 23  1  0\n 23 24  2  0\n 24 25  1  0\n 25 26  1  0\n 26 27  2  0\n 27 28  1  0\n 28 29  2  0\n 29 30  1  0\n 30 31  1  0\n 31 32  2  0\n 32 33  1  0\n 33 34  2  0\n 34 35  1  0\n 35 36  2  0\n 30 37  2  0\n 24  2  1  0\n 37 26  1  0\n 22  9  1  0\n 36 31  1  0\n 20 14  1  0\nM  END\n","sdf");
    viewer_17483188364847312.setStyle({"stick": {}});
    viewer_17483188364847312.setBackgroundColor("0xeeeeee");
    viewer_17483188364847312.zoomTo();
viewer_17483188364847312.render();
});
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="33">

</div>
</div>
<p>The difference here is the relative orientations of the two aromatic rings that N24 is bonded to. In the first case (more negative N), the rings are perpendicular to each other. In the second (less negative N), they are parallel.</p>
<p>What if we do an MMFF minimization of each conformer?</p>
<div id="cell-40" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">mh_mmff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mh)</span>
<span id="cb32-2">optRes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdForceFieldHelpers.MMFFOptimizeMoleculeConfs(mh_mmff,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb32-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,needsMore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(optRes):</span>
<span id="cb32-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> needsMore:</span>
<span id="cb32-5">        needsMore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdForceFieldHelpers.MMFFOptimizeMolecule(mh_mmff,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)</span></code></pre></div>
</div>
<div id="cell-41" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">eres,mmff_charges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runEHT(mh_mmff)</span></code></pre></div>
</div>
<div id="cell-42" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb34-2">plt.violinplot(mmff_charges)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MMFF"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom ID'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb34-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"partial charge"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-43" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">chgRange <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mmff_charges]</span>
<span id="cb35-2">sortedRanges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>([(y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chgRange)], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb35-3">sortedRanges[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>[(0.03803692881100473, 13), (0.025728042579126975, 19)]</code></pre>
</div>
</div>
<p>Those are much smaller changes (as we saw in the distributions).</p>
<p>What about the N24, the atom we looked at above?</p>
<div id="cell-45" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">tchgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>((y,x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(charges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>]))</span>
<span id="cb37-2">tchgs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],tchgs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>([(-0.5344846663677152, 7), (-0.5300694785153464, 9)],
 [(-0.3297127630789536, 46), (-0.3257318399680058, 22)])</code></pre>
</div>
</div>
<p>Almost no difference at all there. Are the neighboring rings now consistently orented?</p>
<div id="cell-47" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">tm7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(Chem.MolToMolBlock(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb39-2">tm7</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="3dmolviewer_1748319664848715" style="position: relative; width: 400px; height: 400px;">
        <p id="3dmolwarning_1748319664848715" style="background-color:#ffcccc;color:black">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>
        </div>
<script>

var loadScriptAsync = function(uri){
  return new Promise((resolve, reject) => {
    //this is to ignore the existence of requirejs amd
    var savedexports, savedmodule;
    if (typeof exports !== 'undefined') savedexports = exports;
    else exports = {}
    if (typeof module !== 'undefined') savedmodule = module;
    else module = {}

    var tag = document.createElement('script');
    tag.src = uri;
    tag.async = true;
    tag.onload = () => {
        exports = savedexports;
        module = savedmodule;
        resolve();
    };
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
});
};

if(typeof $3Dmolpromise === 'undefined') {
$3Dmolpromise = null;
  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.0/3Dmol-min.js');
}

var viewer_1748319664848715 = null;
var warn = document.getElementById("3dmolwarning_1748319664848715");
if(warn) {
    warn.parentNode.removeChild(warn);
}
$3Dmolpromise.then(function() {
viewer_1748319664848715 = $3Dmol.createViewer(document.getElementById("3dmolviewer_1748319664848715"),{backgroundColor:"white"});
viewer_1748319664848715.zoomTo();
    viewer_1748319664848715.removeAllModels();
    viewer_1748319664848715.addModel("\n     RDKit          3D\n\n 37 41  0  0  0  0  0  0  0  0999 V2000\n   -4.0652   -5.3614    2.5183 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.1772   -4.4307    1.7734 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.8350   -4.7025    1.6874 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.9790   -3.8638    1.0044 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.4905   -2.7421    0.4057 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5619   -1.8974   -0.2967 N   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0926   -0.8899    0.4674 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.2263   -0.8560    1.7044 O   0  0  0  0  0  0  0  0  0  0  0  0\n    1.0577    0.0416   -0.1000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.3393    0.0494   -1.4410 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2683    0.9409   -1.9879 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.8824    1.8074   -1.1041 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.8821    2.7989   -1.5701 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.2340    2.3400   -1.5765 N   0  0  0  0  0  0  0  0  0  0  0  0\n    5.4009    1.2251   -2.4922 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.7618    0.6040   -2.3843 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.6567    1.4701   -1.6720 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.0310    1.0094   -1.7270 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.2491    1.8210   -0.3476 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.7403    1.9433   -0.2981 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6037    1.8063    0.2526 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.6748    0.9157    0.8042 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8529   -2.4091    0.4571 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.6434   -3.2980    1.1592 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.0449   -2.9662    1.2322 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.5887   -1.8260    0.5829 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.1625   -2.0308   -0.6296 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.7113   -1.0312   -1.3602 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.6560    0.2477   -0.7925 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.0769    0.4715    0.4378 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.9879    1.7816    1.0651 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.3781    1.8701    2.2917 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.2655    3.1020    2.9383 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.7849    4.2365    2.3122 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.3796    4.1191    1.1049 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.4805    2.9324    0.4964 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.5418   -0.5822    1.1228 N   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  2  0\n  3  4  1  0\n  4  5  2  0\n  5  6  1  0\n  6  7  1  0\n  7  8  2  0\n  7  9  1  0\n  9 10  2  0\n 10 11  1  0\n 11 12  2  0\n 12 13  1  0\n 13 14  1  0\n 14 15  1  0\n 15 16  1  0\n 16 17  1  0\n 17 18  1  0\n 17 19  1  0\n 19 20  1  0\n 12 21  1  0\n 21 22  2  0\n  5 23  1  0\n 23 24  2  0\n 24 25  1  0\n 25 26  1  0\n 26 27  2  0\n 27 28  1  0\n 28 29  2  0\n 29 30  1  0\n 30 31  1  0\n 31 32  2  0\n 32 33  1  0\n 33 34  2  0\n 34 35  1  0\n 35 36  2  0\n 30 37  2  0\n 24  2  1  0\n 37 26  1  0\n 22  9  1  0\n 36 31  1  0\n 20 14  1  0\nM  END\n","sdf");
    viewer_1748319664848715.setStyle({"stick": {}});
    viewer_1748319664848715.setBackgroundColor("0xeeeeee");
    viewer_1748319664848715.zoomTo();
viewer_1748319664848715.render();
});
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="43">

</div>
</div>
<div id="cell-48" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">tm9 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromMolBlock(Chem.MolToMolBlock(mh,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span>
<span id="cb40-2">tm9</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="3dmolviewer_17483196896326954" style="position: relative; width: 400px; height: 400px;">
        <p id="3dmolwarning_17483196896326954" style="background-color:#ffcccc;color:black">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>
        </div>
<script>

var loadScriptAsync = function(uri){
  return new Promise((resolve, reject) => {
    //this is to ignore the existence of requirejs amd
    var savedexports, savedmodule;
    if (typeof exports !== 'undefined') savedexports = exports;
    else exports = {}
    if (typeof module !== 'undefined') savedmodule = module;
    else module = {}

    var tag = document.createElement('script');
    tag.src = uri;
    tag.async = true;
    tag.onload = () => {
        exports = savedexports;
        module = savedmodule;
        resolve();
    };
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
});
};

if(typeof $3Dmolpromise === 'undefined') {
$3Dmolpromise = null;
  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.0/3Dmol-min.js');
}

var viewer_17483196896326954 = null;
var warn = document.getElementById("3dmolwarning_17483196896326954");
if(warn) {
    warn.parentNode.removeChild(warn);
}
$3Dmolpromise.then(function() {
viewer_17483196896326954 = $3Dmol.createViewer(document.getElementById("3dmolviewer_17483196896326954"),{backgroundColor:"white"});
viewer_17483196896326954.zoomTo();
    viewer_17483196896326954.removeAllModels();
    viewer_17483196896326954.addModel("\n     RDKit          3D\n\n 37 41  0  0  0  0  0  0  0  0999 V2000\n   -5.1228   -4.6227   -2.5779 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.9076   -3.8364   -2.2482 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.7092   -4.0084   -2.9039 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6089   -3.2593   -2.5663 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6230   -2.2955   -1.5615 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.4419   -1.5803   -1.2843 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.2390   -0.6092   -0.2993 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.1555   -0.2781    0.4625 O   0  0  0  0  0  0  0  0  0  0  0  0\n    1.0533    0.0816   -0.0925 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.1590    1.0008    0.9289 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.3398    1.6864    1.1880 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.4692    1.4482    0.3958 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.7519    2.1574    0.6383 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.6241    1.4900    1.5611 N   0  0  0  0  0  0  0  0  0  0  0  0\n    6.8622    2.1865    1.8022 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.6968    2.1806    0.5466 C   0  0  0  0  0  0  0  0  0  0  0  0\n    7.8985    0.9032   -0.0178 N   0  0  0  0  0  0  0  0  0  0  0  0\n    9.2635    0.4838   -0.1487 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.9373   -0.1025    0.1972 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.9188    0.1275    1.2564 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3240    0.5181   -0.6207 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.1548   -0.1540   -0.8697 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8236   -2.1270   -0.9086 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.9371   -2.8870   -1.2526 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.1577   -2.6824   -0.5368 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.2772   -1.6893    0.4901 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.9250   -1.8980    1.7596 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.0946   -0.8847    2.6278 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.6170    0.3460    2.2390 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.9692    0.5268    0.9248 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.5314    1.7607    0.3950 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.8515    1.8109   -0.9513 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.3916    2.9637   -1.4903 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.6092    4.0693   -0.6680 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -7.2952    4.0135    0.6422 N   0  0  0  0  0  0  0  0  0  0  0  0\n   -6.7722    2.8825    1.1407 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.7879   -0.5002    0.0863 N   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  2  0\n  3  4  1  0\n  4  5  2  0\n  5  6  1  0\n  6  7  1  0\n  7  8  2  0\n  7  9  1  0\n  9 10  2  0\n 10 11  1  0\n 11 12  2  0\n 12 13  1  0\n 13 14  1  0\n 14 15  1  0\n 15 16  1  0\n 16 17  1  0\n 17 18  1  0\n 17 19  1  0\n 19 20  1  0\n 12 21  1  0\n 21 22  2  0\n  5 23  1  0\n 23 24  2  0\n 24 25  1  0\n 25 26  1  0\n 26 27  2  0\n 27 28  1  0\n 28 29  2  0\n 29 30  1  0\n 30 31  1  0\n 31 32  2  0\n 32 33  1  0\n 33 34  2  0\n 34 35  1  0\n 35 36  2  0\n 30 37  2  0\n 24  2  1  0\n 37 26  1  0\n 22  9  1  0\n 36 31  1  0\n 20 14  1  0\nM  END\n","sdf");
    viewer_17483196896326954.setStyle({"stick": {}});
    viewer_17483196896326954.setBackgroundColor("0xeeeeee");
    viewer_17483196896326954.zoomTo();
viewer_17483196896326954.render();
});
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="44">

</div>
</div>
<p>They are: the rings are more or less perpendicular in both conformers.</p>
<p>The charge variability has dropped considerably, are the MMFF conformers actually different from each other?</p>
<div id="cell-51" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">rmsds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb41-2">cp1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mh_mmff)</span>
<span id="cb41-3">cp2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mh_mmff)</span>
<span id="cb41-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mh_mmff.GetNumConformers()):</span>
<span id="cb41-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,mh_mmff.GetNumConformers()):</span>
<span id="cb41-6">        rmsds.append(rdMolAlign.GetBestRMS(cp1,cp2,prbId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,refId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>j))</span>
<span id="cb41-7">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb41-8">plt.hist(rmsds,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb41-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RMSD'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So the conformers are still different from each other but the charge differences are now much smaller than they were previously.</p>
</section>
<section id="repeat-the-analysis-for-another-molecule" class="level1">
<h1>Repeat the analysis for another molecule</h1>
<div id="cell-54" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rivaroxaban</span></span>
<span id="cb42-2">m2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.MolFromSmiles(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O=C(NC[C@H]1CN(c2ccc(N3CCOCC3=O)cc2)C(=O)O1)c1ccc(Cl)s1'</span>)</span>
<span id="cb42-3">m2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-55" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">mh2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.AddHs(m2)</span>
<span id="cb43-2">rdDistGeom.EmbedMultipleConfs(mh2,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,params)</span>
<span id="cb43-3">mh2_mmff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mh2)</span>
<span id="cb43-4">optRes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdForceFieldHelpers.MMFFOptimizeMoleculeConfs(mh2_mmff,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb43-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,needsMore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(optRes):</span>
<span id="cb43-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> needsMore:</span>
<span id="cb43-7">        needsMore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdForceFieldHelpers.MMFFOptimizeMolecule(mh2_mmff,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,confId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)</span></code></pre></div>
</div>
<div id="cell-56" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">eres,charges2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runEHT(mh2)</span>
<span id="cb44-2">eres,mmff_charges2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runEHT(mh2_mmff)</span></code></pre></div>
</div>
<div id="cell-57" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb45-2">plt.violinplot(charges2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ETKDG"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom ID'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb45-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"partial charge"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Less variability than we had with the ETKDG conformers of imatinib, but there is still some. This almost entirely vanishes when using the MMFF-optimized conformers:</p>
<div id="cell-59" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb46-2">plt.violinplot(mmff_charges2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MMFF"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'atom ID'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb46-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"partial charge"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-36-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Confirm again that the MMFF conformers actually different:</p>
<div id="cell-61" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">rmsds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb47-2">cp1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mh2_mmff)</span>
<span id="cb47-3">cp2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.RemoveHs(mh2_mmff)</span>
<span id="cb47-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(mh2_mmff.GetNumConformers()):</span>
<span id="cb47-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,mh2_mmff.GetNumConformers()):</span>
<span id="cb47-6">        rmsds.append(rdMolAlign.GetBestRMS(cp1,cp2,prbId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i,refId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>j))</span>
<span id="cb47-7">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb47-8">plt.hist(rmsds,bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb47-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RMSD'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit_files/figure-html/cell-37-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>They are.</p>
</section>
<section id="performance" class="level1">
<h1>Performance</h1>
<p>How long does it take to do this analysis?</p>
<p>Start by looking at the time required to generate a conformer:</p>
<div id="cell-65" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">tempM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chem.Mol(mh2)</span>
<span id="cb48-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMolecule(tempM,params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>22 ms ± 164 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>Or to generate a conformer and MMFF minimize it:</p>
<div id="cell-67" class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdDistGeom.EmbedMolecule(tempM,params)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>rdForceFieldHelpers.MMFFOptimizeMolecule(tempM,maxIters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>40.3 ms ± 391 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>Do the eHT calculation:</p>
<div id="cell-69" class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rdEHTTools.RunMol(tempM)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>19.4 ms ± 51.5 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>So we can generate a conformer for rivaroxaban, MMFF minimize it, and then do the eHT calculation to get, for example, partial charges (remember these don’t seem to change that much across MMFF conformers) in about 60ms. Not bad!</p>


</section>

 ]]></description>
  <category>tutorial</category>
  <guid>https://greglandrum.github.io/rdkit-blog/posts/2025-05-30-eHT-in-RDKit.html</guid>
  <pubDate>Thu, 29 May 2025 22:00:00 GMT</pubDate>
  <media:content url="https://greglandrum.github.io/rdkit-blog/posts/images/blog/eHT-in-RDKit-1.png" medium="image" type="image/png" height="99" width="144"/>
</item>
</channel>
</rss>
